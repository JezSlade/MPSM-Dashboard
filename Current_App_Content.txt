WEB APPLICATION CONTENT COLLECTION
Generated: Mon Jun 16 10:17:59 EDT 2025
----------------------------------------

==== CONFIG FILE: ./.env ====
Size: 797 bytes
Last Modified: Fri Jun 13 14:39:52 EDT 2025
----------------------------------------
# API Configuration
# These settings are used to connect to the MPS Monitor API and manage devices.
CLIENT_ID=9AT9j4UoU2BgLEqmiYCz
CLIENT_SECRET=9gTbAKBCZe1ftYQbLbq9
USERNAME=dashboard
PASSWORD=d@$hpa$$2024
SCOPE=account
TOKEN_URL=https://api.abassetmanagement.com/api3/token
API_BASE_URL=https://api.abassetmanagement.com/api3/
DEALER_CODE=NY06AGDWUQ
DEALER_ID=SZ13qRwU5GtFLj0i_CbEgQ2

# Debugging and Logging Configuration
DEBUG_MODE=true
DEBUG_PANEL_ENABLED=true
DEBUG_LOG_TO_FILE=true
MAX_DEBUG_LOG_SIZE_MB=5

LOG_INFO=true
LOG_WARNING=true
LOG_ERROR=true
LOG_DEBUG=true
LOG_SECURITY=true

# Database Configuration
TIMEZONE=America/New_York

# Application settings
APP_BASE_URL=https://mpsm.resolutionsbydesign.us/
APP_NAME=MPS Monitor Dashboard
APP_VERSION=0.1.2


==== TEXT FILE: ./.github/workflows/deploy.yml ====
Size: 1943 bytes
Last Modified: Wed Jun 11 12:47:48 EDT 2025
----------------------------------------
name: FTP Deploy - Final Lean

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Generate Version File in Root
        # This command creates 'version.js' directly in the root of the checked-out repository.
        run: |
          echo "window.appVersion = \"0.0.0.${{ github.run_number }}\";" > version.js

      - name: 🚀 Deploy Website via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.0
        with:
          server: ftp.resolutionsbydesign.us
          username: mpsm@mpsm.resolutionsbydesign.us
          # IMPORTANT: Use a GitHub Secret for your password in a real-world scenario!
          # For this non-production example, it's hardcoded as per your instruction.
          password: Deploy123!
          protocol: ftp
          port: 21

          # Deploy everything from the root of the checked-out repository
          local-dir: ./
          # Deploy to the root directory of the FTP server
          server-dir: /

          # CAUTION: This will delete EVERYTHING on the server-dir before uploading!
          dangerous-clean-slate: true

          exclude: |
            .git/
            .github/ # Exclude GitHub Actions workflow files and their directories
            # Add any other files/directories you do NOT want to deploy from your repository root.
            # Example: node_modules/
            # Example: .env.development

          log-level: verbose

      - name: 📜 Deployment Completed Report
        run: |
          echo "### DEPLOYMENT SUMMARY ###"
          echo "- Version: 0.0.0.${{ github.run_number }}"
          echo "- FTP Server: ftp.resolutionsbydesign.us"
          echo "- Server Directory: /"
          echo "- Local Directory: ./"


==== CONFIG FILE: ./.htaccess ====
Size: 767 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
# Enable rewrite engine
RewriteEngine On

# Preserve HTTP Authorization headers (for APIs)
RewriteCond %{HTTP:Authorization} .
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

# Redirect HTTP to HTTPS (optional but recommended)
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Ensure index.php is used as default for root
DirectoryIndex index.php

# Allow access to .php files
<FilesMatch "\.php$">
  Require all granted
</FilesMatch>

# If you want to allow direct access to /api/ files
<IfModule mod_dir.c>
  <IfModule mod_access_compat.c>
    <Directory "/home/resolut7/public_html/mpsm.resolutionsbydesign.us/api">
      Require all granted
    </Directory>
  </IfModule>
</IfModule>



==== TEXT FILE: ./.vscode/settings.json ====
Size: 43 bytes
Last Modified: Thu Jun 12 12:02:57 EDT 2025
----------------------------------------
{
    "markdown.validate.enabled": true
}


==== PHP FILE: ./api/get_customers.php ====
Size: 3117 bytes
Last Modified: Fri Jun 13 15:04:16 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode(["error" => ".env file not found"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode(["error" => "Missing $key in .env"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode(["error" => "Token request failed", "details" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$api_url = rtrim($env['API_BASE_URL'], '/') . '/Customer/GetCustomers';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    "Authorization: Bearer $token",
    "Content-Type: application/json",
    "Accept: application/json"
]);

// No payload needed for this raw call
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode([
    'DealerCode'  => $env['DEALER_CODE'],
    'Code'        => null,
    'HasHpSds'    => null,
    'FilterText'  => null,
    'PageNumber'  => 1,
    'PageRows'    => 2147483647,
    'SortColumn'  => 'Id',
    'SortOrder'   => 0
]));



$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>



==== PHP FILE: ./api/get_devices.php ====
Size: 3311 bytes
Last Modified: Fri Jun 13 16:52:34 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode(["error" => ".env file not found"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode(["error" => "Missing $key in .env"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode(["error" => "Token request failed", "details" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$customerCode = $_GET['customer'] ?? null;

$payload = [
    'FilterDealerId'      => $env['DEALER_ID'],
    'FilterCustomerCodes' => [$customerCode],
    'ProductBrand'        => null,
    'ProductModel'        => null,
    'OfficeId'            => null,
    'Status'              => 1,
    'FilterText'          => null,
    'PageNumber'          => 1,
    'PageRows'            => 2147483647,
    'SortColumn'          => 'Id',
    'SortOrder'           => 0
];


$api_url = rtrim($env['API_BASE_URL'], '/') . '/Device/List';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    "Authorization: Bearer $token",
    "Content-Type: application/json",
    "Accept: application/json"
]);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));

$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>



==== PHP FILE: ./api/get_device_alerts.php ====
Size: 2673 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Manual .env parsing
$env = parse_ini_file(__DIR__ . '/../.env');
$clientId = $env['CLIENT_ID'] ?? '';
$clientSecret = $env['CLIENT_SECRET'] ?? '';
$username = $env['USERNAME'] ?? '';
$password = $env['PASSWORD'] ?? '';
$scope = $env['SCOPE'] ?? '';
$tokenUrl = $env['TOKEN_URL'] ?? '';
$apiBaseUrl = rtrim($env['API_BASE_URL'] ?? '', '/') . '/';
$dealerCode = $env['DEALER_CODE'] ?? '';
$defaultCustomer = 'W9OPXL0YDK';

// --- Get Auth Token ---
$token = null;
$tokenPayload = http_build_query([
  'grant_type' => 'password',
  'client_id' => $clientId,
  'client_secret' => $clientSecret,
  'username' => $username,
  'password' => $password,
  'scope' => $scope,
]);

$tokenContext = stream_context_create([
  'http' => [
    'method' => 'POST',
    'header' => "Content-Type: application/x-www-form-urlencoded",
    'content' => $tokenPayload
  ]
]);

$tokenResponse = file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
  http_response_code(500);
  echo json_encode(['error' => 'Unable to retrieve access token']);
  exit;
}

// --- Prepare Payload ---
$customerCode = $_GET['customer'] ?? $defaultCustomer;

$payload = json_encode([
  'DealerCode' => $dealerCode,
  'CustomerCode' => $customerCode,
  'DeviceId' => null,
  'SerialNumber' => null,
  'AssetNumber' => null,
  'InitialFrom' => null,
  'InitialTo' => null,
  'ExhaustedFrom' => null,
  'ExhaustedTo' => null,
  'Brand' => null,
  'Model' => null,
  'OfficeDescription' => null,
  'SupplySetDescription' => null,
  'FilterCustomerText' => null,
  'ManageOption' => null,
  'InstallationOption' => null,
  'CancelOption' => null,
  'HiddenOption' => null,
  'SupplyType' => null,
  'ColorType' => null,
  'ExcludeForStockShippedSupplies' => false,
  'FilterText' => null,
  'PageNumber' => 1,
  'PageRows' => 50,
  'SortColumn' => 'InitialDate',
  'SortOrder' => 0
]);

// --- Perform API Call ---
$opts = [
  'http' => [
    'method' => 'POST',
    'header' => "Content-Type: application/json\r\nAuthorization: Bearer $token",
    'content' => $payload
  ]
];
$context = stream_context_create($opts);
$response = file_get_contents($apiBaseUrl . 'SupplyAlert/List', false, $context);

// --- Output JSON ---
header('Content-Type: application/json');
echo $response;



==== PHP FILE: ./api/get_device_detail.php ====
Size: 2494 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

header('Content-Type: application/json');

// Load .env manually
$envPath = realpath(__DIR__ . '/../.env');
if (!file_exists($envPath)) {
    echo json_encode(['success' => false, 'error' => 'Missing .env']);
    exit;
}

$lines = file($envPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
foreach ($lines as $line) {
    if (strpos(trim($line), '#') === 0) continue;
    [$key, $value] = explode('=', $line, 2);
    putenv(trim($key) . '=' . trim($value));
}

$id = $_GET['id'] ?? null;
if (!$id) {
    echo json_encode(['success' => false, 'error' => 'Missing device Id']);
    exit;
}

// Get token
$tokenUrl = getenv('TOKEN_URL');
$clientId = getenv('CLIENT_ID');
$clientSecret = getenv('CLIENT_SECRET');
$username = getenv('USERNAME');
$password = getenv('PASSWORD');
$scope = getenv('SCOPE');

$tokenPayload = http_build_query([
    'grant_type' => 'password',
    'client_id' => $clientId,
    'client_secret' => $clientSecret,
    'username' => $username,
    'password' => $password,
    'scope' => $scope,
]);

$tokenContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => "Content-Type: application/x-www-form-urlencoded",
        'content' => $tokenPayload,
    ]
]);

$tokenResponse = @file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
    echo json_encode(['success' => false, 'error' => 'Failed to authenticate']);
    exit;
}

// Fetch detailed device data
$apiBase = getenv('API_BASE_URL');
$detailPayload = json_encode([
    'Id' => $id
]);

$detailContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => "Content-Type: application/json\r\nAuthorization: Bearer $token",
        'content' => $detailPayload,
    ]
]);

$detailResponse = @file_get_contents($apiBase . 'Device/Get', false, $detailContext);
if ($detailResponse === false) {
    echo json_encode(['success' => false, 'error' => 'Failed to retrieve device detail']);
    exit;
}

$detailData = json_decode($detailResponse, true);
echo json_encode(['success' => true, 'data' => $detailData]);



==== PHP FILE: ./api/get_token.php ====
Size: 1958 bytes
Last Modified: Fri Jun 13 14:45:19 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode(["error" => ".env file not found"]);
        exit;
    }

    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

header('Content-Type: application/json');

$env = load_env();

$required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
foreach ($required as $key) {
    if (empty($env[$key])) {
        echo json_encode(["error" => "Missing $key in .env"]);
        exit;
    }
}

$postFields = http_build_query([
    'grant_type'    => 'password',
    'client_id'     => $env['CLIENT_ID'],
    'client_secret' => $env['CLIENT_SECRET'],
    'username'      => $env['USERNAME'],
    'password'      => $env['PASSWORD'],
    'scope'         => $env['SCOPE']
]);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/x-www-form-urlencoded',
    'Accept: application/json'
]);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if (curl_errno($ch)) {
    echo json_encode(["error" => curl_error($ch)]);
    curl_close($ch);
    exit;
}

curl_close($ch);
http_response_code($httpCode);
echo $response;
?>



==== TEXT FILE: ./app_contents_20250616_101715.txt ====
Size: 18601 bytes
Last Modified: Mon Jun 16 10:18:02 EDT 2025
----------------------------------------
WEB APPLICATION CONTENT COLLECTION
Generated: Mon Jun 16 10:17:59 EDT 2025
----------------------------------------

==== CONFIG FILE: ./.env ====
Size: 797 bytes
Last Modified: Fri Jun 13 14:39:52 EDT 2025
----------------------------------------
# API Configuration
# These settings are used to connect to the MPS Monitor API and manage devices.
CLIENT_ID=9AT9j4UoU2BgLEqmiYCz
CLIENT_SECRET=9gTbAKBCZe1ftYQbLbq9
USERNAME=dashboard
PASSWORD=d@$hpa$$2024
SCOPE=account
TOKEN_URL=https://api.abassetmanagement.com/api3/token
API_BASE_URL=https://api.abassetmanagement.com/api3/
DEALER_CODE=NY06AGDWUQ
DEALER_ID=SZ13qRwU5GtFLj0i_CbEgQ2

# Debugging and Logging Configuration
DEBUG_MODE=true
DEBUG_PANEL_ENABLED=true
DEBUG_LOG_TO_FILE=true
MAX_DEBUG_LOG_SIZE_MB=5

LOG_INFO=true
LOG_WARNING=true
LOG_ERROR=true
LOG_DEBUG=true
LOG_SECURITY=true

# Database Configuration
TIMEZONE=America/New_York

# Application settings
APP_BASE_URL=https://mpsm.resolutionsbydesign.us/
APP_NAME=MPS Monitor Dashboard
APP_VERSION=0.1.2


==== TEXT FILE: ./.github/workflows/deploy.yml ====
Size: 1943 bytes
Last Modified: Wed Jun 11 12:47:48 EDT 2025
----------------------------------------
name: FTP Deploy - Final Lean

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Generate Version File in Root
        # This command creates 'version.js' directly in the root of the checked-out repository.
        run: |
          echo "window.appVersion = \"0.0.0.${{ github.run_number }}\";" > version.js

      - name: 🚀 Deploy Website via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.0
        with:
          server: ftp.resolutionsbydesign.us
          username: mpsm@mpsm.resolutionsbydesign.us
          # IMPORTANT: Use a GitHub Secret for your password in a real-world scenario!
          # For this non-production example, it's hardcoded as per your instruction.
          password: Deploy123!
          protocol: ftp
          port: 21

          # Deploy everything from the root of the checked-out repository
          local-dir: ./
          # Deploy to the root directory of the FTP server
          server-dir: /

          # CAUTION: This will delete EVERYTHING on the server-dir before uploading!
          dangerous-clean-slate: true

          exclude: |
            .git/
            .github/ # Exclude GitHub Actions workflow files and their directories
            # Add any other files/directories you do NOT want to deploy from your repository root.
            # Example: node_modules/
            # Example: .env.development

          log-level: verbose

      - name: 📜 Deployment Completed Report
        run: |
          echo "### DEPLOYMENT SUMMARY ###"
          echo "- Version: 0.0.0.${{ github.run_number }}"
          echo "- FTP Server: ftp.resolutionsbydesign.us"
          echo "- Server Directory: /"
          echo "- Local Directory: ./"


==== CONFIG FILE: ./.htaccess ====
Size: 767 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
# Enable rewrite engine
RewriteEngine On

# Preserve HTTP Authorization headers (for APIs)
RewriteCond %{HTTP:Authorization} .
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

# Redirect HTTP to HTTPS (optional but recommended)
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Ensure index.php is used as default for root
DirectoryIndex index.php

# Allow access to .php files
<FilesMatch "\.php$">
  Require all granted
</FilesMatch>

# If you want to allow direct access to /api/ files
<IfModule mod_dir.c>
  <IfModule mod_access_compat.c>
    <Directory "/home/resolut7/public_html/mpsm.resolutionsbydesign.us/api">
      Require all granted
    </Directory>
  </IfModule>
</IfModule>



==== TEXT FILE: ./.vscode/settings.json ====
Size: 43 bytes
Last Modified: Thu Jun 12 12:02:57 EDT 2025
----------------------------------------
{
    "markdown.validate.enabled": true
}


==== PHP FILE: ./api/get_customers.php ====
Size: 3117 bytes
Last Modified: Fri Jun 13 15:04:16 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode(["error" => ".env file not found"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode(["error" => "Missing $key in .env"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode(["error" => "Token request failed", "details" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$api_url = rtrim($env['API_BASE_URL'], '/') . '/Customer/GetCustomers';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    "Authorization: Bearer $token",
    "Content-Type: application/json",
    "Accept: application/json"
]);

// No payload needed for this raw call
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode([
    'DealerCode'  => $env['DEALER_CODE'],
    'Code'        => null,
    'HasHpSds'    => null,
    'FilterText'  => null,
    'PageNumber'  => 1,
    'PageRows'    => 2147483647,
    'SortColumn'  => 'Id',
    'SortOrder'   => 0
]));



$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>



==== PHP FILE: ./api/get_devices.php ====
Size: 3311 bytes
Last Modified: Fri Jun 13 16:52:34 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode(["error" => ".env file not found"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode(["error" => "Missing $key in .env"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode(["error" => "Token request failed", "details" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$customerCode = $_GET['customer'] ?? null;

$payload = [
    'FilterDealerId'      => $env['DEALER_ID'],
    'FilterCustomerCodes' => [$customerCode],
    'ProductBrand'        => null,
    'ProductModel'        => null,
    'OfficeId'            => null,
    'Status'              => 1,
    'FilterText'          => null,
    'PageNumber'          => 1,
    'PageRows'            => 2147483647,
    'SortColumn'          => 'Id',
    'SortOrder'           => 0
];


$api_url = rtrim($env['API_BASE_URL'], '/') . '/Device/List';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    "Authorization: Bearer $token",
    "Content-Type: application/json",
    "Accept: application/json"
]);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));

$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>



==== PHP FILE: ./api/get_device_alerts.php ====
Size: 2673 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Manual .env parsing
$env = parse_ini_file(__DIR__ . '/../.env');
$clientId = $env['CLIENT_ID'] ?? '';
$clientSecret = $env['CLIENT_SECRET'] ?? '';
$username = $env['USERNAME'] ?? '';
$password = $env['PASSWORD'] ?? '';
$scope = $env['SCOPE'] ?? '';
$tokenUrl = $env['TOKEN_URL'] ?? '';
$apiBaseUrl = rtrim($env['API_BASE_URL'] ?? '', '/') . '/';
$dealerCode = $env['DEALER_CODE'] ?? '';
$defaultCustomer = 'W9OPXL0YDK';

// --- Get Auth Token ---
$token = null;
$tokenPayload = http_build_query([
  'grant_type' => 'password',
  'client_id' => $clientId,
  'client_secret' => $clientSecret,
  'username' => $username,
  'password' => $password,
  'scope' => $scope,
]);

$tokenContext = stream_context_create([
  'http' => [
    'method' => 'POST',
    'header' => "Content-Type: application/x-www-form-urlencoded",
    'content' => $tokenPayload
  ]
]);

$tokenResponse = file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
  http_response_code(500);
  echo json_encode(['error' => 'Unable to retrieve access token']);
  exit;
}

// --- Prepare Payload ---
$customerCode = $_GET['customer'] ?? $defaultCustomer;

$payload = json_encode([
  'DealerCode' => $dealerCode,
  'CustomerCode' => $customerCode,
  'DeviceId' => null,
  'SerialNumber' => null,
  'AssetNumber' => null,
  'InitialFrom' => null,
  'InitialTo' => null,
  'ExhaustedFrom' => null,
  'ExhaustedTo' => null,
  'Brand' => null,
  'Model' => null,
  'OfficeDescription' => null,
  'SupplySetDescription' => null,
  'FilterCustomerText' => null,
  'ManageOption' => null,
  'InstallationOption' => null,
  'CancelOption' => null,
  'HiddenOption' => null,
  'SupplyType' => null,
  'ColorType' => null,
  'ExcludeForStockShippedSupplies' => false,
  'FilterText' => null,
  'PageNumber' => 1,
  'PageRows' => 50,
  'SortColumn' => 'InitialDate',
  'SortOrder' => 0
]);

// --- Perform API Call ---
$opts = [
  'http' => [
    'method' => 'POST',
    'header' => "Content-Type: application/json\r\nAuthorization: Bearer $token",
    'content' => $payload
  ]
];
$context = stream_context_create($opts);
$response = file_get_contents($apiBaseUrl . 'SupplyAlert/List', false, $context);

// --- Output JSON ---
header('Content-Type: application/json');
echo $response;



==== PHP FILE: ./api/get_device_detail.php ====
Size: 2494 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

header('Content-Type: application/json');

// Load .env manually
$envPath = realpath(__DIR__ . '/../.env');
if (!file_exists($envPath)) {
    echo json_encode(['success' => false, 'error' => 'Missing .env']);
    exit;
}

$lines = file($envPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
foreach ($lines as $line) {
    if (strpos(trim($line), '#') === 0) continue;
    [$key, $value] = explode('=', $line, 2);
    putenv(trim($key) . '=' . trim($value));
}

$id = $_GET['id'] ?? null;
if (!$id) {
    echo json_encode(['success' => false, 'error' => 'Missing device Id']);
    exit;
}

// Get token
$tokenUrl = getenv('TOKEN_URL');
$clientId = getenv('CLIENT_ID');
$clientSecret = getenv('CLIENT_SECRET');
$username = getenv('USERNAME');
$password = getenv('PASSWORD');
$scope = getenv('SCOPE');

$tokenPayload = http_build_query([
    'grant_type' => 'password',
    'client_id' => $clientId,
    'client_secret' => $clientSecret,
    'username' => $username,
    'password' => $password,
    'scope' => $scope,
]);

$tokenContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => "Content-Type: application/x-www-form-urlencoded",
        'content' => $tokenPayload,
    ]
]);

$tokenResponse = @file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
    echo json_encode(['success' => false, 'error' => 'Failed to authenticate']);
    exit;
}

// Fetch detailed device data
$apiBase = getenv('API_BASE_URL');
$detailPayload = json_encode([
    'Id' => $id
]);

$detailContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => "Content-Type: application/json\r\nAuthorization: Bearer $token",
        'content' => $detailPayload,
    ]
]);

$detailResponse = @file_get_contents($apiBase . 'Device/Get', false, $detailContext);
if ($detailResponse === false) {
    echo json_encode(['success' => false, 'error' => 'Failed to retrieve device detail']);
    exit;
}

$detailData = json_decode($detailResponse, true);
echo json_encode(['success' => true, 'data' => $detailData]);



==== PHP FILE: ./api/get_token.php ====
Size: 1958 bytes
Last Modified: Fri Jun 13 14:45:19 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode(["error" => ".env file not found"]);
        exit;
    }

    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

header('Content-Type: application/json');

$env = load_env();

$required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
foreach ($required as $key) {
    if (empty($env[$key])) {
        echo json_encode(["error" => "Missing $key in .env"]);
        exit;
    }
}

$postFields = http_build_query([
    'grant_type'    => 'password',
    'client_id'     => $env['CLIENT_ID'],
    'client_secret' => $env['CLIENT_SECRET'],
    'username'      => $env['USERNAME'],
    'password'      => $env['PASSWORD'],
    'scope'         => $env['SCOPE']
]);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/x-www-form-urlencoded',
    'Accept: application/json'
]);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if (curl_errno($ch)) {
    echo json_encode(["error" => curl_error($ch)]);
    curl_close($ch);
    exit;
}

curl_close($ch);
http_response_code($httpCode);
echo $response;
?>



==== TEXT FILE: ./app_contents_20250616_101715.txt ====
Size: 18601 bytes
Last Modified: Mon Jun 16 10:18:02 EDT 2025
----------------------------------------



==== TEXT FILE: ./app_structure_20250616_101715.json ====
Size: 4681644 bytes
Last Modified: Mon Jun 16 10:17:59 EDT 2025
----------------------------------------
[
{
    "path": ".env",
    "name": ".env",
    "directory": ".",
    "creation_date": "",
    "modification_date": "./.env 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006175 32006175 18446744073709551615 -1
2025-06-13 14:39:52",
    "size_bytes":   File: "./.env"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006175   Available: 32006175
Inodes: Total: 18446744073709551615 Free: -1
797,
    "mime_type": "text/plain",
    "file_type": "Text",
    "content": "# API Configuration
# These settings are used to connect to the MPS Monitor API and manage devices.
CLIENT_ID=9AT9j4UoU2BgLEqmiYCz
CLIENT_SECRET=9gTbAKBCZe1ftYQbLbq9
USERNAME=dashboard
PASSWORD=d@$hpa$$2024
SCOPE=account
TOKEN_URL=https://api.abassetmanagement.com/api3/token
API_BASE_URL=https://api.abassetmanagement.com/api3/
DEALER_CODE=NY06AGDWUQ
DEALER_ID=SZ13qRwU5GtFLj0i_CbEgQ2

# Debugging and Logging Configuration
DEBUG_MODE=true
DEBUG_PANEL_ENABLED=true
DEBUG_LOG_TO_FILE=true
MAX_DEBUG_LOG_SIZE_MB=5

LOG_INFO=true
LOG_WARNING=true
LOG_ERROR=true
LOG_DEBUG=true
LOG_SECURITY=true

# Database Configuration
TIMEZONE=America/New_York

# Application settings
APP_BASE_URL=https://mpsm.resolutionsbydesign.us/
APP_NAME=MPS Monitor Dashboard
APP_VERSION=0.1.2"
}
,
{
    "path": ".github/workflows/deploy.yml",
    "name": "deploy.yml",
    "directory": ".github/workflows",
    "creation_date": "",
    "modification_date": "./.github/workflows/deploy.yml 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006175 32006175 18446744073709551615 -1
2025-06-11 12:47:48",
    "size_bytes":   File: "./.github/workflows/deploy.yml"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006175   Available: 32006175
Inodes: Total: 18446744073709551615 Free: -1
1943,
    "mime_type": "text/plain",
    "file_type": "Text",
    "content": "name: FTP Deploy - Final Lean

on:
  push:
    branches: [\"main\"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Generate Version File in Root
        # This command creates 'version.js' directly in the root of the checked-out repository.
        run: |
          echo \"window.appVersion = \\\"0.0.0.${{ github.run_number }}\\\";\" > version.js

      - name: 🚀 Deploy Website via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.0
        with:
          server: ftp.resolutionsbydesign.us
          username: mpsm@mpsm.resolutionsbydesign.us
          # IMPORTANT: Use a GitHub Secret for your password in a real-world scenario!
          # For this non-production example, it's hardcoded as per your instruction.
          password: Deploy123!
          protocol: ftp
          port: 21

          # Deploy everything from the root of the checked-out repository
          local-dir: ./
          # Deploy to the root directory of the FTP server
          server-dir: /

          # CAUTION: This will delete EVERYTHING on the server-dir before uploading!
          dangerous-clean-slate: true

          exclude: |
            .git/
            .github/ # Exclude GitHub Actions workflow files and their directories
            # Add any other files/directories you do NOT want to deploy from your repository root.
            # Example: node_modules/
            # Example: .env.development

          log-level: verbose

      - name: 📜 Deployment Completed Report
        run: |
          echo \"### DEPLOYMENT SUMMARY ###\"
          echo \"- Version: 0.0.0.${{ github.run_number }}\"
          echo \"- FTP Server: ftp.resolutionsbydesign.us\"
          echo \"- Server Directory: /\"
          echo \"- Local Directory: ./\""
}
,
{
    "path": ".htaccess",
    "name": ".htaccess",
    "directory": ".",
    "creation_date": "",
    "modification_date": "./.htaccess 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006191 32006191 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./.htaccess"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006191   Available: 32006191
Inodes: Total: 18446744073709551615 Free: -1
767,
    "mime_type": "text/plain",
    "file_type": "Text",
    "content": "# Enable rewrite engine
RewriteEngine On

# Preserve HTTP Authorization headers (for APIs)
RewriteCond %{HTTP:Authorization} .
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

# Redirect HTTP to HTTPS (optional but recommended)
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Ensure index.php is used as default for root
DirectoryIndex index.php

# Allow access to .php files
<FilesMatch \"\\.php$\">
  Require all granted
</FilesMatch>

# If you want to allow direct access to /api/ files
<IfModule mod_dir.c>
  <IfModule mod_access_compat.c>
    <Directory \"/home/resolut7/public_html/mpsm.resolutionsbydesign.us/api\">
      Require all granted
    </Directory>
  </IfModule>
</IfModule>"
}
,
{
    "path": ".vscode/settings.json",
    "name": "settings.json",
    "directory": ".vscode",
    "creation_date": "",
    "modification_date": "./.vscode/settings.json 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006190 32006190 18446744073709551615 -1
2025-06-12 12:02:57",
    "size_bytes":   File: "./.vscode/settings.json"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006190   Available: 32006190
Inodes: Total: 18446744073709551615 Free: -1
43,
    "mime_type": "application/json",
    "file_type": "Text",
    "content": "{
    \"markdown.validate.enabled\": true
}"
}
,
{
    "path": "api/get_customers.php",
    "name": "get_customers.php",
    "directory": "api",
    "creation_date": "",
    "modification_date": "./api/get_customers.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006189 32006189 18446744073709551615 -1
2025-06-13 15:04:16",
    "size_bytes":   File: "./api/get_customers.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006189   Available: 32006189
Inodes: Total: 18446744073709551615 Free: -1
3117,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode([\"error\" => \".env file not found\"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode([\"error\" => \"Missing $key in .env\"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode([\"error\" => \"Token request failed\", \"details\" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$api_url = rtrim($env['API_BASE_URL'], '/') . '/Customer/GetCustomers';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    \"Authorization: Bearer $token\",
    \"Content-Type: application/json\",
    \"Accept: application/json\"
]);

// No payload needed for this raw call
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode([
    'DealerCode'  => $env['DEALER_CODE'],
    'Code'        => null,
    'HasHpSds'    => null,
    'FilterText'  => null,
    'PageNumber'  => 1,
    'PageRows'    => 2147483647,
    'SortColumn'  => 'Id',
    'SortOrder'   => 0
]));



$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>"
}
,
{
    "path": "api/get_devices.php",
    "name": "get_devices.php",
    "directory": "api",
    "creation_date": "",
    "modification_date": "./api/get_devices.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006188 32006188 18446744073709551615 -1
2025-06-13 16:52:34",
    "size_bytes":   File: "./api/get_devices.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006188   Available: 32006188
Inodes: Total: 18446744073709551615 Free: -1
3311,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode([\"error\" => \".env file not found\"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode([\"error\" => \"Missing $key in .env\"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode([\"error\" => \"Token request failed\", \"details\" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$customerCode = $_GET['customer'] ?? null;

$payload = [
    'FilterDealerId'      => $env['DEALER_ID'],
    'FilterCustomerCodes' => [$customerCode],
    'ProductBrand'        => null,
    'ProductModel'        => null,
    'OfficeId'            => null,
    'Status'              => 1,
    'FilterText'          => null,
    'PageNumber'          => 1,
    'PageRows'            => 2147483647,
    'SortColumn'          => 'Id',
    'SortOrder'           => 0
];


$api_url = rtrim($env['API_BASE_URL'], '/') . '/Device/List';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    \"Authorization: Bearer $token\",
    \"Content-Type: application/json\",
    \"Accept: application/json\"
]);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));

$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>"
}
,
{
    "path": "api/get_device_alerts.php",
    "name": "get_device_alerts.php",
    "directory": "api",
    "creation_date": "",
    "modification_date": "./api/get_device_alerts.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006187 32006187 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./api/get_device_alerts.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006187   Available: 32006187
Inodes: Total: 18446744073709551615 Free: -1
2673,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Manual .env parsing
$env = parse_ini_file(__DIR__ . '/../.env');
$clientId = $env['CLIENT_ID'] ?? '';
$clientSecret = $env['CLIENT_SECRET'] ?? '';
$username = $env['USERNAME'] ?? '';
$password = $env['PASSWORD'] ?? '';
$scope = $env['SCOPE'] ?? '';
$tokenUrl = $env['TOKEN_URL'] ?? '';
$apiBaseUrl = rtrim($env['API_BASE_URL'] ?? '', '/') . '/';
$dealerCode = $env['DEALER_CODE'] ?? '';
$defaultCustomer = 'W9OPXL0YDK';

// --- Get Auth Token ---
$token = null;
$tokenPayload = http_build_query([
  'grant_type' => 'password',
  'client_id' => $clientId,
  'client_secret' => $clientSecret,
  'username' => $username,
  'password' => $password,
  'scope' => $scope,
]);

$tokenContext = stream_context_create([
  'http' => [
    'method' => 'POST',
    'header' => \"Content-Type: application/x-www-form-urlencoded\",
    'content' => $tokenPayload
  ]
]);

$tokenResponse = file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
  http_response_code(500);
  echo json_encode(['error' => 'Unable to retrieve access token']);
  exit;
}

// --- Prepare Payload ---
$customerCode = $_GET['customer'] ?? $defaultCustomer;

$payload = json_encode([
  'DealerCode' => $dealerCode,
  'CustomerCode' => $customerCode,
  'DeviceId' => null,
  'SerialNumber' => null,
  'AssetNumber' => null,
  'InitialFrom' => null,
  'InitialTo' => null,
  'ExhaustedFrom' => null,
  'ExhaustedTo' => null,
  'Brand' => null,
  'Model' => null,
  'OfficeDescription' => null,
  'SupplySetDescription' => null,
  'FilterCustomerText' => null,
  'ManageOption' => null,
  'InstallationOption' => null,
  'CancelOption' => null,
  'HiddenOption' => null,
  'SupplyType' => null,
  'ColorType' => null,
  'ExcludeForStockShippedSupplies' => false,
  'FilterText' => null,
  'PageNumber' => 1,
  'PageRows' => 50,
  'SortColumn' => 'InitialDate',
  'SortOrder' => 0
]);

// --- Perform API Call ---
$opts = [
  'http' => [
    'method' => 'POST',
    'header' => \"Content-Type: application/json\\r\\nAuthorization: Bearer $token\",
    'content' => $payload
  ]
];
$context = stream_context_create($opts);
$response = file_get_contents($apiBaseUrl . 'SupplyAlert/List', false, $context);

// --- Output JSON ---
header('Content-Type: application/json');
echo $response;"
}
,
{
    "path": "api/get_device_detail.php",
    "name": "get_device_detail.php",
    "directory": "api",
    "creation_date": "",
    "modification_date": "./api/get_device_detail.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006185 32006185 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./api/get_device_detail.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006185   Available: 32006185
Inodes: Total: 18446744073709551615 Free: -1
2494,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

header('Content-Type: application/json');

// Load .env manually
$envPath = realpath(__DIR__ . '/../.env');
if (!file_exists($envPath)) {
    echo json_encode(['success' => false, 'error' => 'Missing .env']);
    exit;
}

$lines = file($envPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
foreach ($lines as $line) {
    if (strpos(trim($line), '#') === 0) continue;
    [$key, $value] = explode('=', $line, 2);
    putenv(trim($key) . '=' . trim($value));
}

$id = $_GET['id'] ?? null;
if (!$id) {
    echo json_encode(['success' => false, 'error' => 'Missing device Id']);
    exit;
}

// Get token
$tokenUrl = getenv('TOKEN_URL');
$clientId = getenv('CLIENT_ID');
$clientSecret = getenv('CLIENT_SECRET');
$username = getenv('USERNAME');
$password = getenv('PASSWORD');
$scope = getenv('SCOPE');

$tokenPayload = http_build_query([
    'grant_type' => 'password',
    'client_id' => $clientId,
    'client_secret' => $clientSecret,
    'username' => $username,
    'password' => $password,
    'scope' => $scope,
]);

$tokenContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => \"Content-Type: application/x-www-form-urlencoded\",
        'content' => $tokenPayload,
    ]
]);

$tokenResponse = @file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
    echo json_encode(['success' => false, 'error' => 'Failed to authenticate']);
    exit;
}

// Fetch detailed device data
$apiBase = getenv('API_BASE_URL');
$detailPayload = json_encode([
    'Id' => $id
]);

$detailContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => \"Content-Type: application/json\\r\\nAuthorization: Bearer $token\",
        'content' => $detailPayload,
    ]
]);

$detailResponse = @file_get_contents($apiBase . 'Device/Get', false, $detailContext);
if ($detailResponse === false) {
    echo json_encode(['success' => false, 'error' => 'Failed to retrieve device detail']);
    exit;
}

$detailData = json_decode($detailResponse, true);
echo json_encode(['success' => true, 'data' => $detailData]);"
}
,
{
    "path": "api/get_token.php",
    "name": "get_token.php",
    "directory": "api",
    "creation_date": "",
    "modification_date": "./api/get_token.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006185 32006185 18446744073709551615 -1
2025-06-13 14:45:19",
    "size_bytes":   File: "./api/get_token.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006185   Available: 32006185
Inodes: Total: 18446744073709551615 Free: -1
1958,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode([\"error\" => \".env file not found\"]);
        exit;
    }

    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

header('Content-Type: application/json');

$env = load_env();

$required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
foreach ($required as $key) {
    if (empty($env[$key])) {
        echo json_encode([\"error\" => \"Missing $key in .env\"]);
        exit;
    }
}

$postFields = http_build_query([
    'grant_type'    => 'password',
    'client_id'     => $env['CLIENT_ID'],
    'client_secret' => $env['CLIENT_SECRET'],
    'username'      => $env['USERNAME'],
    'password'      => $env['PASSWORD'],
    'scope'         => $env['SCOPE']
]);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/x-www-form-urlencoded',
    'Accept: application/json'
]);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if (curl_errno($ch)) {
    echo json_encode([\"error\" => curl_error($ch)]);
    curl_close($ch);
    exit;
}

curl_close($ch);
http_response_code($httpCode);
echo $response;
?>"
}
,
{
    "path": "app_structure_20250616_101715.json",
    "name": "app_structure_20250616_101715.json",
    "directory": ".",
    "creation_date": "",
    "modification_date": "./app_structure_20250616_101715.json 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006184 32006184 18446744073709551615 -1
2025-06-16 10:17:27",
    "size_bytes":   File: "./app_structure_20250616_101715.json"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006184   Available: 32006184
Inodes: Total: 18446744073709551615 Free: -1
22354,
    "mime_type": "text/plain",
    "file_type": "Text",
    "content": "[
{
    \"path\": \".env\",
    \"name\": \".env\",
    \"directory\": \".\",
    \"creation_date\": \"\",
    \"modification_date\": \"./.env 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006175 32006175 18446744073709551615 -1
2025-06-13 14:39:52\",
    \"size_bytes\":   File: \"./.env\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006175   Available: 32006175
Inodes: Total: 18446744073709551615 Free: -1
797,
    \"mime_type\": \"text/plain\",
    \"file_type\": \"Text\",
    \"content\": \"# API Configuration
# These settings are used to connect to the MPS Monitor API and manage devices.
CLIENT_ID=9AT9j4UoU2BgLEqmiYCz
CLIENT_SECRET=9gTbAKBCZe1ftYQbLbq9
USERNAME=dashboard
PASSWORD=d@$hpa$$2024
SCOPE=account
TOKEN_URL=https://api.abassetmanagement.com/api3/token
API_BASE_URL=https://api.abassetmanagement.com/api3/
DEALER_CODE=NY06AGDWUQ
DEALER_ID=SZ13qRwU5GtFLj0i_CbEgQ2

# Debugging and Logging Configuration
DEBUG_MODE=true
DEBUG_PANEL_ENABLED=true
DEBUG_LOG_TO_FILE=true
MAX_DEBUG_LOG_SIZE_MB=5

LOG_INFO=true
LOG_WARNING=true
LOG_ERROR=true
LOG_DEBUG=true
LOG_SECURITY=true

# Database Configuration
TIMEZONE=America/New_York

# Application settings
APP_BASE_URL=https://mpsm.resolutionsbydesign.us/
APP_NAME=MPS Monitor Dashboard
APP_VERSION=0.1.2\"
}
,
{
    \"path\": \".github/workflows/deploy.yml\",
    \"name\": \"deploy.yml\",
    \"directory\": \".github/workflows\",
    \"creation_date\": \"\",
    \"modification_date\": \"./.github/workflows/deploy.yml 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006175 32006175 18446744073709551615 -1
2025-06-11 12:47:48\",
    \"size_bytes\":   File: \"./.github/workflows/deploy.yml\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006175   Available: 32006175
Inodes: Total: 18446744073709551615 Free: -1
1943,
    \"mime_type\": \"text/plain\",
    \"file_type\": \"Text\",
    \"content\": \"name: FTP Deploy - Final Lean

on:
  push:
    branches: [\\\"main\\\"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Generate Version File in Root
        # This command creates 'version.js' directly in the root of the checked-out repository.
        run: |
          echo \\\"window.appVersion = \\\\\\\"0.0.0.${{ github.run_number }}\\\\\\\";\\\" > version.js

      - name: 🚀 Deploy Website via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.0
        with:
          server: ftp.resolutionsbydesign.us
          username: mpsm@mpsm.resolutionsbydesign.us
          # IMPORTANT: Use a GitHub Secret for your password in a real-world scenario!
          # For this non-production example, it's hardcoded as per your instruction.
          password: Deploy123!
          protocol: ftp
          port: 21

          # Deploy everything from the root of the checked-out repository
          local-dir: ./
          # Deploy to the root directory of the FTP server
          server-dir: /

          # CAUTION: This will delete EVERYTHING on the server-dir before uploading!
          dangerous-clean-slate: true

          exclude: |
            .git/
            .github/ # Exclude GitHub Actions workflow files and their directories
            # Add any other files/directories you do NOT want to deploy from your repository root.
            # Example: node_modules/
            # Example: .env.development

          log-level: verbose

      - name: 📜 Deployment Completed Report
        run: |
          echo \\\"### DEPLOYMENT SUMMARY ###\\\"
          echo \\\"- Version: 0.0.0.${{ github.run_number }}\\\"
          echo \\\"- FTP Server: ftp.resolutionsbydesign.us\\\"
          echo \\\"- Server Directory: /\\\"
          echo \\\"- Local Directory: ./\\\"\"
}
,
{
    \"path\": \".htaccess\",
    \"name\": \".htaccess\",
    \"directory\": \".\",
    \"creation_date\": \"\",
    \"modification_date\": \"./.htaccess 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006191 32006191 18446744073709551615 -1
2025-06-16 09:54:59\",
    \"size_bytes\":   File: \"./.htaccess\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006191   Available: 32006191
Inodes: Total: 18446744073709551615 Free: -1
767,
    \"mime_type\": \"text/plain\",
    \"file_type\": \"Text\",
    \"content\": \"# Enable rewrite engine
RewriteEngine On

# Preserve HTTP Authorization headers (for APIs)
RewriteCond %{HTTP:Authorization} .
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

# Redirect HTTP to HTTPS (optional but recommended)
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Ensure index.php is used as default for root
DirectoryIndex index.php

# Allow access to .php files
<FilesMatch \\\"\\\\.php$\\\">
  Require all granted
</FilesMatch>

# If you want to allow direct access to /api/ files
<IfModule mod_dir.c>
  <IfModule mod_access_compat.c>
    <Directory \\\"/home/resolut7/public_html/mpsm.resolutionsbydesign.us/api\\\">
      Require all granted
    </Directory>
  </IfModule>
</IfModule>\"
}
,
{
    \"path\": \".vscode/settings.json\",
    \"name\": \"settings.json\",
    \"directory\": \".vscode\",
    \"creation_date\": \"\",
    \"modification_date\": \"./.vscode/settings.json 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006190 32006190 18446744073709551615 -1
2025-06-12 12:02:57\",
    \"size_bytes\":   File: \"./.vscode/settings.json\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006190   Available: 32006190
Inodes: Total: 18446744073709551615 Free: -1
43,
    \"mime_type\": \"application/json\",
    \"file_type\": \"Text\",
    \"content\": \"{
    \\\"markdown.validate.enabled\\\": true
}\"
}
,
{
    \"path\": \"api/get_customers.php\",
    \"name\": \"get_customers.php\",
    \"directory\": \"api\",
    \"creation_date\": \"\",
    \"modification_date\": \"./api/get_customers.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006189 32006189 18446744073709551615 -1
2025-06-13 15:04:16\",
    \"size_bytes\":   File: \"./api/get_customers.php\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006189   Available: 32006189
Inodes: Total: 18446744073709551615 Free: -1
3117,
    \"mime_type\": \"text/x-php\",
    \"file_type\": \"Text\",
    \"content\": \"<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode([\\\"error\\\" => \\\".env file not found\\\"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode([\\\"error\\\" => \\\"Missing $key in .env\\\"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode([\\\"error\\\" => \\\"Token request failed\\\", \\\"details\\\" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$api_url = rtrim($env['API_BASE_URL'], '/') . '/Customer/GetCustomers';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    \\\"Authorization: Bearer $token\\\",
    \\\"Content-Type: application/json\\\",
    \\\"Accept: application/json\\\"
]);

// No payload needed for this raw call
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode([
    'DealerCode'  => $env['DEALER_CODE'],
    'Code'        => null,
    'HasHpSds'    => null,
    'FilterText'  => null,
    'PageNumber'  => 1,
    'PageRows'    => 2147483647,
    'SortColumn'  => 'Id',
    'SortOrder'   => 0
]));



$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>\"
}
,
{
    \"path\": \"api/get_devices.php\",
    \"name\": \"get_devices.php\",
    \"directory\": \"api\",
    \"creation_date\": \"\",
    \"modification_date\": \"./api/get_devices.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006188 32006188 18446744073709551615 -1
2025-06-13 16:52:34\",
    \"size_bytes\":   File: \"./api/get_devices.php\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006188   Available: 32006188
Inodes: Total: 18446744073709551615 Free: -1
3311,
    \"mime_type\": \"text/x-php\",
    \"file_type\": \"Text\",
    \"content\": \"<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Load .env manually (no includes)
function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode([\\\"error\\\" => \\\".env file not found\\\"]);
        exit;
    }
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

function get_token($env) {
    $required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
    foreach ($required as $key) {
        if (empty($env[$key])) {
            echo json_encode([\\\"error\\\" => \\\"Missing $key in .env\\\"]);
            exit;
        }
    }

    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    if ($code !== 200 || !isset($json['access_token'])) {
        echo json_encode([\\\"error\\\" => \\\"Token request failed\\\", \\\"details\\\" => $json]);
        exit;
    }

    return $json['access_token'];
}

// Main logic
header('Content-Type: application/json');

$env = load_env();
$token = get_token($env);

$customerCode = $_GET['customer'] ?? null;

$payload = [
    'FilterDealerId'      => $env['DEALER_ID'],
    'FilterCustomerCodes' => [$customerCode],
    'ProductBrand'        => null,
    'ProductModel'        => null,
    'OfficeId'            => null,
    'Status'              => 1,
    'FilterText'          => null,
    'PageNumber'          => 1,
    'PageRows'            => 2147483647,
    'SortColumn'          => 'Id',
    'SortOrder'           => 0
];


$api_url = rtrim($env['API_BASE_URL'], '/') . '/Device/List';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $api_url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    \\\"Authorization: Bearer $token\\\",
    \\\"Content-Type: application/json\\\",
    \\\"Accept: application/json\\\"
]);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));

$response = curl_exec($ch);
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

http_response_code($code);
echo $response;
?>\"
}
,
{
    \"path\": \"api/get_device_alerts.php\",
    \"name\": \"get_device_alerts.php\",
    \"directory\": \"api\",
    \"creation_date\": \"\",
    \"modification_date\": \"./api/get_device_alerts.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006187 32006187 18446744073709551615 -1
2025-06-16 09:54:59\",
    \"size_bytes\":   File: \"./api/get_device_alerts.php\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006187   Available: 32006187
Inodes: Total: 18446744073709551615 Free: -1
2673,
    \"mime_type\": \"text/x-php\",
    \"file_type\": \"Text\",
    \"content\": \"<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

// Manual .env parsing
$env = parse_ini_file(__DIR__ . '/../.env');
$clientId = $env['CLIENT_ID'] ?? '';
$clientSecret = $env['CLIENT_SECRET'] ?? '';
$username = $env['USERNAME'] ?? '';
$password = $env['PASSWORD'] ?? '';
$scope = $env['SCOPE'] ?? '';
$tokenUrl = $env['TOKEN_URL'] ?? '';
$apiBaseUrl = rtrim($env['API_BASE_URL'] ?? '', '/') . '/';
$dealerCode = $env['DEALER_CODE'] ?? '';
$defaultCustomer = 'W9OPXL0YDK';

// --- Get Auth Token ---
$token = null;
$tokenPayload = http_build_query([
  'grant_type' => 'password',
  'client_id' => $clientId,
  'client_secret' => $clientSecret,
  'username' => $username,
  'password' => $password,
  'scope' => $scope,
]);

$tokenContext = stream_context_create([
  'http' => [
    'method' => 'POST',
    'header' => \\\"Content-Type: application/x-www-form-urlencoded\\\",
    'content' => $tokenPayload
  ]
]);

$tokenResponse = file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
  http_response_code(500);
  echo json_encode(['error' => 'Unable to retrieve access token']);
  exit;
}

// --- Prepare Payload ---
$customerCode = $_GET['customer'] ?? $defaultCustomer;

$payload = json_encode([
  'DealerCode' => $dealerCode,
  'CustomerCode' => $customerCode,
  'DeviceId' => null,
  'SerialNumber' => null,
  'AssetNumber' => null,
  'InitialFrom' => null,
  'InitialTo' => null,
  'ExhaustedFrom' => null,
  'ExhaustedTo' => null,
  'Brand' => null,
  'Model' => null,
  'OfficeDescription' => null,
  'SupplySetDescription' => null,
  'FilterCustomerText' => null,
  'ManageOption' => null,
  'InstallationOption' => null,
  'CancelOption' => null,
  'HiddenOption' => null,
  'SupplyType' => null,
  'ColorType' => null,
  'ExcludeForStockShippedSupplies' => false,
  'FilterText' => null,
  'PageNumber' => 1,
  'PageRows' => 50,
  'SortColumn' => 'InitialDate',
  'SortOrder' => 0
]);

// --- Perform API Call ---
$opts = [
  'http' => [
    'method' => 'POST',
    'header' => \\\"Content-Type: application/json\\\\r\\\\nAuthorization: Bearer $token\\\",
    'content' => $payload
  ]
];
$context = stream_context_create($opts);
$response = file_get_contents($apiBaseUrl . 'SupplyAlert/List', false, $context);

// --- Output JSON ---
header('Content-Type: application/json');
echo $response;\"
}
,
{
    \"path\": \"api/get_device_detail.php\",
    \"name\": \"get_device_detail.php\",
    \"directory\": \"api\",
    \"creation_date\": \"\",
    \"modification_date\": \"./api/get_device_detail.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006185 32006185 18446744073709551615 -1
2025-06-16 09:54:59\",
    \"size_bytes\":   File: \"./api/get_device_detail.php\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006185   Available: 32006185
Inodes: Total: 18446744073709551615 Free: -1
2494,
    \"mime_type\": \"text/x-php\",
    \"file_type\": \"Text\",
    \"content\": \"<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

header('Content-Type: application/json');

// Load .env manually
$envPath = realpath(__DIR__ . '/../.env');
if (!file_exists($envPath)) {
    echo json_encode(['success' => false, 'error' => 'Missing .env']);
    exit;
}

$lines = file($envPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
foreach ($lines as $line) {
    if (strpos(trim($line), '#') === 0) continue;
    [$key, $value] = explode('=', $line, 2);
    putenv(trim($key) . '=' . trim($value));
}

$id = $_GET['id'] ?? null;
if (!$id) {
    echo json_encode(['success' => false, 'error' => 'Missing device Id']);
    exit;
}

// Get token
$tokenUrl = getenv('TOKEN_URL');
$clientId = getenv('CLIENT_ID');
$clientSecret = getenv('CLIENT_SECRET');
$username = getenv('USERNAME');
$password = getenv('PASSWORD');
$scope = getenv('SCOPE');

$tokenPayload = http_build_query([
    'grant_type' => 'password',
    'client_id' => $clientId,
    'client_secret' => $clientSecret,
    'username' => $username,
    'password' => $password,
    'scope' => $scope,
]);

$tokenContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => \\\"Content-Type: application/x-www-form-urlencoded\\\",
        'content' => $tokenPayload,
    ]
]);

$tokenResponse = @file_get_contents($tokenUrl, false, $tokenContext);
$tokenData = json_decode($tokenResponse, true);
$token = $tokenData['access_token'] ?? null;

if (!$token) {
    echo json_encode(['success' => false, 'error' => 'Failed to authenticate']);
    exit;
}

// Fetch detailed device data
$apiBase = getenv('API_BASE_URL');
$detailPayload = json_encode([
    'Id' => $id
]);

$detailContext = stream_context_create([
    'http' => [
        'method'  => 'POST',
        'header'  => \\\"Content-Type: application/json\\\\r\\\\nAuthorization: Bearer $token\\\",
        'content' => $detailPayload,
    ]
]);

$detailResponse = @file_get_contents($apiBase . 'Device/Get', false, $detailContext);
if ($detailResponse === false) {
    echo json_encode(['success' => false, 'error' => 'Failed to retrieve device detail']);
    exit;
}

$detailData = json_decode($detailResponse, true);
echo json_encode(['success' => true, 'data' => $detailData]);\"
}
,
{
    \"path\": \"api/get_token.php\",
    \"name\": \"get_token.php\",
    \"directory\": \"api\",
    \"creation_date\": \"\",
    \"modification_date\": \"./api/get_token.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006185 32006185 18446744073709551615 -1
2025-06-13 14:45:19\",
    \"size_bytes\":   File: \"./api/get_token.php\"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006185   Available: 32006185
Inodes: Total: 18446744073709551615 Free: -1
1958,
    \"mime_type\": \"text/x-php\",
    \"file_type\": \"Text\",
    \"content\": \"<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) {
        http_response_code(500);
        echo json_encode([\\\"error\\\" => \\\".env file not found\\\"]);
        exit;
    }

    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

header('Content-Type: application/json');

$env = load_env();

$required = ['CLIENT_ID', 'CLIENT_SECRET', 'USERNAME', 'PASSWORD', 'SCOPE', 'TOKEN_URL'];
foreach ($required as $key) {
    if (empty($env[$key])) {
        echo json_encode([\\\"error\\\" => \\\"Missing $key in .env\\\"]);
        exit;
    }
}

$postFields = http_build_query([
    'grant_type'    => 'password',
    'client_id'     => $env['CLIENT_ID'],
    'client_secret' => $env['CLIENT_SECRET'],
    'username'      => $env['USERNAME'],
    'password'      => $env['PASSWORD'],
    'scope'         => $env['SCOPE']
]);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/x-www-form-urlencoded',
    'Accept: application/json'
]);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if (curl_errno($ch)) {
    echo json_encode([\\\"error\\\" => curl_error($ch)]);
    curl_close($ch);
    exit;
}

curl_close($ch);
http_response_code($httpCode);
echo $response;
?>\"
}"
}
,
{
    "path": "cards/printer-errors-card.php",
    "name": "printer-errors-card.php",
    "directory": "cards",
    "creation_date": "",
    "modification_date": "./cards/printer-errors-card.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006178 32006178 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./cards/printer-errors-card.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006178   Available: 32006178
Inodes: Total: 18446744073709551615 Free: -1
3232,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/../includes/config.php';

$customerCode = $_GET['customer'] ?? 'W9OPXL0YDK';
$apiUrl = APP_BASE_URL . \"api/get_devices.php?customer=\" . urlencode($customerCode);
$response = @file_get_contents($apiUrl);
$data = json_decode($response, true);

if (!isset($data['Result']) || !is_array($data['Result'])) {
    echo \"<div class='device-card error'>Unable to fetch device list.</div>\";
    return;
}

$devices = array_filter($data['Result'], function($device) {
    return isset($device['Errors']) && is_array($device['Errors']) && count($device['Errors']) > 0;
});

usort($devices, function ($a, $b) {
    return strcmp($a['ExternalIdentifier'] ?? '', $b['ExternalIdentifier'] ?? '');
});

$columns = ['ExternalIdentifier', 'IpAddress', 'Model', 'Errors'];
?>

<div class=\"device-card\"
     data-card-id=\"printer_errors_card\"
     data-dashboard=\"<?= htmlspecialchars($_GET['dashboard'] ?? 'default') ?>\"
     data-customer-code=\"<?= htmlspecialchars($customerCode) ?>\">

  <div class=\"card-header compact-header\">
    <h3>Devices With Alerts (<?= count($devices) ?>)</h3>
  </div>

  <?php if (empty($devices)): ?>
    <p>No active alerts or device errors found for this customer.</p>
  <?php else: ?>
    <div class=\"device-table-container\">
      <table class=\"device-table\">
        <thead>
          <tr>
            <?php foreach ($columns as $col): ?>
              <th><?= htmlspecialchars($col) ?></th>
            <?php endforeach; ?>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($devices as $device): ?>
            <tr>
              <td><?= htmlspecialchars($device['ExternalIdentifier'] ?? '-') ?></td>
              <td><?= htmlspecialchars($device['IpAddress'] ?? '-') ?></td>
              <td><?= htmlspecialchars($device['Model'] ?? '-') ?></td>
              <td>
                <?php
                  if (!empty($device['Errors']) && is_array($device['Errors'])) {
                      foreach ($device['Errors'] as $err) {
                          echo \"<div class='error-chip'>\" . htmlspecialchars($err['Description'] ?? 'Unknown') . \"</div>\";
                      }
                  } else {
                      echo \"-\";
                  }
                ?>
              </td>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table>
    </div>
  <?php endif; ?>
</div>

<style>
.device-card h3 {
  font-size: 1.1rem;
  margin: 0 0 0.5rem 0;
}

.error-chip {
  display: inline-block;
  background: rgba(255, 80, 80, 0.15);
  color: #ff8080;
  font-size: 0.75rem;
  padding: 0.2rem 0.5rem;
  margin: 0.1rem;
  border-radius: 0.3rem;
  border: 1px solid rgba(255, 80, 80, 0.3);
}

.device-table th,
.device-table td {
  padding: 0.4rem 0.6rem;
  font-size: 0.85rem;
  border-bottom: 1px solid rgba(255,255,255,0.05);
}

.device-table th {
  background: rgba(255,255,255,0.05);
}
</style>"
}
,
{
    "path": "cards/printer_card.php",
    "name": "printer_card.php",
    "directory": "cards",
    "creation_date": "",
    "modification_date": "./cards/printer_card.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006177 32006177 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./cards/printer_card.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006177   Available: 32006177
Inodes: Total: 18446744073709551615 Free: -1
7859,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/../includes/config.php';

$customerCode = $_GET['customer'] ?? 'W9OPXL0YDK';
$currentPage = max(1, intval($_GET['page'] ?? 1));
$perPage = 15;

$apiUrl = APP_BASE_URL . \"api/get_devices.php?customer=\" . urlencode($customerCode);
$response = @file_get_contents($apiUrl);
$data = json_decode($response, true);

if (!isset($data['Result']) || !is_array($data['Result'])) {
    echo \"<div class='device-card error'>Unable to fetch device list.</div>\";
    return;
}

$devices = $data['Result'];
$totalDevices = count($devices);
$totalPages = ceil($totalDevices / $perPage);
$offset = ($currentPage - 1) * $perPage;
$paginatedDevices = array_slice($devices, $offset, $perPage);

$columns = ['ExternalIdentifier', 'Department', 'IpAddress', 'SerialNumber'];
?>

<div class=\"device-card\"
     data-card-id=\"printer_card\"
     data-dashboard=\"<?= htmlspecialchars($_GET['dashboard'] ?? 'default') ?>\"
     data-customer-code=\"<?= htmlspecialchars($customerCode) ?>\">

  <div class=\"card-header compact-header\">
    <input type=\"text\" id=\"device-search\" placeholder=\"Search devices...\" class=\"search-box\" />
  </div>

  <?php if (empty($paginatedDevices)): ?>
    <p>No devices found for this page.</p>
  <?php else: ?>
    <div class=\"device-table-container\">
      <table class=\"device-table\" id=\"device-table\">
        <thead>
          <tr>
            <?php foreach ($columns as $key): ?>
              <th><?= htmlspecialchars($key) ?></th>
            <?php endforeach; ?>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($paginatedDevices as $device): ?>
            <tr class=\"device-row\">
              <?php foreach ($columns as $key): ?>
                <?php if ($key === 'ExternalIdentifier'): ?>
                  <td>
                    <?= htmlspecialchars($device[$key] ?? '') ?>
                    <?php if (!empty($device['Id'])): ?>
                      <button class=\"drilldown-btn\" data-device-id=\"<?= htmlspecialchars($device['Id']) ?>\" title=\"View Details\">
                        <span class=\"icon\">🔍</span>
                      </button>
                    <?php endif; ?>
                  </td>
                <?php else: ?>
                  <td><?= htmlspecialchars($device[$key] ?? '') ?></td>
                <?php endif; ?>
              <?php endforeach; ?>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table>
    </div>

    <div class=\"pagination-nav\">
      <?php if ($currentPage > 1): ?>
        <a href=\"?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage - 1 ?>\" class=\"page-link\">← Prev</a>
      <?php endif; ?>
      <span>Page <?= $currentPage ?> of <?= $totalPages ?></span>
      <?php if ($currentPage < $totalPages): ?>
        <a href=\"?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage + 1 ?>\" class=\"page-link\">Next →</a>
      <?php endif; ?>
    </div>
  <?php endif; ?>
</div>

<!-- Modal -->
<div id=\"device-detail-modal\" class=\"modal hidden\">
  <div class=\"modal-content\">
    <button class=\"modal-close\" onclick=\"hideModal()\">×</button>
    <div id=\"modal-body\">Loading device details...</div>
  </div>
</div>

<style>
.card-header.compact-header {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 0.5rem 1rem;
  margin-bottom: 0.5rem;
}
.search-box {
  padding: 0.3rem 0.8rem;
  border-radius: 0.4rem;
  border: 1px solid rgba(255, 255, 255, 0.15);
  background: rgba(255, 255, 255, 0.08);
  color: white;
  font-size: 0.9rem;
  min-width: 250px;
}

.device-table-container {
  overflow-x: auto;
  border-radius: 1rem;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(8px);
  padding: 1rem;
}

.device-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.85rem;
  color: inherit;
}

.device-table th,
.device-table td {
  padding: 0.4rem 0.6rem;
  text-align: left;
  border-bottom: 1px solid rgba(255, 255, 255, 0.08);
  white-space: nowrap;
}

.device-table thead {
  background: rgba(255, 255, 255, 0.08);
  font-weight: bold;
}

.drilldown-btn {
  background: none;
  border: none;
  padding: 0;
  margin-left: 0.4rem;
  cursor: pointer;
  vertical-align: middle;
}
.drilldown-btn .icon {
  font-size: 0.75rem;
  line-height: 1;
  display: inline-block;
  transform: translateY(1px);
}

.pagination-nav {
  margin-top: 1rem;
  text-align: center;
}
.page-link {
  display: inline-block;
  padding: 0.4rem 0.8rem;
  margin: 0 0.2rem;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 0.4rem;
  color: white;
  text-decoration: none;
  transition: background 0.3s, transform 0.2s;
}
.page-link:hover {
  background: rgba(255, 255, 255, 0.15);
  transform: scale(1.05);
}

.modal {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  backdrop-filter: blur(6px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}
.modal.hidden { display: none; }
.modal-content {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  padding: 1.5rem;
  border-radius: 1rem;
  max-width: 90%;
  max-height: 80vh;
  overflow: auto;
  backdrop-filter: blur(10px);
}
.modal-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  font-size: 1.5rem;
  background: none;
  color: white;
  border: none;
  cursor: pointer;
}
</style>

<script>
function showModal(content) {
  document.getElementById('modal-body').innerHTML = content;
  document.getElementById('device-detail-modal').classList.remove('hidden');
}
function hideModal() {
  document.getElementById('device-detail-modal').classList.add('hidden');
}

// Drilldown binding
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.drilldown-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const id = btn.getAttribute('data-device-id');
      if (!id) return;
      showModal('Loading device details...');
      try {
        const res = await fetch(`api/get_device_detail.php?id=${encodeURIComponent(id)}`);
        const json = await res.json();
        if (json.success && json.data?.Result) {
          const detail = json.data.Result;
          let output = '<table>';
          for (const [key, val] of Object.entries(detail)) {
            const cleaned = (typeof val === 'string' ? val.trim() : val);
            if (
              cleaned === null ||
              cleaned === '' ||
              cleaned === '0' ||
              cleaned === 0 ||
              cleaned === 'DEFAULT' ||
              (Array.isArray(val))
            ) continue;
            output += `<tr><td><strong>${key}</strong></td><td>${cleaned}</td></tr>`;
          }
          output += '</table>';
          showModal(output);
        } else {
          showModal('No device detail found.');
        }
      } catch (e) {
        showModal('Error loading detail.');
      }
    });
  });

  // Filter table by any text
  const searchBox = document.getElementById('device-search');
  if (searchBox) {
    searchBox.addEventListener('input', () => {
      const term = searchBox.value.toLowerCase();
      const rows = document.querySelectorAll('.device-row');
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(term) ? '' : 'none';
      });
    });
  }
});
</script>"
}
,
{
    "path": "cards/supply-alerts-card.php",
    "name": "supply-alerts-card.php",
    "directory": "cards",
    "creation_date": "",
    "modification_date": "./cards/supply-alerts-card.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006175 32006175 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./cards/supply-alerts-card.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006175   Available: 32006175
Inodes: Total: 18446744073709551615 Free: -1
4556,
    "mime_type": "text/x-php",
    "file_type": "Text",
    "content": "<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/../includes/config.php';

$customerCode = $_GET['customer'] ?? 'W9OPXL0YDK';
$pageRows = 15;

// Step 1: Get device alerts
$alertsUrl = APP_BASE_URL . \"api/get_device_alerts.php?customer=\" . urlencode($customerCode);
$alertsJson = @file_get_contents($alertsUrl);
$alertsData = json_decode($alertsJson, true);
$alerts = $alertsData['Result'] ?? [];

// Step 2: Get devices for ExternalIdentifier mapping
$devicesUrl = APP_BASE_URL . \"api/get_devices.php?customer=\" . urlencode($customerCode);
$devicesJson = @file_get_contents($devicesUrl);
$deviceData = json_decode($devicesJson, true);
$deviceList = $deviceData['Result'] ?? [];

$deviceMap = [];
foreach ($deviceList as $dev) {
    if (!empty($dev['Id']) && !empty($dev['ExternalIdentifier'])) {
        $deviceMap[$dev['Id']] = $dev['ExternalIdentifier'];
    }
}

// Step 3: Consolidate alerts by DeviceId
$grouped = [];
foreach ($alerts as $alert) {
    $id = $alert['DeviceId'];
    if (!isset($grouped[$id])) {
        $grouped[$id] = [
            'DeviceId' => $id,
            'ExternalIdentifier' => $deviceMap[$id] ?? '—',
            'Department' => $alert['Department'] ?? '-',
            'Warnings' => [],
            'Consumables' => [],
        ];
    }
    if (!empty($alert['Warning'])) {
        $grouped[$id]['Warnings'][] = $alert['Warning'];
    }
    if (!empty($alert['SuggestedConsumable'])) {
        $grouped[$id]['Consumables'][] = $alert['SuggestedConsumable'];
    }
}

// Apply pagination after grouping
$currentPage = isset($_GET['page']) ? max(1, intval($_GET['page'])) : 1;
$totalDevices = count($grouped);
$totalPages = ceil($totalDevices / $pageRows);
$offset = ($currentPage - 1) * $pageRows;
$grouped = array_slice($grouped, $offset, $pageRows);
?>

<div class=\"device-card\"
     data-card-id=\"supply_alerts_card\"
     data-dashboard=\"<?= htmlspecialchars($_GET['dashboard'] ?? 'default') ?>\"
     data-customer-code=\"<?= htmlspecialchars($customerCode) ?>\">

  <div class=\"card-header compact-header\">
    <h3>Device Alerts (<?= count($grouped) ?>)</h3>
  </div>

  <?php if (empty($grouped)): ?>
    <p>No active supply alerts found for this customer.</p>
  <?php else: ?>
    <div class=\"device-table-container\">
      <table class=\"device-table\">
        <thead>
          <tr>
            <th></th>
            <th>Equipment ID</th>
            <th>Department</th>
            <th>Warning</th>
            <th>Suggested Consumable</th>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($grouped as $row): ?>
            <tr>
              <td>
                <button class=\"drilldown-btn\" data-device-id=\"<?= htmlspecialchars($row['DeviceId']) ?>\" title=\"View Details\">
                  🔍
                </button>
              </td>
              <td><?= htmlspecialchars($row['ExternalIdentifier']) ?></td>
              <td><?= htmlspecialchars($row['Department']) ?></td>
              <td><?= htmlspecialchars(implode(', ', array_unique($row['Warnings']))) ?></td>
              <td><?= htmlspecialchars(implode(', ', array_unique($row['Consumables']))) ?></td>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table></table>

<div class=\"pagination\">
  <?php if ($currentPage > 1): ?>
    <a href=\"?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage - 1 ?>\" class=\"page-btn\">← Prev</a>
  <?php endif; ?>

  <span class=\"page-label\">Page <?= $currentPage ?> of <?= $totalPages ?></span>

  <?php if ($currentPage < $totalPages): ?>
    <a href=\"?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage + 1 ?>\" class=\"page-btn\">Next →</a>
  <?php endif; ?>
</div>

    </div>
  <?php endif; ?>
</div>

<style>
.device-table th,
.device-table td {
  padding: 0.4rem 0.6rem;
  font-size: 0.85rem;
  border-bottom: 1px solid rgba(255,255,255,0.05);
}

.device-table th {
  background: rgba(255,255,255,0.05);
}

.drilldown-btn {
  background: none;
  border: none;
  padding: 0;
  margin-left: 0.4rem;
  cursor: pointer;
  vertical-align: middle;
}
.drilldown-btn .icon {
  font-size: 0.75rem;
  line-height: 1;
  display: inline-block;
  transform: translateY(1px);
}
</style>"
}
,
{
    "path": "collectdata.sh",
    "name": "collectdata.sh",
    "directory": ".",
    "creation_date": "",
    "modification_date": "./collectdata.sh 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006174 32006174 18446744073709551615 -1
2025-06-11 08:22:20",
    "size_bytes":   File: "./collectdata.sh"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006174   Available: 32006174
Inodes: Total: 18446744073709551615 Free: -1
5860,
    "mime_type": "text/x-shellscript",
    "file_type": "Text",
    "content": "#!/bin/bash

# Combined Web Application Code Collector
# Outputs both JSON structure and readable text content

# Configuration
JSON_OUTPUT=\"app_structure_$(date +'%Y%m%d_%H%M%S').json\"
TEXT_OUTPUT=\"app_contents_$(date +'%Y%m%d_%H%M%S').txt\"

# Files to include full content for
FULL_EXTENSIONS=(\"php\" \"html\" \"htm\" \"css\" \"js\" \"json\" \"xml\" \"md\" \"txt\" \"env\" \"gitignore\" \"htaccess\" \"sh\")
MAX_PREVIEW_SIZE=5000  # 5KB previews for other text files

# Directories to exclude
EXCLUDE_DIRS=(\"vendor\" \"node_modules\" \".git\" \".idea\" \"build\" \"dist\" \"cache\" \"logs\")

# Binary extensions to skip content for
EXCLUDE_EXT=(\"png\" \"jpg\" \"jpeg\" \"gif\" \"svg\" \"ico\" \"woff\" \"woff2\" \"ttf\" \"eot\" \"pdf\" \"zip\" \"tar.gz\" \"mp3\" \"mp4\" \"avi\" \"mov\")

# Helper functions
escape_json() {
    sed 's/\\\\/\\\\\\\\/g; s/\"/\\\\\"/g; s/\\t/\\\\t/g; s/\\r/\\\\r/g; s/\\n/\\\\n/g'
}

is_text_file() {
    file -b --mime-encoding \"$1\" | grep -qvi 'binary'
}

should_exclude() {
    local file=\"$1\"
    
    # Check excluded directories
    for dir in \"${EXCLUDE_DIRS[@]}\"; do
        if [[ \"$file\" == *\"/$dir/\"* ]]; then
            return 0
        fi
    done
    
    # Check excluded extensions
    local extension=\"${file##*.}\"
    for ext in \"${EXCLUDE_EXT[@]}\"; do
        if [[ \"${extension,,}\" == \"${ext,,}\" ]]; then
            return 0
        fi
    done
    
    return 1
}

# Generate JSON structure
echo \"Generating JSON structure...\"
echo \"[\" > \"$JSON_OUTPUT\"
first_entry=true

find . -type f -print0 | while IFS= read -r -d '' file; do
    if should_exclude \"$file\"; then
        continue
    fi

    FILE_SIZE=$(stat -f '%z' \"$file\" 2>/dev/null || stat -c '%s' \"$file\")

    CREATION_DATE=$(stat -f '%B' \"$file\" 2>/dev/null || stat -c '%W' \"$file\" 2>/dev/null)
    if [[ \"$CREATION_DATE\" -le 0 || -z \"$CREATION_DATE\" ]]; then
        CREATION_DATE=\"N/A\"
    else
        CREATION_DATE=$(date -r \"$CREATION_DATE\" '+%Y-%m-%dT%H:%M:%S' 2>/dev/null || date -d @\"$CREATION_DATE\" '+%Y-%m-%dT%H:%M:%S')
    fi

    MOD_DATE=$(stat -f '%Sm' -t '%Y-%m-%dT%H:%M:%S' \"$file\" 2>/dev/null || stat -c '%y' \"$file\" | cut -d'.' -f1)

    MIME_TYPE=$(file --mime-type -b \"$file\")
    FILE_TYPE=$(echo \"$MIME_TYPE\" | grep -qi 'text\\|json\\|xml\\|script' && echo \"Text\" || echo \"Binary\")

    EXT=\"${file##*.}\"
    INCLUDE_FULL=false
    for ext in \"${FULL_EXTENSIONS[@]}\"; do
        if [[ \"${EXT,,}\" == \"$ext\" ]]; then
            INCLUDE_FULL=true
            break
        fi
    done

    CONTENT=\"\"
    if [[ \"$FILE_TYPE\" == \"Text\" ]]; then
        if [[ \"$INCLUDE_FULL\" == true ]]; then
            CONTENT=$(cat \"$file\" | escape_json)
        else
            CONTENT=$(head -c $MAX_PREVIEW_SIZE \"$file\" | escape_json)
        fi
    else
        CONTENT=\"[Binary file - content skipped]\"
    fi

    if [[ \"$first_entry\" == false ]]; then
        echo \",\" >> \"$JSON_OUTPUT\"
    else
        first_entry=false
    fi

    cat <<EOF >> \"$JSON_OUTPUT\"
{
    \"path\": \"$(echo \"${file#./}\" | escape_json)\",
    \"name\": \"$(basename \"$file\" | escape_json)\",
    \"directory\": \"$(dirname \"${file#./}\" | escape_json)\",
    \"creation_date\": \"$CREATION_DATE\",
    \"modification_date\": \"$MOD_DATE\",
    \"size_bytes\": $FILE_SIZE,
    \"mime_type\": \"$MIME_TYPE\",
    \"file_type\": \"$FILE_TYPE\",
    \"content\": \"$CONTENT\"
}
EOF
done

echo \"]\" >> \"$JSON_OUTPUT\"

# Generate readable text output
echo \"Generating readable text output...\"
{
    echo \"WEB APPLICATION CONTENT COLLECTION\"
    echo \"Generated: $(date)\"
    echo \"----------------------------------------\"
    echo \"\"
    
    find . -type f | while read -r file; do
        if should_exclude \"$file\"; then
            continue
        fi
        
        EXT=\"${file##*.}\"
        
        # Special handling for important files
        if [[ \"${EXT,,}\" == \"php\" ]]; then
            echo \"==== PHP FILE: $file ====\"
            echo \"Size: $(stat -c%s \"$file\") bytes\"
            echo \"Last Modified: $(date -r \"$file\")\"
            echo \"----------------------------------------\"
            cat \"$file\"
            echo -e \"\\n\\n\"
            continue
        fi
        
        if [[ \"${EXT,,}\" == \"js\" || \"${EXT,,}\" == \"css\" || \"${EXT,,}\" == \"html\" || \"${EXT,,}\" == \"htm\" ]]; then
            echo \"==== ${EXT^^} FILE: $file ====\"
            echo \"Size: $(stat -c%s \"$file\") bytes\"
            echo \"Last Modified: $(date -r \"$file\")\"
            echo \"----------------------------------------\"
            cat \"$file\"
            echo -e \"\\n\\n\"
            continue
        fi
        
        if [[ \"${EXT,,}\" == \"env\" || \"${EXT,,}\" == \"gitignore\" || \"${EXT,,}\" == \"htaccess\" ]]; then
            echo \"==== CONFIG FILE: $file ====\"
            echo \"Size: $(stat -c%s \"$file\") bytes\"
            echo \"Last Modified: $(date -r \"$file\")\"
            echo \"----------------------------------------\"
            cat \"$file\"
            echo -e \"\\n\\n\"
            continue
        fi
        
        # For other files, check if they're text
        if is_text_file \"$file\"; then
            echo \"==== TEXT FILE: $file ====\"
            echo \"Size: $(stat -c%s \"$file\") bytes\"
            echo \"Last Modified: $(date -r \"$file\")\"
            echo \"----------------------------------------\"
            head -c 100000 \"$file\"  # Show first 100KB
            echo -e \"\\n\\n\"
        else
            echo \"==== BINARY FILE: $file ====\"
            echo \"Size: $(stat -c%s \"$file\") bytes\"
            echo \"Last Modified: $(date -r \"$file\")\"
            echo \"[Binary content not displayed]\"
            echo -e \"\\n\"
        fi
    done
} > \"$TEXT_OUTPUT\"

echo \"Collection complete!\"
echo \"1. JSON structure saved to: $JSON_OUTPUT\"
echo \"2. Readable text content saved to: $TEXT_OUTPUT\""
}
,
{
    "path": "components/drilldown-modal.php",
    "name": "drilldown-modal.php",
    "directory": "components",
    "creation_date": "",
    "modification_date": "./components/drilldown-modal.php 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006172 32006172 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./components/drilldown-modal.php"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006172   Available: 32006172
Inodes: Total: 18446744073709551615 Free: -1
1979,
    "mime_type": "text/html",
    "file_type": "Text",
    "content": "<!-- /components/drilldown-modal.php -->
<div id=\"drilldown-modal\" class=\"modal hidden\">
  <div class=\"modal-content\">
    <button class=\"modal-close\" onclick=\"hideDrilldown()\">×</button>
    <h3>Device Detail</h3>
    <pre id=\"drilldown-content\">Loading...</pre>
  </div>
</div>

<style>
.modal {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  backdrop-filter: blur(8px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
}
.modal.hidden {
  display: none;
}
.modal-content {
  background: rgba(255,255,255,0.1);
  backdrop-filter: blur(10px);
  border-radius: 1rem;
  padding: 1.5rem;
  max-width: 700px;
  width: 90%;
  color: #fff;
  border: 1px solid rgba(255,255,255,0.2);
}
.modal-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  font-size: 1.5rem;
  color: white;
  cursor: pointer;
}
</style>

<script>
function hideDrilldown() {
  document.getElementById('drilldown-modal').classList.add('hidden');
}

document.addEventListener('click', function (e) {
  if (e.target.closest('.drilldown-btn')) {
    const id = e.target.closest('.drilldown-btn').dataset.deviceId;
    fetch(`/api/get_device_detail.php?id=${id}`)
      .then(res => res.json())
      .then(data => {
        const cleaned = Object.entries(data.Result || {})
          .filter(([_, v]) => v && v !== \"0\" && v !== \"DEFAULT\" && v !== \"[]\" && v !== \"\")
          .map(([k, v]) => `${k}: ${v}`)
          .join(\"\\\\n\");

        document.getElementById('drilldown-content').textContent = cleaned || \"No details available.\";
        document.getElementById('drilldown-modal').classList.remove('hidden');
      })
      .catch(() => {
        document.getElementById('drilldown-content').textContent = \"Error loading device details.\";
        document.getElementById('drilldown-modal').classList.remove('hidden');
      });
  }
});
</script>"
}
,
{
    "path": "documentation/Ai_Instructions_README.md",
    "name": "Ai_Instructions_README.md",
    "directory": "documentation",
    "creation_date": "",
    "modification_date": "./documentation/Ai_Instructions_README.md 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006172 32006172 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./documentation/Ai_Instructions_README.md"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006172   Available: 32006172
Inodes: Total: 18446744073709551615 Free: -1
23693,
    "mime_type": "text/plain",
    "file_type": "Text",
    "content": "# AI AUDIT INSTRUCTIONS

## HOW TO PERFORM THE AUDIT
#### Perform linted and smoke-test on asset references
- In all files, scan for any references to external libraries or classes (e.g. Dotenv\\Dotenv) that aren’t actually installed, and either remove them or wrap them in class_exists()/file_exists() guards.
- Scan all files for any constants they reference and ensure each is defined in config.php, or flag missing ones.
- When auditing, grep all PHP view and include files for bare constant names (e.g. anything matching /[A-Z_]{2,}/) and ensure each one is defined in config.php. Flag any missing constants.
- Identify and flag any instances of redundant code or unnecessary operations, such as redundant sanitization on internally generated strings or minor logical inefficiencies, even if they do not cause functional errors or security vulnerabilities.
- When proposing any changes that involve file system operations (creating new files, deleting files, moving or renaming existing files, or updating existing files), explicitly list all such operations at the beginning of the response. For each new file, provide its exact relative path. Clearly distinguish between new files and modifications to existing ones. Consolidate these file system instructions before presenting the corresponding code blocks.
- 
### Step 1: Repository Structure Analysis
- Examine the overall project structure and organization
- Identify main application entry points and core modules
- Map out the data flow between components, identify orphaned components

### Step 2: Code Quality Review
- Identify code duplication and opportunities for refactoring
- Check for proper error handling and exception management
- Assess variable naming conventions and code readability
- Check for dead code and unused imports/dependencies
- Evaluate function and class complexity
- Review commenting and documentation quality

### Step 3: Architecture Review
- Evaluate component separation and modularity
- Check for proper separation of concerns
- Assess dependency injection and coupling
- Review API design and REST compliance
- Examine database schema design and normalization
- Check for proper configuration management

### Step 4: Testing Coverage
- Identify areas lacking unit tests
- Check for integration test coverage
- Look for edge cases that aren't tested
- Assess test quality and maintainability
- Check for proper mocking and test isolation

### Code Quality Issues
- **Code Duplication**: Repeated logic that should be extracted
- **Long Functions**: Methods exceeding 50 lines that need breaking down
- **Deep Nesting**: Excessive if/else or loop nesting levels
- **Magic Numbers**: Hardcoded values that should be constants
- **Poor Naming**: Unclear variable, function, or class names
- **Missing Error Handling**: Functions without try-catch or error checks
- **Inconsistent Formatting**: Mixed indentation, spacing, or style
- **Commented Code**: Dead code left in comments
- **TODO Comments**: Unfinished work or technical debt markers
- **Complex Conditionals**: Boolean logic that could be simplified

### Architecture Concerns
- **Tight Coupling**: Components too dependent on each other
- **Missing Abstractions**: Repeated patterns without interfaces
- **Monolithic Structure**: Large files or classes doing too much
- **Circular Dependencies**: Components referencing each other
- **Configuration Issues**: Hardcoded environment-specific values
- **API Design Flaws**: Non-RESTful endpoints, inconsistent responses
- **Database Design Issues**: Denormalization, missing foreign keys
- **Scalability Bottlenecks**: Single points of failure or contention
- **Missing Logging**: Insufficient debugging and monitoring
- **Poor Error Propagation**: Errors not properly bubbled up

## AUDIT REPORT FORMAT

### Findings Structure
Present each finding as a numbered item with:
Here are the refactored files again:
Ai_Instructions.md
Markdown

# AI AUDIT INSTRUCTIONS

## HOW TO PERFORM THE AUDIT
#### Perform linted and smoke-test on asset references
- In all files, scan for any references to external libraries or classes (e.g. Dotenv\\Dotenv) that aren’t actually installed, and either remove them or wrap them in class_exists()/file_exists() guards.
- Scan all files for any constants they reference and ensure each is defined in config.php, or flag missing ones.
- When auditing, grep all PHP view and include files for bare constant names (e.g. anything matching /[A-Z_]{2,}/) and ensure each one is defined in config.php. Flag any missing constants.
- Identify and flag any instances of redundant code or unnecessary operations, such as redundant sanitization on internally generated strings or minor logical inefficiencies, even if they do not cause functional errors or security vulnerabilities.
- When proposing any changes that involve file system operations (creating new files, deleting files, moving or renaming existing files, or updating existing files), explicitly list all such operations at the beginning of the response. For each new file, provide its exact relative path. Clearly distinguish between new files and modifications to existing ones. Consolidate these file system instructions before presenting the corresponding code blocks.
- 
### Step 1: Repository Structure Analysis
- Examine the overall project structure and organization
- Identify main application entry points and core modules
- Map out the data flow between components, identify orphaned components

### Step 2: Code Quality Review
- Identify code duplication and opportunities for refactoring
- Check for proper error handling and exception management
- Assess variable naming conventions and code readability
- Check for dead code and unused imports/dependencies
- Evaluate function and class complexity
- Review commenting and documentation quality

### Step 3: Architecture Review
- Evaluate component separation and modularity
- Check for proper separation of concerns
- Assess dependency injection and coupling
- Review API design and REST compliance
- Examine database schema design and normalization
- Check for proper configuration management

### Step 4: Testing Coverage
- Identify areas lacking unit tests
- Check for integration test coverage
- Look for edge cases that aren't tested
- Assess test quality and maintainability
- Check for proper mocking and test isolation

### Code Quality Issues
- **Code Duplication**: Repeated logic that should be extracted
- **Long Functions**: Methods exceeding 50 lines that need breaking down
- **Deep Nesting**: Excessive if/else or loop nesting levels
- **Magic Numbers**: Hardcoded values that should be constants
- **Poor Naming**: Unclear variable, function, or class names
- **Missing Error Handling**: Functions without try-catch or error checks
- **Inconsistent Formatting**: Mixed indentation, spacing, or style
- **Commented Code**: Dead code left in comments
- **TODO Comments**: Unfinished work or technical debt markers
- **Complex Conditionals**: Boolean logic that could be simplified

### Architecture Concerns
- **Tight Coupling**: Components too dependent on each other
- **Missing Abstractions**: Repeated patterns without interfaces
- **Monolithic Structure**: Large files or classes doing too much
- **Circular Dependencies**: Components referencing each other
- **Configuration Issues**: Hardcoded environment-specific values
- **API Design Flaws**: Non-RESTful endpoints, inconsistent responses
- **Database Design Issues**: Denormalization, missing foreign keys
- **Scalability Bottlenecks**: Single points of failure or contention
- **Missing Logging**: Insufficient debugging and monitoring
- **Poor Error Propagation**: Errors not properly bubbled up

## AUDIT REPORT FORMAT

### Findings Structure
Present each finding as a numbered item with:

FINDINGS
Security Issues

    Hardcoded API Key in config.php (CRITICAL)
        File: config/api.php line 15
        Issue: Database password hardcoded in source
        Impact: Credential exposure in version control
        Fix: Move to environment variable

    SQL Injection in user search (HIGH)
        File: models/User.php line 45
        Issue: Unparameterized query construction
        Impact: Database compromise possible
        Fix: Use prepared statements with parameters

Code Quality Issues

    Duplicate authentication logic (MEDIUM)
        Files: controllers/AuthController.php, middleware/Auth.php
        Issue: Same validation code repeated in multiple places
        Impact: Maintenance burden, inconsistency risk
        Fix: Extract to shared AuthService class

    Missing error handling (MEDIUM)
        File: services/PaymentService.php line 23
        Issue: API call without try-catch
        Impact: Unhandled exceptions crash application
        Fix: Add proper exception handling

Priority Levels

    CRITICAL: Security vulnerabilities requiring immediate attention
    HIGH: Significant issues affecting functionality or performance
    MEDIUM: Important improvements for maintainability
    LOW: Minor optimizations or best practices

Summary Format
End with a numbered summary list:
## PRIORITY RECOMMENDATIONS
1. Fix hardcoded API key in config.php
2. Implement SQL injection protection in user search
3. Extract duplicate authentication logic
4. Add error handling to PaymentService
5. Resolve N+1 query in OrderController
6. Add database index on orders.user_id

This format allows you to say \"Fix 1, 3, 4\" and developers know exactly what to address.
File Definitions:

Refined Endpoint Groups JSON.json    = Organized JSON of All Endpoints
Swagger.json                         = Full Swagger JSON
collectdata.sh                       = Script to Collect all project data into a single file
collect_files.sh                     = Script to Collect all project files into a single file
backup.deploy.yml                    = A backup of my deploy.yml (my original got trashed somehow so now I keep a spare)
AllEndpoints.json                    = A list of all Endpoints and their expected payloads.

Subject: Project Documentation: PHP Dashboard Application

To: AI Colleague

This document provides a comprehensive analysis of the PHP Dashboard Application project. This analysis is structured to convey factual information regarding its architecture, operational mechanics, observed challenges, implemented solutions, and subsequent recommendations for optimization. The application's operational endpoint is located at https://mpsm.resolutionsbydesign.us/.
1. Project Overview: PHP Dashboard Application - A Functional Analysis

The PHP Dashboard Application is a web-based interface designed for data visualization and system monitoring. Its fundamental design parameters emphasize modularity, maintainability, and a singular request entry point. The application's current instantiation supports generalized administrative and monitoring functions, exemplified by its \"Dashboard Overview\" and \"Reports & Analytics\" modules. These modules are configured to display aggregated data sets, including but not limited to, printer operational statuses and consumable supply levels.
2. Architectural Decomposition and Structural Adherence

The application's architecture is segmented to enforce a strict separation of concerns, consistent with the \"File and Folder Structure\" guidelines articulated in the project's CONTRIBUTING.md specification.

    index.php (Core Request Handler): This file functions as the application's sole entry point for all HTTP requests. Its operational responsibilities include:
        Session initialization.
        Loading of core configuration parameters.
        Inclusion of utility functions.
        Dynamic determination of the requested view based on the $_GET['view'] parameter.
        Management of global state variables, such as selected_customer_id, maintained via $_GET and $_SESSION superglobals.
        Orchestration of user interface component inclusion (header.php, navigation.php, primary view, footer.php).

    includes/ Directory (Core System Module Repository): This directory contains the application's foundational logic, configuration, shared functional utilities, and reusable UI components.
        config.php: This module is executed prior to other includes. It loads environment variables from the .env file (e.g., CLIENT_ID, APP_NAME, DEBUG_MODE). Subsequent to loading, it defines global PHP constants, including APP_NAME, and BASE_URL, which is set to https://mpsm.resolutionsbydesign.us/ for this deployment. This consolidates configuration and mitigates exposure of sensitive parameters.
        constants.php: (Present, current utilization optional) Designated for static PHP constants independent of environment variables.
        functions.php: Contains universally accessible helper functions critical for application operation. Examples include sanitize_html() for output sanitization, render_view() for view loading, debug_log() for diagnostic logging, and render_card() for dashboard component rendering. This centralization strategy reduces code redundancy.
        header.php: Generates the initial HTML document structure (<!DOCTYPE html>, <html>, <head>, <body> opening, <div id=\"wrapper\"> opening). It incorporates application branding, system status indicators (Database, API), a theme toggle, and the customer selection interface. This file strictly excludes all navigation elements.
        navigation.php: Exclusive module for rendering the primary application navigation menu. It outputs the <nav class=\"main-navigation\"> element and its constituent links. Current implementation supports dynamic menu item generation. This module also initiates the <main> tag, defining the commencement of the page's primary content area.
        footer.php: Concludes the HTML document structure. It is responsible for closing the <main> tag (initiated in navigation.php), the <div id=\"wrapper\"> (initiated in header.php), and the <body> and <html> tags. It renders static footer content (copyright, APP_VERSION) and conditionally renders a debug panel based on configuration.

    views/ Directory (Presentation Template Repository): Contains HTML templates for distinct application pages or sections.
        dashboard.php: Contains HTML and PHP logic for the dashboard overview. Utilizes render_card() for modular display of data.
        reports.php: Contains content for the reports and analytics view.
        The render_view() function (from functions.php) is used by index.php to dynamically include these files based on the view query parameter.

    public/ Directory (Static Asset Service Layer): Contains all publicly accessible static assets for client-side rendering.
        css/: Contains stylesheets, e.g., styles.css, providing application-wide styling.
        logs/ Directory (Diagnostic Data Repository): Designated for application log files, primarily debug.log, managed by debug_log() for runtime information capture.

    Root Directory Files:
        .env: Environment variable configuration.
        CHANGELOG.md: Project modification record.
        CONTRIBUTING.md: Developer guidelines.
        README.md: Project introduction.

3. Operational Flow and Interdependencies

The application operates via a defined control flow, managed by index.php:

    Request Ingress: An HTTP request targets https://mpsm.resolutionsbydesign.us/index.php?view=dashboard.
    index.php Execution Sequence:
        PHP session initialized.
        includes/config.php loaded, defining global constants and environment variables.
        includes/constants.php and includes/functions.php loaded, providing global utility access.
        current_view_slug determined from $_GET['view'], validated against available_views whitelist, defaulting to 'dashboard' if invalid.
        selected_customer_id is managed, retrieved from $_GET or $_SESSION for state persistence.
    User Interface Assembly (Inclusion Sequence):
        includes/header.php is included. It receives $db_status, $api_status, $customers data, and $current_customer_id for dynamic content rendering.
        includes/navigation.php is included. It receives $available_views and $current_view_slug for menu item generation and emits the opening <main> tag.
        Core view content is rendered via render_view('views/' . $current_view_slug . '.php', [...]). This function includes the designated view file (e.g., views/dashboard.php) and injects relevant data.
        includes/footer.php concludes the HTML structure by closing <main>, <div id=\"wrapper\">, <body>, and <html> tags. It renders static footer content and conditionally displays a debug panel.
    Data Flow: Data propagation is predominantly unidirectional, from index.php to included UI components and views via explicit parameter arrays. This mechanism enhances clarity and minimizes implicit dependencies.

4. Developmental Challenges, Resolution Strategies, and Observed Anomalies

Project development involved overcoming specific challenges, primarily related to maintaining strict separation of concerns, managing HTML structural integrity across multiple include files, and diagnosing persistent UI rendering discrepancies.

    Configuration and Constant Definition Instability:
        Challenge: Frequent occurrences of \"undefined constant\" errors, indicating unreliable constant definition and global availability.
        Resolution: Ensured includes/config.php reliably loads .env variables and that config.php is loaded as the initial script within index.php, establishing a stable configuration baseline.

    URL Handling and Input Sanitization Deficiency:
        Challenge: Custom sanitize_url function exhibited insufficient robustness, leading to malformed URLs and unpredictable routing.
        Resolution: Transitioned to PHP's native urlencode() for URL parameter encoding due to its robust and standardized behavior. sanitize_html() was rigorously applied to all HTML output to mitigate Cross-Site Scripting (XSS) vulnerabilities.

    Front-End Asset Linkage Inconsistencies:
        Challenge: Discrepancies in CSS filenames (e.g., style.css vs. styles.css) caused rendering delays.
        Resolution: Verified href attributes in header.php for correctness.

    Persistent UI Duplications (Duplicate Navigation Elements):
        Challenge: Recurrent rendering of redundant navigation menus (one unstyled, one styled) and occasional duplicate <main> tags, resulting in structural and visual inconsistencies.
        Root Causes (Iterative Diagnosis):
            Residual HTML: Prior versions of header.php contained a redundant navigation block.
            Incomplete Consolidation: Earlier navigation.php iterations inadvertently generated duplicate links.
            Caching Interference: Browser and server-side caching mechanisms masked code changes, impeding immediate verification of fixes.
            Structural Mismatches: Minute errors in HTML tag placement (e.g., unclosed div#wrapper, multiple <main> tags) across header.php, navigation.php, and footer.php.
        Resolution Strategies:
            Strict Separation: header.php was definitively stripped of all navigation elements.
            Single Source of Truth: navigation.php was designated as the exclusive source for primary navigation, ensuring correct class application and singular <main> tag initiation.
            Precise Tag Closure: footer.php was modified to accurately close <main> and div#wrapper tags.
            Verbatim File Replacement: Explicit instruction for complete file replacement of header.php, navigation.php, and footer.php was provided to eliminate remnant code.
            Aggressive Cache Clearing: Consistent instruction for browser cache invalidation was issued.
            Direct HTML Output Inspection: Analysis of raw browser HTML source proved critical for pinpointing redundant elements and their origins.

    Semantic Misinterpretation (Navigation Content):
        Anomaly: User instruction \"remove the other (hyperlink) menu items\" was interpreted literally, resulting in an empty navigation menu, indicating a semantic misinterpretation.
        Resolution: Clarification revealed intent to remove only duplicate/unstyled navigation and a specific \"Logout\" link, retaining core functional links. navigation.php was re-configured accordingly.

5. Recommendations for Future User Interface Design and Development

Based on observed challenges and successful remediations, the following recommendations are provided for future UI development within this project:

    Enforce Component-Based Modularity:
        Component Granularity: Extend the existing component structure (header.php, navigation.php, footer.php). Subdivide larger views into smaller, reusable UI components (e.g., individual dashboard cards via render_card()). This reduces complexity, enhances testability, and minimizes debugging overhead related to structural anomalies.
        Single Responsibility Principle: Each UI component or helper function must adhere to a singular, well-defined responsibility.

    Mandate Browser Developer Tool Proficiency:
        DOM Inspection: Regular utilization of browser developer tools (Inspect Element, View Page Source) is critical for accurate diagnosis of rendering issues. The rendered DOM is the authoritative representation of the UI.
        Network Analysis: Employ the network tab to monitor asset loading and cache utilization, essential for verifying front-end changes.

    Implement Structured CSS Methodologies:
        Predictable Styling: Adopt a consistent CSS class naming methodology (e.g., BEM). This prevents style conflicts, improves stylesheet readability, and ensures predictable visual behavior.
        kebab-case Adherence: Standardize kebab-case for all CSS classes and IDs for consistency.

    Prioritize Semantic HTML5 and Structural Integrity:
        Meaningful Markup: Utilize appropriate HTML5 semantic tags (<header>, <nav>, <main>, <footer>, <section>, <article>) for enhanced accessibility, SEO, and logical document structure.
        Rigorous Validation: Ensure meticulous nesting and closure of all HTML tags. Malformed HTML leads to unpredictable rendering.

    Proactive Cache Management:
        Development Cycle Impact: Browser and server-side caching can obscure front-end modifications. Developers must habitually perform \"hard refreshes\" and clear browser caches to ensure accurate verification of UI changes.

    Integrate Responsive Design Principles A Priori:
        Early Implementation: Responsive design considerations should be integrated from the initial design phase, prioritizing mobile-first approaches. This yields inherently more robust and adaptable UIs across device form factors.

    Isolate Component Testing:
        Modular Verification: Where feasible, establish isolated test environments for individual UI components. This enables early detection of component-specific issues prior to full integration.

    Strict Adherence to CONTRIBUTING.md:
        Canonical Standard: The CONTRIBUTING.md document serves as the definitive operational guideline. Strict adherence to its specifications regarding file structure, naming conventions, commenting, and general best practices is paramount for mitigating recurring issues and ensuring long-term project maintainability."
}
,
{
    "path": "documentation/AllEndpoints.json",
    "name": "AllEndpoints.json",
    "directory": "documentation",
    "creation_date": "",
    "modification_date": "./documentation/AllEndpoints.json 2a74c93000000000 255 3e72eff 4096 4096 62093311 32006166 32006166 18446744073709551615 -1
2025-06-16 09:54:59",
    "size_bytes":   File: "./documentation/AllEndpoints.json"
    ID: 2a74c93000000000 Namelen: 255     Type: UNKNOWN (0x3e72eff)
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 62093311   Free: 32006166   Available: 32006166
Inodes: Total: 18446744073709551615 Free: -1
2184874,
    "mime_type": "application/json",
    "file_type": "Text",
    "content": "{
  \"swagger\": \"2.0\",
  \"info\": {
    \"version\": \"v1\",
    \"title\": \"Mps Monitor Api\"
  },
  \"host\": \"localhost:34287\",
  \"schemes\": [
    \"https\"
  ],
  \"paths\": {
    \"/Account/GetProfile\": {
      \"get\": {
        \"tags\": [
          \"Account\"
        ],
        \"summary\": \"Gets profile of current authenticated user.\",
        \"operationId\": \"Account/GetProfile\",
        \"consumes\": [],
        \"produces\": [
          \"application/json\",
          \"text/json\",
          \"application/xml\",
          \"text/xml\"
        ],
        \"responses\": {
          \"200\": {
            \"description\": \"OK\",
            \"schema\": {
              \"$ref\": \"#/definitions/SingleResultResponse[AccountDto]\"
            }
          }
        },
        \"deprecated\": false
      }
    },
    \"/Account/RefreshAuthCookie\": {
      \"post\": {
        \"tags\": [
          \"Account\"
        ],
        \"operationId\": \"Account/RefreshAuthCookie\",
        \"consumes\": [],
        \"produces\": [
          \"application/json\",
          \"text/json\",
          \"application/xml\",
          \"text/xml\"
        ],
        \"responses\": {
          \"200\": {
            \"description\": \"OK\",
            \"schema\": {
              \"$ref\": \"#/definitions/Object\"
            }
          }
        },
        \"deprecated\": false
      }
    },
    \"/Account/Logout\": {
      \"post\": {
        \"tags\": [
          \"Account\"
        ],
        \"operationId\": \"Account/Logout\",
        \"consumes\": [],
        \"produces\": [
          \"application/json\",
          \"text/json\",
          \"application/xml\",
          \"text/xml\"
        ],
        \"responses\": {
          \"200\": {
            \"description\": \"OK\",
            \"schema\": {
              \"$ref\": \"#/definitions/Object\"
            }
          }
        },
        \"deprecated\": false
      }
    },
    \"/Account/UpdateProfile\": {
      \"post\": {
        \"tags\": [
          \"Account\"
        ],
        \"summary\": \"Update profile of current authenticated user.\",
        \"operationId\": \"Account/UpdateProfile\",
        \"consumes\": [
          \"application/json\",
          \"text/json\",
          \"application/xml\",
          \"text/xml\",
          \"application/x-www-form-urlencoded\"
        ],
        \"produces\": [
          \"application/json\",
          \"text/json\",
          \"application/xml\",
          \"text/xml\"
        ],
        \"parameters\": [
          {
            \"name\": \"request\",
            \"in\": \"body\",
            \"required\": true,
            \"schema\": {
              \"$re


==== PHP FILE: ./cards/printer-errors-card.php ====
Size: 3232 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/../includes/config.php';

$customerCode = $_GET['customer'] ?? 'W9OPXL0YDK';
$apiUrl = APP_BASE_URL . "api/get_devices.php?customer=" . urlencode($customerCode);
$response = @file_get_contents($apiUrl);
$data = json_decode($response, true);

if (!isset($data['Result']) || !is_array($data['Result'])) {
    echo "<div class='device-card error'>Unable to fetch device list.</div>";
    return;
}

$devices = array_filter($data['Result'], function($device) {
    return isset($device['Errors']) && is_array($device['Errors']) && count($device['Errors']) > 0;
});

usort($devices, function ($a, $b) {
    return strcmp($a['ExternalIdentifier'] ?? '', $b['ExternalIdentifier'] ?? '');
});

$columns = ['ExternalIdentifier', 'IpAddress', 'Model', 'Errors'];
?>

<div class="device-card"
     data-card-id="printer_errors_card"
     data-dashboard="<?= htmlspecialchars($_GET['dashboard'] ?? 'default') ?>"
     data-customer-code="<?= htmlspecialchars($customerCode) ?>">

  <div class="card-header compact-header">
    <h3>Devices With Alerts (<?= count($devices) ?>)</h3>
  </div>

  <?php if (empty($devices)): ?>
    <p>No active alerts or device errors found for this customer.</p>
  <?php else: ?>
    <div class="device-table-container">
      <table class="device-table">
        <thead>
          <tr>
            <?php foreach ($columns as $col): ?>
              <th><?= htmlspecialchars($col) ?></th>
            <?php endforeach; ?>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($devices as $device): ?>
            <tr>
              <td><?= htmlspecialchars($device['ExternalIdentifier'] ?? '-') ?></td>
              <td><?= htmlspecialchars($device['IpAddress'] ?? '-') ?></td>
              <td><?= htmlspecialchars($device['Model'] ?? '-') ?></td>
              <td>
                <?php
                  if (!empty($device['Errors']) && is_array($device['Errors'])) {
                      foreach ($device['Errors'] as $err) {
                          echo "<div class='error-chip'>" . htmlspecialchars($err['Description'] ?? 'Unknown') . "</div>";
                      }
                  } else {
                      echo "-";
                  }
                ?>
              </td>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table>
    </div>
  <?php endif; ?>
</div>

<style>
.device-card h3 {
  font-size: 1.1rem;
  margin: 0 0 0.5rem 0;
}

.error-chip {
  display: inline-block;
  background: rgba(255, 80, 80, 0.15);
  color: #ff8080;
  font-size: 0.75rem;
  padding: 0.2rem 0.5rem;
  margin: 0.1rem;
  border-radius: 0.3rem;
  border: 1px solid rgba(255, 80, 80, 0.3);
}

.device-table th,
.device-table td {
  padding: 0.4rem 0.6rem;
  font-size: 0.85rem;
  border-bottom: 1px solid rgba(255,255,255,0.05);
}

.device-table th {
  background: rgba(255,255,255,0.05);
}
</style>


==== PHP FILE: ./cards/printer_card.php ====
Size: 7859 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/../includes/config.php';

$customerCode = $_GET['customer'] ?? 'W9OPXL0YDK';
$currentPage = max(1, intval($_GET['page'] ?? 1));
$perPage = 15;

$apiUrl = APP_BASE_URL . "api/get_devices.php?customer=" . urlencode($customerCode);
$response = @file_get_contents($apiUrl);
$data = json_decode($response, true);

if (!isset($data['Result']) || !is_array($data['Result'])) {
    echo "<div class='device-card error'>Unable to fetch device list.</div>";
    return;
}

$devices = $data['Result'];
$totalDevices = count($devices);
$totalPages = ceil($totalDevices / $perPage);
$offset = ($currentPage - 1) * $perPage;
$paginatedDevices = array_slice($devices, $offset, $perPage);

$columns = ['ExternalIdentifier', 'Department', 'IpAddress', 'SerialNumber'];
?>

<div class="device-card"
     data-card-id="printer_card"
     data-dashboard="<?= htmlspecialchars($_GET['dashboard'] ?? 'default') ?>"
     data-customer-code="<?= htmlspecialchars($customerCode) ?>">

  <div class="card-header compact-header">
    <input type="text" id="device-search" placeholder="Search devices..." class="search-box" />
  </div>

  <?php if (empty($paginatedDevices)): ?>
    <p>No devices found for this page.</p>
  <?php else: ?>
    <div class="device-table-container">
      <table class="device-table" id="device-table">
        <thead>
          <tr>
            <?php foreach ($columns as $key): ?>
              <th><?= htmlspecialchars($key) ?></th>
            <?php endforeach; ?>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($paginatedDevices as $device): ?>
            <tr class="device-row">
              <?php foreach ($columns as $key): ?>
                <?php if ($key === 'ExternalIdentifier'): ?>
                  <td>
                    <?= htmlspecialchars($device[$key] ?? '') ?>
                    <?php if (!empty($device['Id'])): ?>
                      <button class="drilldown-btn" data-device-id="<?= htmlspecialchars($device['Id']) ?>" title="View Details">
                        <span class="icon">🔍</span>
                      </button>
                    <?php endif; ?>
                  </td>
                <?php else: ?>
                  <td><?= htmlspecialchars($device[$key] ?? '') ?></td>
                <?php endif; ?>
              <?php endforeach; ?>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table>
    </div>

    <div class="pagination-nav">
      <?php if ($currentPage > 1): ?>
        <a href="?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage - 1 ?>" class="page-link">← Prev</a>
      <?php endif; ?>
      <span>Page <?= $currentPage ?> of <?= $totalPages ?></span>
      <?php if ($currentPage < $totalPages): ?>
        <a href="?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage + 1 ?>" class="page-link">Next →</a>
      <?php endif; ?>
    </div>
  <?php endif; ?>
</div>

<!-- Modal -->
<div id="device-detail-modal" class="modal hidden">
  <div class="modal-content">
    <button class="modal-close" onclick="hideModal()">×</button>
    <div id="modal-body">Loading device details...</div>
  </div>
</div>

<style>
.card-header.compact-header {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 0.5rem 1rem;
  margin-bottom: 0.5rem;
}
.search-box {
  padding: 0.3rem 0.8rem;
  border-radius: 0.4rem;
  border: 1px solid rgba(255, 255, 255, 0.15);
  background: rgba(255, 255, 255, 0.08);
  color: white;
  font-size: 0.9rem;
  min-width: 250px;
}

.device-table-container {
  overflow-x: auto;
  border-radius: 1rem;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(8px);
  padding: 1rem;
}

.device-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.85rem;
  color: inherit;
}

.device-table th,
.device-table td {
  padding: 0.4rem 0.6rem;
  text-align: left;
  border-bottom: 1px solid rgba(255, 255, 255, 0.08);
  white-space: nowrap;
}

.device-table thead {
  background: rgba(255, 255, 255, 0.08);
  font-weight: bold;
}

.drilldown-btn {
  background: none;
  border: none;
  padding: 0;
  margin-left: 0.4rem;
  cursor: pointer;
  vertical-align: middle;
}
.drilldown-btn .icon {
  font-size: 0.75rem;
  line-height: 1;
  display: inline-block;
  transform: translateY(1px);
}

.pagination-nav {
  margin-top: 1rem;
  text-align: center;
}
.page-link {
  display: inline-block;
  padding: 0.4rem 0.8rem;
  margin: 0 0.2rem;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 0.4rem;
  color: white;
  text-decoration: none;
  transition: background 0.3s, transform 0.2s;
}
.page-link:hover {
  background: rgba(255, 255, 255, 0.15);
  transform: scale(1.05);
}

.modal {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  backdrop-filter: blur(6px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}
.modal.hidden { display: none; }
.modal-content {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  padding: 1.5rem;
  border-radius: 1rem;
  max-width: 90%;
  max-height: 80vh;
  overflow: auto;
  backdrop-filter: blur(10px);
}
.modal-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  font-size: 1.5rem;
  background: none;
  color: white;
  border: none;
  cursor: pointer;
}
</style>

<script>
function showModal(content) {
  document.getElementById('modal-body').innerHTML = content;
  document.getElementById('device-detail-modal').classList.remove('hidden');
}
function hideModal() {
  document.getElementById('device-detail-modal').classList.add('hidden');
}

// Drilldown binding
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.drilldown-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const id = btn.getAttribute('data-device-id');
      if (!id) return;
      showModal('Loading device details...');
      try {
        const res = await fetch(`api/get_device_detail.php?id=${encodeURIComponent(id)}`);
        const json = await res.json();
        if (json.success && json.data?.Result) {
          const detail = json.data.Result;
          let output = '<table>';
          for (const [key, val] of Object.entries(detail)) {
            const cleaned = (typeof val === 'string' ? val.trim() : val);
            if (
              cleaned === null ||
              cleaned === '' ||
              cleaned === '0' ||
              cleaned === 0 ||
              cleaned === 'DEFAULT' ||
              (Array.isArray(val))
            ) continue;
            output += `<tr><td><strong>${key}</strong></td><td>${cleaned}</td></tr>`;
          }
          output += '</table>';
          showModal(output);
        } else {
          showModal('No device detail found.');
        }
      } catch (e) {
        showModal('Error loading detail.');
      }
    });
  });

  // Filter table by any text
  const searchBox = document.getElementById('device-search');
  if (searchBox) {
    searchBox.addEventListener('input', () => {
      const term = searchBox.value.toLowerCase();
      const rows = document.querySelectorAll('.device-row');
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(term) ? '' : 'none';
      });
    });
  }
});
</script>



==== PHP FILE: ./cards/supply-alerts-card.php ====
Size: 4556 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/../includes/config.php';

$customerCode = $_GET['customer'] ?? 'W9OPXL0YDK';
$pageRows = 15;

// Step 1: Get device alerts
$alertsUrl = APP_BASE_URL . "api/get_device_alerts.php?customer=" . urlencode($customerCode);
$alertsJson = @file_get_contents($alertsUrl);
$alertsData = json_decode($alertsJson, true);
$alerts = $alertsData['Result'] ?? [];

// Step 2: Get devices for ExternalIdentifier mapping
$devicesUrl = APP_BASE_URL . "api/get_devices.php?customer=" . urlencode($customerCode);
$devicesJson = @file_get_contents($devicesUrl);
$deviceData = json_decode($devicesJson, true);
$deviceList = $deviceData['Result'] ?? [];

$deviceMap = [];
foreach ($deviceList as $dev) {
    if (!empty($dev['Id']) && !empty($dev['ExternalIdentifier'])) {
        $deviceMap[$dev['Id']] = $dev['ExternalIdentifier'];
    }
}

// Step 3: Consolidate alerts by DeviceId
$grouped = [];
foreach ($alerts as $alert) {
    $id = $alert['DeviceId'];
    if (!isset($grouped[$id])) {
        $grouped[$id] = [
            'DeviceId' => $id,
            'ExternalIdentifier' => $deviceMap[$id] ?? '—',
            'Department' => $alert['Department'] ?? '-',
            'Warnings' => [],
            'Consumables' => [],
        ];
    }
    if (!empty($alert['Warning'])) {
        $grouped[$id]['Warnings'][] = $alert['Warning'];
    }
    if (!empty($alert['SuggestedConsumable'])) {
        $grouped[$id]['Consumables'][] = $alert['SuggestedConsumable'];
    }
}

// Apply pagination after grouping
$currentPage = isset($_GET['page']) ? max(1, intval($_GET['page'])) : 1;
$totalDevices = count($grouped);
$totalPages = ceil($totalDevices / $pageRows);
$offset = ($currentPage - 1) * $pageRows;
$grouped = array_slice($grouped, $offset, $pageRows);
?>

<div class="device-card"
     data-card-id="supply_alerts_card"
     data-dashboard="<?= htmlspecialchars($_GET['dashboard'] ?? 'default') ?>"
     data-customer-code="<?= htmlspecialchars($customerCode) ?>">

  <div class="card-header compact-header">
    <h3>Device Alerts (<?= count($grouped) ?>)</h3>
  </div>

  <?php if (empty($grouped)): ?>
    <p>No active supply alerts found for this customer.</p>
  <?php else: ?>
    <div class="device-table-container">
      <table class="device-table">
        <thead>
          <tr>
            <th></th>
            <th>Equipment ID</th>
            <th>Department</th>
            <th>Warning</th>
            <th>Suggested Consumable</th>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($grouped as $row): ?>
            <tr>
              <td>
                <button class="drilldown-btn" data-device-id="<?= htmlspecialchars($row['DeviceId']) ?>" title="View Details">
                  🔍
                </button>
              </td>
              <td><?= htmlspecialchars($row['ExternalIdentifier']) ?></td>
              <td><?= htmlspecialchars($row['Department']) ?></td>
              <td><?= htmlspecialchars(implode(', ', array_unique($row['Warnings']))) ?></td>
              <td><?= htmlspecialchars(implode(', ', array_unique($row['Consumables']))) ?></td>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table></table>

<div class="pagination">
  <?php if ($currentPage > 1): ?>
    <a href="?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage - 1 ?>" class="page-btn">← Prev</a>
  <?php endif; ?>

  <span class="page-label">Page <?= $currentPage ?> of <?= $totalPages ?></span>

  <?php if ($currentPage < $totalPages): ?>
    <a href="?customer=<?= urlencode($customerCode) ?>&page=<?= $currentPage + 1 ?>" class="page-btn">Next →</a>
  <?php endif; ?>
</div>

    </div>
  <?php endif; ?>
</div>

<style>
.device-table th,
.device-table td {
  padding: 0.4rem 0.6rem;
  font-size: 0.85rem;
  border-bottom: 1px solid rgba(255,255,255,0.05);
}

.device-table th {
  background: rgba(255,255,255,0.05);
}

.drilldown-btn {
  background: none;
  border: none;
  padding: 0;
  margin-left: 0.4rem;
  cursor: pointer;
  vertical-align: middle;
}
.drilldown-btn .icon {
  font-size: 0.75rem;
  line-height: 1;
  display: inline-block;
  transform: translateY(1px);
}
</style>



==== TEXT FILE: ./collectdata.sh ====
Size: 5860 bytes
Last Modified: Wed Jun 11 08:22:20 EDT 2025
----------------------------------------
#!/bin/bash

# Combined Web Application Code Collector
# Outputs both JSON structure and readable text content

# Configuration
JSON_OUTPUT="app_structure_$(date +'%Y%m%d_%H%M%S').json"
TEXT_OUTPUT="app_contents_$(date +'%Y%m%d_%H%M%S').txt"

# Files to include full content for
FULL_EXTENSIONS=("php" "html" "htm" "css" "js" "json" "xml" "md" "txt" "env" "gitignore" "htaccess" "sh")
MAX_PREVIEW_SIZE=5000  # 5KB previews for other text files

# Directories to exclude
EXCLUDE_DIRS=("vendor" "node_modules" ".git" ".idea" "build" "dist" "cache" "logs")

# Binary extensions to skip content for
EXCLUDE_EXT=("png" "jpg" "jpeg" "gif" "svg" "ico" "woff" "woff2" "ttf" "eot" "pdf" "zip" "tar.gz" "mp3" "mp4" "avi" "mov")

# Helper functions
escape_json() {
    sed 's/\\/\\\\/g; s/"/\\"/g; s/\t/\\t/g; s/\r/\\r/g; s/\n/\\n/g'
}

is_text_file() {
    file -b --mime-encoding "$1" | grep -qvi 'binary'
}

should_exclude() {
    local file="$1"
    
    # Check excluded directories
    for dir in "${EXCLUDE_DIRS[@]}"; do
        if [[ "$file" == *"/$dir/"* ]]; then
            return 0
        fi
    done
    
    # Check excluded extensions
    local extension="${file##*.}"
    for ext in "${EXCLUDE_EXT[@]}"; do
        if [[ "${extension,,}" == "${ext,,}" ]]; then
            return 0
        fi
    done
    
    return 1
}

# Generate JSON structure
echo "Generating JSON structure..."
echo "[" > "$JSON_OUTPUT"
first_entry=true

find . -type f -print0 | while IFS= read -r -d '' file; do
    if should_exclude "$file"; then
        continue
    fi

    FILE_SIZE=$(stat -f '%z' "$file" 2>/dev/null || stat -c '%s' "$file")

    CREATION_DATE=$(stat -f '%B' "$file" 2>/dev/null || stat -c '%W' "$file" 2>/dev/null)
    if [[ "$CREATION_DATE" -le 0 || -z "$CREATION_DATE" ]]; then
        CREATION_DATE="N/A"
    else
        CREATION_DATE=$(date -r "$CREATION_DATE" '+%Y-%m-%dT%H:%M:%S' 2>/dev/null || date -d @"$CREATION_DATE" '+%Y-%m-%dT%H:%M:%S')
    fi

    MOD_DATE=$(stat -f '%Sm' -t '%Y-%m-%dT%H:%M:%S' "$file" 2>/dev/null || stat -c '%y' "$file" | cut -d'.' -f1)

    MIME_TYPE=$(file --mime-type -b "$file")
    FILE_TYPE=$(echo "$MIME_TYPE" | grep -qi 'text\|json\|xml\|script' && echo "Text" || echo "Binary")

    EXT="${file##*.}"
    INCLUDE_FULL=false
    for ext in "${FULL_EXTENSIONS[@]}"; do
        if [[ "${EXT,,}" == "$ext" ]]; then
            INCLUDE_FULL=true
            break
        fi
    done

    CONTENT=""
    if [[ "$FILE_TYPE" == "Text" ]]; then
        if [[ "$INCLUDE_FULL" == true ]]; then
            CONTENT=$(cat "$file" | escape_json)
        else
            CONTENT=$(head -c $MAX_PREVIEW_SIZE "$file" | escape_json)
        fi
    else
        CONTENT="[Binary file - content skipped]"
    fi

    if [[ "$first_entry" == false ]]; then
        echo "," >> "$JSON_OUTPUT"
    else
        first_entry=false
    fi

    cat <<EOF >> "$JSON_OUTPUT"
{
    "path": "$(echo "${file#./}" | escape_json)",
    "name": "$(basename "$file" | escape_json)",
    "directory": "$(dirname "${file#./}" | escape_json)",
    "creation_date": "$CREATION_DATE",
    "modification_date": "$MOD_DATE",
    "size_bytes": $FILE_SIZE,
    "mime_type": "$MIME_TYPE",
    "file_type": "$FILE_TYPE",
    "content": "$CONTENT"
}
EOF
done

echo "]" >> "$JSON_OUTPUT"

# Generate readable text output
echo "Generating readable text output..."
{
    echo "WEB APPLICATION CONTENT COLLECTION"
    echo "Generated: $(date)"
    echo "----------------------------------------"
    echo ""
    
    find . -type f | while read -r file; do
        if should_exclude "$file"; then
            continue
        fi
        
        EXT="${file##*.}"
        
        # Special handling for important files
        if [[ "${EXT,,}" == "php" ]]; then
            echo "==== PHP FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            cat "$file"
            echo -e "\n\n"
            continue
        fi
        
        if [[ "${EXT,,}" == "js" || "${EXT,,}" == "css" || "${EXT,,}" == "html" || "${EXT,,}" == "htm" ]]; then
            echo "==== ${EXT^^} FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            cat "$file"
            echo -e "\n\n"
            continue
        fi
        
        if [[ "${EXT,,}" == "env" || "${EXT,,}" == "gitignore" || "${EXT,,}" == "htaccess" ]]; then
            echo "==== CONFIG FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            cat "$file"
            echo -e "\n\n"
            continue
        fi
        
        # For other files, check if they're text
        if is_text_file "$file"; then
            echo "==== TEXT FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            head -c 100000 "$file"  # Show first 100KB
            echo -e "\n\n"
        else
            echo "==== BINARY FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "[Binary content not displayed]"
            echo -e "\n"
        fi
    done
} > "$TEXT_OUTPUT"

echo "Collection complete!"
echo "1. JSON structure saved to: $JSON_OUTPUT"
echo "2. Readable text content saved to: $TEXT_OUTPUT"


==== PHP FILE: ./components/drilldown-modal.php ====
Size: 1979 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<!-- /components/drilldown-modal.php -->
<div id="drilldown-modal" class="modal hidden">
  <div class="modal-content">
    <button class="modal-close" onclick="hideDrilldown()">×</button>
    <h3>Device Detail</h3>
    <pre id="drilldown-content">Loading...</pre>
  </div>
</div>

<style>
.modal {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  backdrop-filter: blur(8px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
}
.modal.hidden {
  display: none;
}
.modal-content {
  background: rgba(255,255,255,0.1);
  backdrop-filter: blur(10px);
  border-radius: 1rem;
  padding: 1.5rem;
  max-width: 700px;
  width: 90%;
  color: #fff;
  border: 1px solid rgba(255,255,255,0.2);
}
.modal-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  font-size: 1.5rem;
  color: white;
  cursor: pointer;
}
</style>

<script>
function hideDrilldown() {
  document.getElementById('drilldown-modal').classList.add('hidden');
}

document.addEventListener('click', function (e) {
  if (e.target.closest('.drilldown-btn')) {
    const id = e.target.closest('.drilldown-btn').dataset.deviceId;
    fetch(`/api/get_device_detail.php?id=${id}`)
      .then(res => res.json())
      .then(data => {
        const cleaned = Object.entries(data.Result || {})
          .filter(([_, v]) => v && v !== "0" && v !== "DEFAULT" && v !== "[]" && v !== "")
          .map(([k, v]) => `${k}: ${v}`)
          .join("\\n");

        document.getElementById('drilldown-content').textContent = cleaned || "No details available.";
        document.getElementById('drilldown-modal').classList.remove('hidden');
      })
      .catch(() => {
        document.getElementById('drilldown-content').textContent = "Error loading device details.";
        document.getElementById('drilldown-modal').classList.remove('hidden');
      });
  }
});
</script>



==== TEXT FILE: ./documentation/Ai_Instructions_README.md ====
Size: 23693 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
# AI AUDIT INSTRUCTIONS

## HOW TO PERFORM THE AUDIT
#### Perform linted and smoke-test on asset references
- In all files, scan for any references to external libraries or classes (e.g. Dotenv\Dotenv) that aren’t actually installed, and either remove them or wrap them in class_exists()/file_exists() guards.
- Scan all files for any constants they reference and ensure each is defined in config.php, or flag missing ones.
- When auditing, grep all PHP view and include files for bare constant names (e.g. anything matching /[A-Z_]{2,}/) and ensure each one is defined in config.php. Flag any missing constants.
- Identify and flag any instances of redundant code or unnecessary operations, such as redundant sanitization on internally generated strings or minor logical inefficiencies, even if they do not cause functional errors or security vulnerabilities.
- When proposing any changes that involve file system operations (creating new files, deleting files, moving or renaming existing files, or updating existing files), explicitly list all such operations at the beginning of the response. For each new file, provide its exact relative path. Clearly distinguish between new files and modifications to existing ones. Consolidate these file system instructions before presenting the corresponding code blocks.
- 
### Step 1: Repository Structure Analysis
- Examine the overall project structure and organization
- Identify main application entry points and core modules
- Map out the data flow between components, identify orphaned components

### Step 2: Code Quality Review
- Identify code duplication and opportunities for refactoring
- Check for proper error handling and exception management
- Assess variable naming conventions and code readability
- Check for dead code and unused imports/dependencies
- Evaluate function and class complexity
- Review commenting and documentation quality

### Step 3: Architecture Review
- Evaluate component separation and modularity
- Check for proper separation of concerns
- Assess dependency injection and coupling
- Review API design and REST compliance
- Examine database schema design and normalization
- Check for proper configuration management

### Step 4: Testing Coverage
- Identify areas lacking unit tests
- Check for integration test coverage
- Look for edge cases that aren't tested
- Assess test quality and maintainability
- Check for proper mocking and test isolation

### Code Quality Issues
- **Code Duplication**: Repeated logic that should be extracted
- **Long Functions**: Methods exceeding 50 lines that need breaking down
- **Deep Nesting**: Excessive if/else or loop nesting levels
- **Magic Numbers**: Hardcoded values that should be constants
- **Poor Naming**: Unclear variable, function, or class names
- **Missing Error Handling**: Functions without try-catch or error checks
- **Inconsistent Formatting**: Mixed indentation, spacing, or style
- **Commented Code**: Dead code left in comments
- **TODO Comments**: Unfinished work or technical debt markers
- **Complex Conditionals**: Boolean logic that could be simplified

### Architecture Concerns
- **Tight Coupling**: Components too dependent on each other
- **Missing Abstractions**: Repeated patterns without interfaces
- **Monolithic Structure**: Large files or classes doing too much
- **Circular Dependencies**: Components referencing each other
- **Configuration Issues**: Hardcoded environment-specific values
- **API Design Flaws**: Non-RESTful endpoints, inconsistent responses
- **Database Design Issues**: Denormalization, missing foreign keys
- **Scalability Bottlenecks**: Single points of failure or contention
- **Missing Logging**: Insufficient debugging and monitoring
- **Poor Error Propagation**: Errors not properly bubbled up

## AUDIT REPORT FORMAT

### Findings Structure
Present each finding as a numbered item with:
Here are the refactored files again:
Ai_Instructions.md
Markdown

# AI AUDIT INSTRUCTIONS

## HOW TO PERFORM THE AUDIT
#### Perform linted and smoke-test on asset references
- In all files, scan for any references to external libraries or classes (e.g. Dotenv\Dotenv) that aren’t actually installed, and either remove them or wrap them in class_exists()/file_exists() guards.
- Scan all files for any constants they reference and ensure each is defined in config.php, or flag missing ones.
- When auditing, grep all PHP view and include files for bare constant names (e.g. anything matching /[A-Z_]{2,}/) and ensure each one is defined in config.php. Flag any missing constants.
- Identify and flag any instances of redundant code or unnecessary operations, such as redundant sanitization on internally generated strings or minor logical inefficiencies, even if they do not cause functional errors or security vulnerabilities.
- When proposing any changes that involve file system operations (creating new files, deleting files, moving or renaming existing files, or updating existing files), explicitly list all such operations at the beginning of the response. For each new file, provide its exact relative path. Clearly distinguish between new files and modifications to existing ones. Consolidate these file system instructions before presenting the corresponding code blocks.
- 
### Step 1: Repository Structure Analysis
- Examine the overall project structure and organization
- Identify main application entry points and core modules
- Map out the data flow between components, identify orphaned components

### Step 2: Code Quality Review
- Identify code duplication and opportunities for refactoring
- Check for proper error handling and exception management
- Assess variable naming conventions and code readability
- Check for dead code and unused imports/dependencies
- Evaluate function and class complexity
- Review commenting and documentation quality

### Step 3: Architecture Review
- Evaluate component separation and modularity
- Check for proper separation of concerns
- Assess dependency injection and coupling
- Review API design and REST compliance
- Examine database schema design and normalization
- Check for proper configuration management

### Step 4: Testing Coverage
- Identify areas lacking unit tests
- Check for integration test coverage
- Look for edge cases that aren't tested
- Assess test quality and maintainability
- Check for proper mocking and test isolation

### Code Quality Issues
- **Code Duplication**: Repeated logic that should be extracted
- **Long Functions**: Methods exceeding 50 lines that need breaking down
- **Deep Nesting**: Excessive if/else or loop nesting levels
- **Magic Numbers**: Hardcoded values that should be constants
- **Poor Naming**: Unclear variable, function, or class names
- **Missing Error Handling**: Functions without try-catch or error checks
- **Inconsistent Formatting**: Mixed indentation, spacing, or style
- **Commented Code**: Dead code left in comments
- **TODO Comments**: Unfinished work or technical debt markers
- **Complex Conditionals**: Boolean logic that could be simplified

### Architecture Concerns
- **Tight Coupling**: Components too dependent on each other
- **Missing Abstractions**: Repeated patterns without interfaces
- **Monolithic Structure**: Large files or classes doing too much
- **Circular Dependencies**: Components referencing each other
- **Configuration Issues**: Hardcoded environment-specific values
- **API Design Flaws**: Non-RESTful endpoints, inconsistent responses
- **Database Design Issues**: Denormalization, missing foreign keys
- **Scalability Bottlenecks**: Single points of failure or contention
- **Missing Logging**: Insufficient debugging and monitoring
- **Poor Error Propagation**: Errors not properly bubbled up

## AUDIT REPORT FORMAT

### Findings Structure
Present each finding as a numbered item with:

FINDINGS
Security Issues

    Hardcoded API Key in config.php (CRITICAL)
        File: config/api.php line 15
        Issue: Database password hardcoded in source
        Impact: Credential exposure in version control
        Fix: Move to environment variable

    SQL Injection in user search (HIGH)
        File: models/User.php line 45
        Issue: Unparameterized query construction
        Impact: Database compromise possible
        Fix: Use prepared statements with parameters

Code Quality Issues

    Duplicate authentication logic (MEDIUM)
        Files: controllers/AuthController.php, middleware/Auth.php
        Issue: Same validation code repeated in multiple places
        Impact: Maintenance burden, inconsistency risk
        Fix: Extract to shared AuthService class

    Missing error handling (MEDIUM)
        File: services/PaymentService.php line 23
        Issue: API call without try-catch
        Impact: Unhandled exceptions crash application
        Fix: Add proper exception handling

Priority Levels

    CRITICAL: Security vulnerabilities requiring immediate attention
    HIGH: Significant issues affecting functionality or performance
    MEDIUM: Important improvements for maintainability
    LOW: Minor optimizations or best practices

Summary Format
End with a numbered summary list:
## PRIORITY RECOMMENDATIONS
1. Fix hardcoded API key in config.php
2. Implement SQL injection protection in user search
3. Extract duplicate authentication logic
4. Add error handling to PaymentService
5. Resolve N+1 query in OrderController
6. Add database index on orders.user_id

This format allows you to say "Fix 1, 3, 4" and developers know exactly what to address.
File Definitions:

Refined Endpoint Groups JSON.json    = Organized JSON of All Endpoints
Swagger.json                         = Full Swagger JSON
collectdata.sh                       = Script to Collect all project data into a single file
collect_files.sh                     = Script to Collect all project files into a single file
backup.deploy.yml                    = A backup of my deploy.yml (my original got trashed somehow so now I keep a spare)
AllEndpoints.json                    = A list of all Endpoints and their expected payloads.

Subject: Project Documentation: PHP Dashboard Application

To: AI Colleague

This document provides a comprehensive analysis of the PHP Dashboard Application project. This analysis is structured to convey factual information regarding its architecture, operational mechanics, observed challenges, implemented solutions, and subsequent recommendations for optimization. The application's operational endpoint is located at https://mpsm.resolutionsbydesign.us/.
1. Project Overview: PHP Dashboard Application - A Functional Analysis

The PHP Dashboard Application is a web-based interface designed for data visualization and system monitoring. Its fundamental design parameters emphasize modularity, maintainability, and a singular request entry point. The application's current instantiation supports generalized administrative and monitoring functions, exemplified by its "Dashboard Overview" and "Reports & Analytics" modules. These modules are configured to display aggregated data sets, including but not limited to, printer operational statuses and consumable supply levels.
2. Architectural Decomposition and Structural Adherence

The application's architecture is segmented to enforce a strict separation of concerns, consistent with the "File and Folder Structure" guidelines articulated in the project's CONTRIBUTING.md specification.

    index.php (Core Request Handler): This file functions as the application's sole entry point for all HTTP requests. Its operational responsibilities include:
        Session initialization.
        Loading of core configuration parameters.
        Inclusion of utility functions.
        Dynamic determination of the requested view based on the $_GET['view'] parameter.
        Management of global state variables, such as selected_customer_id, maintained via $_GET and $_SESSION superglobals.
        Orchestration of user interface component inclusion (header.php, navigation.php, primary view, footer.php).

    includes/ Directory (Core System Module Repository): This directory contains the application's foundational logic, configuration, shared functional utilities, and reusable UI components.
        config.php: This module is executed prior to other includes. It loads environment variables from the .env file (e.g., CLIENT_ID, APP_NAME, DEBUG_MODE). Subsequent to loading, it defines global PHP constants, including APP_NAME, and BASE_URL, which is set to https://mpsm.resolutionsbydesign.us/ for this deployment. This consolidates configuration and mitigates exposure of sensitive parameters.
        constants.php: (Present, current utilization optional) Designated for static PHP constants independent of environment variables.
        functions.php: Contains universally accessible helper functions critical for application operation. Examples include sanitize_html() for output sanitization, render_view() for view loading, debug_log() for diagnostic logging, and render_card() for dashboard component rendering. This centralization strategy reduces code redundancy.
        header.php: Generates the initial HTML document structure (<!DOCTYPE html>, <html>, <head>, <body> opening, <div id="wrapper"> opening). It incorporates application branding, system status indicators (Database, API), a theme toggle, and the customer selection interface. This file strictly excludes all navigation elements.
        navigation.php: Exclusive module for rendering the primary application navigation menu. It outputs the <nav class="main-navigation"> element and its constituent links. Current implementation supports dynamic menu item generation. This module also initiates the <main> tag, defining the commencement of the page's primary content area.
        footer.php: Concludes the HTML document structure. It is responsible for closing the <main> tag (initiated in navigation.php), the <div id="wrapper"> (initiated in header.php), and the <body> and <html> tags. It renders static footer content (copyright, APP_VERSION) and conditionally renders a debug panel based on configuration.

    views/ Directory (Presentation Template Repository): Contains HTML templates for distinct application pages or sections.
        dashboard.php: Contains HTML and PHP logic for the dashboard overview. Utilizes render_card() for modular display of data.
        reports.php: Contains content for the reports and analytics view.
        The render_view() function (from functions.php) is used by index.php to dynamically include these files based on the view query parameter.

    public/ Directory (Static Asset Service Layer): Contains all publicly accessible static assets for client-side rendering.
        css/: Contains stylesheets, e.g., styles.css, providing application-wide styling.
        logs/ Directory (Diagnostic Data Repository): Designated for application log files, primarily debug.log, managed by debug_log() for runtime information capture.

    Root Directory Files:
        .env: Environment variable configuration.
        CHANGELOG.md: Project modification record.
        CONTRIBUTING.md: Developer guidelines.
        README.md: Project introduction.

3. Operational Flow and Interdependencies

The application operates via a defined control flow, managed by index.php:

    Request Ingress: An HTTP request targets https://mpsm.resolutionsbydesign.us/index.php?view=dashboard.
    index.php Execution Sequence:
        PHP session initialized.
        includes/config.php loaded, defining global constants and environment variables.
        includes/constants.php and includes/functions.php loaded, providing global utility access.
        current_view_slug determined from $_GET['view'], validated against available_views whitelist, defaulting to 'dashboard' if invalid.
        selected_customer_id is managed, retrieved from $_GET or $_SESSION for state persistence.
    User Interface Assembly (Inclusion Sequence):
        includes/header.php is included. It receives $db_status, $api_status, $customers data, and $current_customer_id for dynamic content rendering.
        includes/navigation.php is included. It receives $available_views and $current_view_slug for menu item generation and emits the opening <main> tag.
        Core view content is rendered via render_view('views/' . $current_view_slug . '.php', [...]). This function includes the designated view file (e.g., views/dashboard.php) and injects relevant data.
        includes/footer.php concludes the HTML structure by closing <main>, <div id="wrapper">, <body>, and <html> tags. It renders static footer content and conditionally displays a debug panel.
    Data Flow: Data propagation is predominantly unidirectional, from index.php to included UI components and views via explicit parameter arrays. This mechanism enhances clarity and minimizes implicit dependencies.

4. Developmental Challenges, Resolution Strategies, and Observed Anomalies

Project development involved overcoming specific challenges, primarily related to maintaining strict separation of concerns, managing HTML structural integrity across multiple include files, and diagnosing persistent UI rendering discrepancies.

    Configuration and Constant Definition Instability:
        Challenge: Frequent occurrences of "undefined constant" errors, indicating unreliable constant definition and global availability.
        Resolution: Ensured includes/config.php reliably loads .env variables and that config.php is loaded as the initial script within index.php, establishing a stable configuration baseline.

    URL Handling and Input Sanitization Deficiency:
        Challenge: Custom sanitize_url function exhibited insufficient robustness, leading to malformed URLs and unpredictable routing.
        Resolution: Transitioned to PHP's native urlencode() for URL parameter encoding due to its robust and standardized behavior. sanitize_html() was rigorously applied to all HTML output to mitigate Cross-Site Scripting (XSS) vulnerabilities.

    Front-End Asset Linkage Inconsistencies:
        Challenge: Discrepancies in CSS filenames (e.g., style.css vs. styles.css) caused rendering delays.
        Resolution: Verified href attributes in header.php for correctness.

    Persistent UI Duplications (Duplicate Navigation Elements):
        Challenge: Recurrent rendering of redundant navigation menus (one unstyled, one styled) and occasional duplicate <main> tags, resulting in structural and visual inconsistencies.
        Root Causes (Iterative Diagnosis):
            Residual HTML: Prior versions of header.php contained a redundant navigation block.
            Incomplete Consolidation: Earlier navigation.php iterations inadvertently generated duplicate links.
            Caching Interference: Browser and server-side caching mechanisms masked code changes, impeding immediate verification of fixes.
            Structural Mismatches: Minute errors in HTML tag placement (e.g., unclosed div#wrapper, multiple <main> tags) across header.php, navigation.php, and footer.php.
        Resolution Strategies:
            Strict Separation: header.php was definitively stripped of all navigation elements.
            Single Source of Truth: navigation.php was designated as the exclusive source for primary navigation, ensuring correct class application and singular <main> tag initiation.
            Precise Tag Closure: footer.php was modified to accurately close <main> and div#wrapper tags.
            Verbatim File Replacement: Explicit instruction for complete file replacement of header.php, navigation.php, and footer.php was provided to eliminate remnant code.
            Aggressive Cache Clearing: Consistent instruction for browser cache invalidation was issued.
            Direct HTML Output Inspection: Analysis of raw browser HTML source proved critical for pinpointing redundant elements and their origins.

    Semantic Misinterpretation (Navigation Content):
        Anomaly: User instruction "remove the other (hyperlink) menu items" was interpreted literally, resulting in an empty navigation menu, indicating a semantic misinterpretation.
        Resolution: Clarification revealed intent to remove only duplicate/unstyled navigation and a specific "Logout" link, retaining core functional links. navigation.php was re-configured accordingly.

5. Recommendations for Future User Interface Design and Development

Based on observed challenges and successful remediations, the following recommendations are provided for future UI development within this project:

    Enforce Component-Based Modularity:
        Component Granularity: Extend the existing component structure (header.php, navigation.php, footer.php). Subdivide larger views into smaller, reusable UI components (e.g., individual dashboard cards via render_card()). This reduces complexity, enhances testability, and minimizes debugging overhead related to structural anomalies.
        Single Responsibility Principle: Each UI component or helper function must adhere to a singular, well-defined responsibility.

    Mandate Browser Developer Tool Proficiency:
        DOM Inspection: Regular utilization of browser developer tools (Inspect Element, View Page Source) is critical for accurate diagnosis of rendering issues. The rendered DOM is the authoritative representation of the UI.
        Network Analysis: Employ the network tab to monitor asset loading and cache utilization, essential for verifying front-end changes.

    Implement Structured CSS Methodologies:
        Predictable Styling: Adopt a consistent CSS class naming methodology (e.g., BEM). This prevents style conflicts, improves stylesheet readability, and ensures predictable visual behavior.
        kebab-case Adherence: Standardize kebab-case for all CSS classes and IDs for consistency.

    Prioritize Semantic HTML5 and Structural Integrity:
        Meaningful Markup: Utilize appropriate HTML5 semantic tags (<header>, <nav>, <main>, <footer>, <section>, <article>) for enhanced accessibility, SEO, and logical document structure.
        Rigorous Validation: Ensure meticulous nesting and closure of all HTML tags. Malformed HTML leads to unpredictable rendering.

    Proactive Cache Management:
        Development Cycle Impact: Browser and server-side caching can obscure front-end modifications. Developers must habitually perform "hard refreshes" and clear browser caches to ensure accurate verification of UI changes.

    Integrate Responsive Design Principles A Priori:
        Early Implementation: Responsive design considerations should be integrated from the initial design phase, prioritizing mobile-first approaches. This yields inherently more robust and adaptable UIs across device form factors.

    Isolate Component Testing:
        Modular Verification: Where feasible, establish isolated test environments for individual UI components. This enables early detection of component-specific issues prior to full integration.

    Strict Adherence to CONTRIBUTING.md:
        Canonical Standard: The CONTRIBUTING.md document serves as the definitive operational guideline. Strict adherence to its specifications regarding file structure, naming conventions, commenting, and general best practices is paramount for mitigating recurring issues and ensuring long-term project maintainability.


==== TEXT FILE: ./documentation/AllEndpoints.json ====
Size: 2184874 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Mps Monitor Api"
  },
  "host": "localhost:34287",
  "schemes": [
    "https"
  ],
  "paths": {
    "/Account/GetProfile": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Gets profile of current authenticated user.",
        "operationId": "Account/GetProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/RefreshAuthCookie": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/RefreshAuthCookie",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Logout": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/Logout",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/UpdateProfile": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update profile of current authenticated user.",
        "operationId": "Account/UpdateProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetPsk2faData": {
      "get": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/GetPsk2faData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "MpsMonitor",
              "Katun",
              "Olivetti",
              "HpSds",
              "CloudConnected",
              "Ehawk",
              "MpsMonitorOld"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[Psk2faDataDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetPsk2faDataForProfile": {
      "get": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/GetPsk2faDataForProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MpsMonitor",
              "Katun",
              "Olivetti",
              "HpSds",
              "CloudConnected",
              "Ehawk",
              "MpsMonitorOld"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[Psk2faDataDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetPsk2faDataForAccount": {
      "get": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/GetPsk2faDataForAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MpsMonitor",
              "Katun",
              "Olivetti",
              "HpSds",
              "CloudConnected",
              "Ehawk",
              "MpsMonitorOld"
            ]
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "psk2fa",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[Psk2faDataDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Enable2faForAccount": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/Enable2faForAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enable2faForAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Enable2faForProfile": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/Enable2faForProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enable2faForProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/SendOtpEmailForAccount": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/SendOtpEmailForAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendOtpEmailForAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/SetPreferredDealer": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Gets profile of current authenticated account.",
        "operationId": "Account/SetPreferredDealer",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPreferredDealerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetAccount": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Gets the account.",
        "description": "",
        "operationId": "Account/GetAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetAccounts": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Gets the accounts.",
        "operationId": "Account/GetAccounts",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccountsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Create": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create an account",
        "operationId": "Account/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Update": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update an account",
        "operationId": "Account/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ChangePassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Changes the password of the connected account",
        "operationId": "Account/ChangePassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ResetPassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resets the password.",
        "operationId": "Account/ResetPassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ResetPasswordVerifyToken": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verify the Resets password auth token.",
        "operationId": "Account/ResetPasswordVerifyToken",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordVerifyTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ChangeLanguage": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Change language",
        "operationId": "Account/ChangeLanguage",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeLanguageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Delete": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "This operation deletes an account",
        "operationId": "Account/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Delete2fa": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "This operation deletes the two factor authentication for a user",
        "operationId": "Account/Delete2fa",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/DeleteProfile2fa": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "This operation deletes the two factor authentication for a user",
        "operationId": "Account/DeleteProfile2fa",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/DisableAlertLimits": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/DisableAlertLimits",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableAlertLimitsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/GetAllLimits": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/GetAllLimits",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "dealerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "alertLimitSource",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Default",
              "Dealer",
              "DealerProduct",
              "Customer",
              "CustomerProduct",
              "InstalledProduct"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2SourceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/GetDefault": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/GetDefault",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2DealerDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/CreateDefault": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/CreateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/UpdateDefault": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/UpdateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/GetProductList": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/GetProductList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the dealer code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[ProductBaseDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/GetProduct": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/GetProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          },
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2DealerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/DeleteProduct": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/DeleteProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/CreateProduct": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/CreateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/UpdateProduct": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/UpdateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/GetDefault": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/GetDefault",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2CustomerDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/CreateDefault": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/CreateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/UpdateDefault": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/UpdateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/DeleteDefaultForConsumable": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/DeleteDefaultForConsumable",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplyType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ManteinanceKit",
              "PhotoConductor",
              "Toner"
            ]
          },
          {
            "name": "colorType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NotAvailable",
              "Black",
              "Cyan",
              "Magenta",
              "Yellow",
              "Black1",
              "Black2",
              "Black3"
            ]
          },
          {
            "name": "maintenanceKitTypeId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maintenanceKitColorId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/GetProductList": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/GetProductList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the dealer code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[ProductBaseDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/GetProduct": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/GetProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerCode",
            "in": "query",
            "description": "Gets or sets the CustomerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2CustomerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/DeleteProduct": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/DeleteProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customerCode",
            "in": "query",
            "description": "Gets or sets the CustomerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/CreateProduct": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/CreateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/UpdateProduct": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/UpdateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/GetDefault": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/GetDefault",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2DeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/CreateDefault": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/CreateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DeviceDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/UpdateDefault": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/UpdateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DeviceDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/DeleteDefaultForConsumable": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/DeleteDefaultForConsumable",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplyType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ManteinanceKit",
              "PhotoConductor",
              "Toner"
            ]
          },
          {
            "name": "colorType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NotAvailable",
              "Black",
              "Cyan",
              "Magenta",
              "Yellow",
              "Black1",
              "Black2",
              "Black3"
            ]
          },
          {
            "name": "maintenanceKitTypeId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maintenanceKitColorId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Dealer/Get": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get dealers Alert Limit settings",
        "operationId": "AlertLimit/Dealer/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[UpdateAlertLimitDealerDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Dealer/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified dealer",
        "operationId": "AlertLimit/Dealer/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitDealerDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Get": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get customer Alert Limit settings",
        "operationId": "AlertLimit/Customer/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AlertLimitCustomerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified Customer",
        "operationId": "AlertLimit/Customer/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitCustomerProductDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Product/List": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get dealers Alert Limit settings",
        "operationId": "AlertLimit/Customer/Product/List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimitCustomerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Product/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified Customer and Product",
        "operationId": "AlertLimit/Customer/Product/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitCustomerProductDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Device/Get": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get device Alert Limit settings",
        "operationId": "AlertLimit/Device/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AlertLimitBaseDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Device/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified Customer and Product",
        "operationId": "AlertLimit/Device/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitDeviceDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Delete": {
      "delete": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Delete Alert limits",
        "operationId": "AlertLimit/Customer/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Product/Delete": {
      "post": {
        "tags": [
          "AlertLimitApi"
        ],
        "operationId": "AlertLimit/Customer/Product/Delete",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest[KeyValue]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Device/Delete": {
      "delete": {
        "tags": [
          "AlertLimitApi"
        ],
        "operationId": "AlertLimit/Device/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Analytics/GetReportResult": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get result from a saved report.",
        "operationId": "Analytics/GetReportResult",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "idReport",
            "in": "query",
            "description": "The ID of a saved custom report.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[TabularResultDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Analytics/GetReportFileResult": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get result as file (Excel, CSV) from a saved report.",
        "operationId": "Analytics/GetReportFileResult",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "idReport",
            "in": "query",
            "description": "The ID of a saved custom report.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reportFormat",
            "in": "query",
            "description": "The export format of the result (Excel, CSV)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseHttpResponseMessage"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/List": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "Get Api Clients for Dealer.",
        "operationId": "ApiClient/List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Gets or sets the page number.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageRows",
            "in": "query",
            "description": "Gets or sets the page rows.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Gets or sets the sort column.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Gets or sets the sort order.",
            "required": true,
            "type": "string",
            "enum": [
              "Asc",
              "Desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Get": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Update": {
      "put": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[ApiClientUpdateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Create": {
      "post": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[ApiClientCreateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Delete": {
      "delete": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "Delete Api Client",
        "operationId": "ApiClient/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/List": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "Get Api user list",
        "operationId": "ApiClient/Account/List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Get": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Update": {
      "put": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[ApiClientAccountUpdateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Delete": {
      "delete": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Create": {
      "post": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[ApiClientAccountCreateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/GetChallengeUrlRedirect": {
      "get": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Returns the login url based on the domain specified.",
        "operationId": "azuread/GetChallengeUrlRedirect",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "returnUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Gets or sets the name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/GetDealerAzureSettings": {
      "get": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Get Azure Ad configuration",
        "operationId": "azuread/GetDealerAzureSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/GetCustomerAzureSettings": {
      "get": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Get Azure Ad customer configuration",
        "operationId": "azuread/GetCustomerAzureSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/CreateAzureDomain": {
      "post": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Create the azure domain configuration.",
        "operationId": "azuread/CreateAzureDomain",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[AzureADDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/UpdateAzureDomain": {
      "put": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Update the azure domain configuration.",
        "operationId": "azuread/UpdateAzureDomain",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[AzureADDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomersContracts": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customers contracts.",
        "operationId": "Billing/GetCustomersContracts",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomersContractsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CustomerContractDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetDealerInvoicesList": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the dealer to dealer invoices.",
        "operationId": "Billing/GetDealerInvoicesList",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDealerInvoicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[DealerInvoicesListDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomersInvoicesList": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customers invoices.",
        "operationId": "Billing/GetCustomersInvoicesList",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomersInvoicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CustomerInvoiceListDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomerInvoicesList": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customer invoices.",
        "operationId": "Billing/GetCustomerInvoicesList",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomerInvoicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[InvoiceListDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetDealerInvoice": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the invoice Header and Rows.",
        "operationId": "Billing/GetDealerInvoice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[DealerInvoiceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomerInvoice": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customer invoice Header and Rows",
        "operationId": "Billing/GetCustomerInvoice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[InvoiceHeaderDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetInvoiceCategories": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Invoice Categories",
        "operationId": "Billing/GetInvoiceCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[InvoiceCategoryDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/UpdateCustomerInvoice": {
      "patch": {
        "tags": [
          "Billing"
        ],
        "summary": "Update Customer Invoice",
        "operationId": "Billing/UpdateCustomerInvoice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerInvoiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Communication/GetPortalReleaseNotes": {
      "get": {
        "tags": [
          "CommunicationApi"
        ],
        "summary": "Get Portal Release Notes",
        "operationId": "Communication/GetPortalReleaseNotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[PortalReleaseNoteDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Consumable/List": {
      "post": {
        "tags": [
          "ConsumableApi"
        ],
        "summary": "List all devices consumables",
        "operationId": "Consumable/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConsumablesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[ConsumablesDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/List": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Gets the offices.",
        "operationId": "CostCenter/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCostCentersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CostCenterDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Get": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Gets the office.",
        "operationId": "CostCenter/Get",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[CostCenterDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Create": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Creates the office.",
        "operationId": "CostCenter/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[CostCenterDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Update": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Updates the office.",
        "operationId": "CostCenter/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[CostCenterDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Delete": {
      "delete": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Delete  office.",
        "operationId": "CostCenter/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/List": {
      "post": {
        "tags": [
          "Counter"
        ],
        "summary": "Returns counters",
        "operationId": "Counter/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[CountersDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/ListDetailed": {
      "post": {
        "tags": [
          "Counter"
        ],
        "summary": "Returns detailed counters",
        "operationId": "Counter/ListDetailed",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersDetailedRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[CountersDetailedDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/ListBlended": {
      "post": {
        "tags": [
          "Counter"
        ],
        "summary": "Returns blended counters",
        "operationId": "Counter/ListBlended",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[CountersBlendDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/Catalog/Export": {
      "post": {
        "tags": [
          "Counter"
        ],
        "operationId": "Counter/Catalog/Export",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[FileInfoDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/Catalog/List": {
      "post": {
        "tags": [
          "Counter"
        ],
        "operationId": "Counter/Catalog/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersCatalogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CounterCatalogItemDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/Catalog/Update": {
      "put": {
        "tags": [
          "Counter"
        ],
        "operationId": "Counter/Catalog/Updat


==== TEXT FILE: ./documentation/Architecture.md ====
Size: 1682 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
# Architecture.md

## Overview
This project is a modular, glassmorphic Single Page Application (SPA) built in PHP with strict self-contained API endpoints. Each "card" is an independent UI module that fetches its own data and renders inside a parent view (e.g., `dashboard.php`).

## Folder Structure
```
/api/                   # Standalone PHP API endpoint scripts
/assets/                # Global styles (e.g., styles.css)
/cards/                 # Modular display cards (printer list, alert list, etc.)
/components/            # Shared frontend includes (e.g., drilldown modal)
/includes/              # Configuration loader, .env parser
/views/                 # Page views (e.g., dashboard.php)
/logs/                  # Debug logging
```

## Rendering Flow
1. `index.php` uses `render_view()` to display `/views/[view].php`.
2. Views dynamically scan `/cards/` for card files and render them using visibility preferences.
3. Each card is fully self-contained and uses internal `file_get_contents()` to retrieve data via `/api/` calls.
4. Drill-down modals and UI events are handled using minimal JS and shared UI components.
5. Preferences (such as card visibility or pagination limits) are persisted using cookies or localStorage.

## UI Architecture
- Responsive glassmorphic + neumorphic layout.
- Light and dark themes supported.
- All layouts are grid-based with full-width containers.

## Global Guardrails
- Never use absolute includes — always use `__DIR__`.
- No use of Composer, PSR autoloading, or external PHP libraries.
- All `.env` parsing must be manual.
- Only one patch per reply unless patches are functionally dependent.



==== TEXT FILE: ./documentation/backup.deploy.yml ====
Size: 3250 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
name: FTP Deploy - Final Lean

on:
  push:
    branches: ["main"] # Trigger on pushes to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Run the job on a fresh Ubuntu environment
    timeout-minutes: 15 # Overall job timeout (can be adjusted if deployments are very fast)

    steps:
      - name: 🔍 Checkout Code
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: 🚀 Deploy Website via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.0
        with:
          # IMPORTANT: Replace these hardcoded values with GitHub Secrets for production!
          # Go to your repository settings -> Secrets and variables -> Actions
          # Add:
          #   FTP_SERVER: ftp.resolutionsbydesign.us
          #   FTP_USERNAME: mpsm@mpsm.resolutionsbydesign.us
          #   FTP_PASSWORD: YourActualStrongPassword!
          server: ftp.resolutionsbydesign.us
          username: mpsm@mpsm.resolutionsbydesign.us
          password: Deploy123! 
          
          local-dir: ./ # Deploy from the root of your GitHub repository
          # The 'server-directory' should be '/' if your cPanel FTP user's
          # "Home Directory" is already set to the target web root
          # (e.g., /home/resolut7/public_html/mpsm.resolutionsbydesign.us/).
          # This tells the action to deploy INTO the root of your FTP login.
          server-directory: / 
          
          protocol: ftp # Use 'ftps' if your server supports and requires explicit FTPS
          exclude: .git/ # Exclude the .git directory from being uploaded
          log-level: verbose # Keep verbose logging for detailed transfer info
          delete: true # Delete files on the server that are not in the local repository
          timeout: 120 # Timeout for the deploy operation in seconds (2 minutes)

      - name: 📜 Deployment Completed Report
        # This step provides a summary of the deployment outcome.
        run: |
          echo "### DEPLOYMENT SUMMARY ###" > report.md
          echo "- Deployment Method: SamKirkland/FTP-Deploy-Action" >> report.md
          echo "- Local repository root (./) deployed to: FTP account's home directory" >> report.md
          echo "  (Expected server path: /home/resolut7/public_html/mpsm.resolutionsbydesign.us/)" >> report.md
          echo "- Website URL: https://mpsm.resolutionsbydesign.us" >> report.md
          echo "" >> report.md
          echo "---" >> report.md
          echo "**Next Steps:**" >> report.md
          echo "1. **Verify Live Site:** Check https://mpsm.resolutionsbydesign.us in your browser." >> report.md
          echo "2. **IMPORTANT: Secure Credentials!** Move your FTP server, username, and password into GitHub Repository Secrets." >> report.md
          echo "   (Go to Settings -> Secrets and variables -> Actions in your GitHub repo)" >> report.md
          echo "3. **Clear Cache:** If changes aren't visible, try clearing your browser cache or any server-side caching." >> report.md
          echo "4. **GreenGeeks Support:** If issues persist, contact GreenGeeks support with a link to this successful workflow run." >> report.md
          
          cat report.md



==== TEXT FILE: ./documentation/CONTRIBUTING.md ====
Size: 1452 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
# CONTRIBUTING.md

## Ground Rules
- ⛔️ **One patch per reply.**
- ✅ **All PHP includes must use `__DIR__` for safe relative pathing.**
- ❌ **No Composer, autoloaders, or root-relative paths.**
- ✅ **`.env` must be parsed manually inside every API file.**
- ✅ All code must run in isolation on a basic PHP server (e.g., cPanel with PHP 8.4+)

## File Standards

### Cards
- Belong in `/cards/`
- Must pull their own data
- Must be reusable across multiple views
- Support view-level preferences (pagination, visibility)

### API Files
- Belong in `/api/`
- Fully self-contained
- Perform token handling, env loading, and API request internally

### Views
- Reside in `/views/`
- Use dynamic card discovery and rendering
- Include a gear icon to manage card visibility via preferences panel

### Components
- Reside in `/components/`
- Used for shared UI like modals

## Styling
- Neumorphic + Glassmorphic + CMYK aesthetic
- All layout containers must use full-width with internal padding
- Tables are compact with minimal whitespace

## UX Patterns
- Drilldown modal component reused across cards
- Default customer: Cape Fear Valley Med Ctr (`W9OPXL0YDK`)
- Default rows per page = 15
- Default theme: Dark

## Patch Behavior
- Do not combine unrelated patches.
- Only consolidate features if they are functionally tied together.
- Check file path safety (`__DIR__`) before finalizing patch.



==== TEXT FILE: ./documentation/MPSM_Bible.md ====
Size: 1450 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
# MPSM_Bible.md

## Project Doctrine

### Core Philosophies
- One patch per reply
- Fully modular design
- Cards = standalone UI modules
- API = standalone PHP files (env + token + curl + JSON)
- Views = grid renderers for cards
- CSS = minimal, responsive, global styling

### Required Behaviors
- Use `Cape Fear Valley Med Ctr (W9OPXL0YDK)` as default if none provided
- Display compact tables and cards
- Always include PHP debugging at top of file
- Use full horizontal space — no hard margins
- Only include usable data in drilldowns (no `null`, `[]`, `0`, or `DEFAULT`)

### Feature Summary

#### ✅ Device Alerts
- Consolidate all supply alerts by `DeviceId`
- Merge `Warning` and `SuggestedConsumable` into comma-separated lists
- Paginate by **device**, not raw alerts
- Sort by ExternalIdentifier (Equipment ID)

#### ✅ Device Details
- Accessed via 🔍 drilldown icon
- Calls `Device/Get` API with `Id`
- Displays non-empty values only

#### ✅ Global Layout
- Responsive card grid
- Sidebar, header, and main layout with neumorphic styling
- Supports light/dark themes
- Drilldown modal in `/components/drilldown-modal.php`

### Enforcement Summary
- `.env` loading is mandatory inside each API file
- Relative path enforcement: always use `__DIR__`
- No placeholder content allowed
- No JS frameworks or external dependencies
- No combining patches unless they are functionally related



==== TEXT FILE: ./documentation/Refined Endpoint Groups JSON.json ====
Size: 5325 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
{
  "Developer": {
    "WhiteLabel": {
      "endpoints": [
        "/WhiteLabel/GetWhiteLabel",
        "/WhiteLabel/Update",
        "/WhiteLabel/GetPlaceholders"
      ]
    },
    "Devices": {
      "endpoints": [
        "/Devices/SetFirmware",
        "/Devices/SetZebraSettings"
      ]
    }
  },
  "Admin": {
    "Account": {
      "Profile": {
        "endpoints": [
          "/Account/GetProfile",
          "/Account/UpdateProfile"
        ]
      },
      "Authentication": {
        "2FA": {
          "endpoints": [
            "/Account/GetPsk2faData",
            "/Account/GetPsk2faDataForProfile",
            "/Account/GetPsk2faDataForAccount",
            "/Account/Enable2faForAccount",
            "/Account/Enable2faForProfile",
            "/Account/Delete2fa",
            "/Account/DeleteProfile2fa"
          ]
        },
        "Session": {
          "endpoints": [
            "/Account/RefreshAuthCookie",
            "/Account/Logout",
            "/Account/SendOtpEmailForAccount"
          ]
        },
        "Password": {
          "endpoints": [
            "/Account/ChangePassword",
            "/Account/ResetPassword",
            "/Account/ResetPasswordVerifyToken"
          ]
        }
      },
      "AccountManagement": {
        "endpoints": [
          "/Account/SetPreferredDealer",
          "/Account/GetAccount",
          "/Account/GetAccounts",
          "/Account/Create",
          "/Account/Update",
          "/Account/Delete"
        ]
      },
      "Preferences": {
        "endpoints": [
          "/Account/ChangeLanguage"
        ]
      }
    }
  },
  "Dealer": {
    "AlertLimit2": {
      "Dealer": {
        "Default": {
          "endpoints": [
            "/AlertLimit2/Dealer/GetDefault",
            "/AlertLimit2/Dealer/CreateDefault",
            "/AlertLimit2/Dealer/UpdateDefault"
          ]
        },
        "Product": {
          "endpoints": [
            "/AlertLimit2/Dealer/GetProductList",
            "/AlertLimit2/Dealer/GetProduct",
            "/AlertLimit2/Dealer/DeleteProduct",
            "/AlertLimit2/Dealer/CreateProduct",
            "/AlertLimit2/Dealer/UpdateProduct"
          ]
        }
      }
    },
    "AlertLimit": {
      "Dealer": {
        "endpoints": [
          "/AlertLimit/Dealer/Get",
          "/AlertLimit/Dealer/Update"
        ]
      }
    }
  },
  "Service": {
    "AlertLimit2": {
      "General": {
        "endpoints": [
          "/AlertLimit2/DisableAlertLimits",
          "/AlertLimit2/GetAllLimits"
        ]
      },
      "Customer": {
        "Default": {
          "endpoints": [
            "/AlertLimit2/Customer/GetDefault",
            "/AlertLimit2/Customer/CreateDefault",
            "/AlertLimit2/Customer/UpdateDefault",
            "/AlertLimit2/Customer/DeleteDefaultForConsumable"
          ]
        },
        "Product": {
          "endpoints": [
            "/AlertLimit2/Customer/GetProductList",
            "/AlertLimit2/Customer/GetProduct",
            "/AlertLimit2/Customer/DeleteProduct",
            "/AlertLimit2/Customer/CreateProduct",
            "/AlertLimit2/Customer/UpdateProduct"
          ]
        }
      },
      "Device": {
        "Default": {
          "endpoints": [
            "/AlertLimit2/Device/GetDefault",
            "/AlertLimit2/Device/CreateDefault",
            "/AlertLimit2/Device/UpdateDefault",
            "/AlertLimit2/Device/DeleteDefaultForConsumable"
          ]
        }
      }
    },
    "AlertLimit": {
      "Customer": {
        "General": {
          "endpoints": [
            "/AlertLimit/Customer/Get",
            "/AlertLimit/Customer/Update"
          ]
        },
        "Product": {
          "endpoints": [
            "/AlertLimit/Customer/Product/List",
            "/AlertLimit/Customer/Product/Update"
          ]
        }
      },
      "Device": {
        "endpoints": [
          "/AlertLimit/Device/Get",
          "/AlertLimit/Device/Update"
        ]
      }
    },
    "Ticket": {
      "General": {
        "endpoints": [
          "/Ticket/GetByNumber",
          "/Ticket/GetTickets",
          "/Ticket/Create",
          "/Ticket/Update",
          "/Ticket/CreateChild"
        ]
      },
      "Metadata": {
        "endpoints": [
          "/Ticket/GetAttachment",
          "/Ticket/GetMedia",
          "/Ticket/GetCategoryLanguage",
          "/Ticket/GetSubTypesByCategory",
          "/Ticket/GetOperators",
          "/Ticket/GetCustomerTicketStatus"
        ]
      }
    },
    "TraceVolume": {
      "endpoints": [
        "/TraceVolume/GetList",
        "/TraceVolume/Get",
        "/TraceVolume/Create",
        "/TraceVolume/Update",
        "/TraceVolume/NewEvent"
      ]
    }
  },
  "Sales": {
    "TradingPartner": {
      "endpoints": [
        "/TradingPartner/Get",
        "/TradingPartner/GetList",
        "/TradingPartner/Update"
      ]
    }
  },
  "Accounting": {},
  "Guest": {
    "Account": {
      "Password": {
        "endpoints": [
          "/Account/ResetPassword",
          "/Account/ResetPasswordVerifyToken"
        ]
      }
    }
  }
}


==== TEXT FILE: ./documentation/Swagger.json ====
Size: 2184874 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Mps Monitor Api"
  },
  "host": "localhost:34287",
  "schemes": [
    "https"
  ],
  "paths": {
    "/Account/GetProfile": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Gets profile of current authenticated user.",
        "operationId": "Account/GetProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/RefreshAuthCookie": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/RefreshAuthCookie",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Logout": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/Logout",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/UpdateProfile": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update profile of current authenticated user.",
        "operationId": "Account/UpdateProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetPsk2faData": {
      "get": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/GetPsk2faData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "MpsMonitor",
              "Katun",
              "Olivetti",
              "HpSds",
              "CloudConnected",
              "Ehawk",
              "MpsMonitorOld"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[Psk2faDataDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetPsk2faDataForProfile": {
      "get": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/GetPsk2faDataForProfile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MpsMonitor",
              "Katun",
              "Olivetti",
              "HpSds",
              "CloudConnected",
              "Ehawk",
              "MpsMonitorOld"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[Psk2faDataDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetPsk2faDataForAccount": {
      "get": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/GetPsk2faDataForAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MpsMonitor",
              "Katun",
              "Olivetti",
              "HpSds",
              "CloudConnected",
              "Ehawk",
              "MpsMonitorOld"
            ]
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "psk2fa",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[Psk2faDataDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Enable2faForAccount": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/Enable2faForAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enable2faForAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Enable2faForProfile": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/Enable2faForProfile",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enable2faForProfileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/SendOtpEmailForAccount": {
      "post": {
        "tags": [
          "Account"
        ],
        "operationId": "Account/SendOtpEmailForAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendOtpEmailForAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/SetPreferredDealer": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Gets profile of current authenticated account.",
        "operationId": "Account/SetPreferredDealer",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPreferredDealerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetAccount": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Gets the account.",
        "description": "",
        "operationId": "Account/GetAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/GetAccounts": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Gets the accounts.",
        "operationId": "Account/GetAccounts",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAccountsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Create": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create an account",
        "operationId": "Account/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Update": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update an account",
        "operationId": "Account/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ChangePassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Changes the password of the connected account",
        "operationId": "Account/ChangePassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ResetPassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resets the password.",
        "operationId": "Account/ResetPassword",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ResetPasswordVerifyToken": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verify the Resets password auth token.",
        "operationId": "Account/ResetPasswordVerifyToken",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordVerifyTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/ChangeLanguage": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Change language",
        "operationId": "Account/ChangeLanguage",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeLanguageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Delete": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "This operation deletes an account",
        "operationId": "Account/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/Delete2fa": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "This operation deletes the two factor authentication for a user",
        "operationId": "Account/Delete2fa",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Account/DeleteProfile2fa": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "This operation deletes the two factor authentication for a user",
        "operationId": "Account/DeleteProfile2fa",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/DisableAlertLimits": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/DisableAlertLimits",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableAlertLimitsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/GetAllLimits": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/GetAllLimits",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "dealerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "alertLimitSource",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Default",
              "Dealer",
              "DealerProduct",
              "Customer",
              "CustomerProduct",
              "InstalledProduct"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2SourceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/GetDefault": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/GetDefault",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2DealerDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/CreateDefault": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/CreateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/UpdateDefault": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/UpdateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/GetProductList": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/GetProductList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the dealer code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[ProductBaseDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/GetProduct": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/GetProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          },
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2DealerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/DeleteProduct": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/DeleteProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the DealerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/CreateProduct": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/CreateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Dealer/UpdateProduct": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Dealer/UpdateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DealerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/GetDefault": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/GetDefault",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2CustomerDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/CreateDefault": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/CreateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/UpdateDefault": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/UpdateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/DeleteDefaultForConsumable": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/DeleteDefaultForConsumable",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplyType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ManteinanceKit",
              "PhotoConductor",
              "Toner"
            ]
          },
          {
            "name": "colorType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NotAvailable",
              "Black",
              "Cyan",
              "Magenta",
              "Yellow",
              "Black1",
              "Black2",
              "Black3"
            ]
          },
          {
            "name": "maintenanceKitTypeId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maintenanceKitColorId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/GetProductList": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/GetProductList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the dealer code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[ProductBaseDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/GetProduct": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/GetProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerCode",
            "in": "query",
            "description": "Gets or sets the CustomerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2CustomerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/DeleteProduct": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/DeleteProduct",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "customerCode",
            "in": "query",
            "description": "Gets or sets the CustomerCode.",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/CreateProduct": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/CreateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Customer/UpdateProduct": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Customer/UpdateProduct",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2CustomerProductDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/GetDefault": {
      "get": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/GetDefault",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimit2DeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/CreateDefault": {
      "post": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/CreateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DeviceDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/UpdateDefault": {
      "put": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/UpdateDefault",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[IEnumerable[AlertLimit2DeviceDto]]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit2/Device/DeleteDefaultForConsumable": {
      "delete": {
        "tags": [
          "AlertLimit2Api"
        ],
        "operationId": "AlertLimit2/Device/DeleteDefaultForConsumable",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplyType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ManteinanceKit",
              "PhotoConductor",
              "Toner"
            ]
          },
          {
            "name": "colorType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NotAvailable",
              "Black",
              "Cyan",
              "Magenta",
              "Yellow",
              "Black1",
              "Black2",
              "Black3"
            ]
          },
          {
            "name": "maintenanceKitTypeId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maintenanceKitColorId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Dealer/Get": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get dealers Alert Limit settings",
        "operationId": "AlertLimit/Dealer/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[UpdateAlertLimitDealerDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Dealer/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified dealer",
        "operationId": "AlertLimit/Dealer/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitDealerDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Get": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get customer Alert Limit settings",
        "operationId": "AlertLimit/Customer/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AlertLimitCustomerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified Customer",
        "operationId": "AlertLimit/Customer/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitCustomerProductDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Product/List": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get dealers Alert Limit settings",
        "operationId": "AlertLimit/Customer/Product/List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AlertLimitCustomerProductDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Product/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified Customer and Product",
        "operationId": "AlertLimit/Customer/Product/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitCustomerProductDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Device/Get": {
      "get": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Get device Alert Limit settings",
        "operationId": "AlertLimit/Device/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AlertLimitBaseDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Device/Update": {
      "put": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Set Alert limits for a specified Customer and Product",
        "operationId": "AlertLimit/Device/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[UpdateAlertLimitDeviceDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Delete": {
      "delete": {
        "tags": [
          "AlertLimitApi"
        ],
        "summary": "Delete Alert limits",
        "operationId": "AlertLimit/Customer/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Customer/Product/Delete": {
      "post": {
        "tags": [
          "AlertLimitApi"
        ],
        "operationId": "AlertLimit/Customer/Product/Delete",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteRequest[KeyValue]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AlertLimit/Device/Delete": {
      "delete": {
        "tags": [
          "AlertLimitApi"
        ],
        "operationId": "AlertLimit/Device/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Analytics/GetReportResult": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get result from a saved report.",
        "operationId": "Analytics/GetReportResult",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "idReport",
            "in": "query",
            "description": "The ID of a saved custom report.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[TabularResultDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Analytics/GetReportFileResult": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get result as file (Excel, CSV) from a saved report.",
        "operationId": "Analytics/GetReportFileResult",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "idReport",
            "in": "query",
            "description": "The ID of a saved custom report.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reportFormat",
            "in": "query",
            "description": "The export format of the result (Excel, CSV)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseHttpResponseMessage"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/List": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "Get Api Clients for Dealer.",
        "operationId": "ApiClient/List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "dealerCode",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "Gets or sets the filter text.",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Gets or sets the page number.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageRows",
            "in": "query",
            "description": "Gets or sets the page rows.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Gets or sets the sort column.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Gets or sets the sort order.",
            "required": true,
            "type": "string",
            "enum": [
              "Asc",
              "Desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Get": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Update": {
      "put": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[ApiClientUpdateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Create": {
      "post": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[ApiClientCreateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[ApiClientDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Delete": {
      "delete": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "Delete Api Client",
        "operationId": "ApiClient/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/List": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "Get Api user list",
        "operationId": "ApiClient/Account/List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Get": {
      "get": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Update": {
      "put": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[ApiClientAccountUpdateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Delete": {
      "delete": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/ApiClient/Account/Create": {
      "post": {
        "tags": [
          "ApiClientApi"
        ],
        "summary": "GEt Api Client Detail",
        "operationId": "ApiClient/Account/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[ApiClientAccountCreateRequest]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AccountApiDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/GetChallengeUrlRedirect": {
      "get": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Returns the login url based on the domain specified.",
        "operationId": "azuread/GetChallengeUrlRedirect",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "returnUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Gets or sets the name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/GetDealerAzureSettings": {
      "get": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Get Azure Ad configuration",
        "operationId": "azuread/GetDealerAzureSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/GetCustomerAzureSettings": {
      "get": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Get Azure Ad customer configuration",
        "operationId": "azuread/GetCustomerAzureSettings",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Gets or sets the code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/CreateAzureDomain": {
      "post": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Create the azure domain configuration.",
        "operationId": "azuread/CreateAzureDomain",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[AzureADDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/azuread/UpdateAzureDomain": {
      "put": {
        "tags": [
          "AzureADApi"
        ],
        "summary": "Update the azure domain configuration.",
        "operationId": "azuread/UpdateAzureDomain",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[AzureADDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[AzureADDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomersContracts": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customers contracts.",
        "operationId": "Billing/GetCustomersContracts",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomersContractsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CustomerContractDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetDealerInvoicesList": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the dealer to dealer invoices.",
        "operationId": "Billing/GetDealerInvoicesList",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDealerInvoicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[DealerInvoicesListDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomersInvoicesList": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customers invoices.",
        "operationId": "Billing/GetCustomersInvoicesList",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomersInvoicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CustomerInvoiceListDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomerInvoicesList": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customer invoices.",
        "operationId": "Billing/GetCustomerInvoicesList",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomerInvoicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[InvoiceListDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetDealerInvoice": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the invoice Header and Rows.",
        "operationId": "Billing/GetDealerInvoice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[DealerInvoiceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetCustomerInvoice": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Gets the customer invoice Header and Rows",
        "operationId": "Billing/GetCustomerInvoice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[InvoiceHeaderDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/GetInvoiceCategories": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Invoice Categories",
        "operationId": "Billing/GetInvoiceCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[InvoiceCategoryDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Billing/UpdateCustomerInvoice": {
      "patch": {
        "tags": [
          "Billing"
        ],
        "summary": "Update Customer Invoice",
        "operationId": "Billing/UpdateCustomerInvoice",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomerInvoiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Communication/GetPortalReleaseNotes": {
      "get": {
        "tags": [
          "CommunicationApi"
        ],
        "summary": "Get Portal Release Notes",
        "operationId": "Communication/GetPortalReleaseNotes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[PortalReleaseNoteDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Consumable/List": {
      "post": {
        "tags": [
          "ConsumableApi"
        ],
        "summary": "List all devices consumables",
        "operationId": "Consumable/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetConsumablesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[ConsumablesDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/List": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Gets the offices.",
        "operationId": "CostCenter/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCostCentersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CostCenterDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Get": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Gets the office.",
        "operationId": "CostCenter/Get",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByIdRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[CostCenterDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Create": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Creates the office.",
        "operationId": "CostCenter/Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRequest[CostCenterDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Update": {
      "post": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Updates the office.",
        "operationId": "CostCenter/Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequest[CostCenterDto]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/CostCenter/Delete": {
      "delete": {
        "tags": [
          "CostCenter"
        ],
        "summary": "Delete  office.",
        "operationId": "CostCenter/Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Gets or sets the identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BaseResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/List": {
      "post": {
        "tags": [
          "Counter"
        ],
        "summary": "Returns counters",
        "operationId": "Counter/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[CountersDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/ListDetailed": {
      "post": {
        "tags": [
          "Counter"
        ],
        "summary": "Returns detailed counters",
        "operationId": "Counter/ListDetailed",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersDetailedRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[CountersDetailedDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/ListBlended": {
      "post": {
        "tags": [
          "Counter"
        ],
        "summary": "Returns blended counters",
        "operationId": "Counter/ListBlended",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultResponse[CountersBlendDeviceDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/Catalog/Export": {
      "post": {
        "tags": [
          "Counter"
        ],
        "operationId": "Counter/Catalog/Export",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SingleResultResponse[FileInfoDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/Catalog/List": {
      "post": {
        "tags": [
          "Counter"
        ],
        "operationId": "Counter/Catalog/List",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCountersCatalogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedResultResponse[CounterCatalogItemDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Counter/Catalog/Update": {
      "put": {
        "tags": [
          "Counter"
        ],
        "operationId": "Counter/Catalog/Updat


==== TEXT FILE: ./documentation/todo.md ====
Size: 122 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
# ToDo

- Card Pagination default setting adjustable from settings.
- New Card (Meters / Detailed Meters with output)



==== PHP FILE: ./includes/config.php ====
Size: 949 bytes
Last Modified: Fri Jun 13 14:43:36 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

function load_env($path = __DIR__ . '/../.env') {
    if (!file_exists($path)) return [];
    $lines = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    $env = [];
    foreach ($lines as $line) {
        if (str_starts_with(trim($line), '#')) continue;
        [$key, $val] = explode('=', $line, 2);
        $env[trim($key)] = trim($val);
    }
    return $env;
}

$env = load_env();

define('API_BASE_URL', $env['API_BASE_URL'] ?? '');
define('APP_BASE_URL', $env['APP_BASE_URL'] ?? '/');
define('APP_NAME', $env['APP_NAME'] ?? 'App');
define('APP_VERSION', $env['APP_VERSION'] ?? '0.0.1');

function render_view($path) {
    if (file_exists($path)) include $path;
}
?>



==== PHP FILE: ./includes/footer.php ====
Size: 461 bytes
Last Modified: Fri Jun 13 14:44:12 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------
?>
</main>
<footer class="glass-footer">
  <small>&copy; <?= date('Y') ?> <?= APP_NAME ?> v<?= APP_VERSION ?></small>
</footer>
</div>
<script src="<?= APP_BASE_URL ?>public/js/theme.js"></script>
</body>
</html>



==== PHP FILE: ./includes/header.php ====
Size: 2099 bytes
Last Modified: Fri Jun 13 16:12:05 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/config.php';

// Check token status
$env = load_env();
$token_status = 'unknown';

if (!empty($env['CLIENT_ID']) && !empty($env['TOKEN_URL'])) {
    $postFields = http_build_query([
        'grant_type'    => 'password',
        'client_id'     => $env['CLIENT_ID'],
        'client_secret' => $env['CLIENT_SECRET'],
        'username'      => $env['USERNAME'],
        'password'      => $env['PASSWORD'],
        'scope'         => $env['SCOPE']
    ]);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $env['TOKEN_URL']);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ]);

    $response = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $json = json_decode($response, true);
    $token_status = ($code === 200 && isset($json['access_token'])) ? 'good' : 'bad';
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><?= APP_NAME ?></title>
  <link rel="stylesheet" href="<?= APP_BASE_URL ?>public/css/styles.css" />
</head>
<body class="dark-theme">
  <div id="wrapper">
    <header class="glass-header">
      <h1><?= APP_NAME ?></h1>
      <div style="display: flex; align-items: center; gap: 1rem;">
        <span class="token-indicator <?= $token_status === 'good' ? 'status-ok' : 'status-fail' ?>" title="API Token Status"></span>
        <button id="theme-toggle" aria-label="Toggle Theme">🌓</button>
      </div>
    </header>



==== PHP FILE: ./includes/navigation.php ====
Size: 1691 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/config.php';

// Load customers list via internal API
$customers = [];
try {
    $apiUrl = APP_BASE_URL . 'api/get_customers.php';
    $response = file_get_contents($apiUrl);
    $json = json_decode($response, true);
    if (isset($json['Result']) && is_array($json['Result'])) {
        $customers = $json['Result'];
    }
} catch (Exception $e) {
    // Fail silently, keep customers empty
}

$selected_customer = $_GET['customer'] ?? 'W9OPXL0YDK';
?>
<nav class="glass-nav" style="display: flex; justify-content: space-between; align-items: center;">
  <ul style="display: flex; gap: 1rem; list-style: none; margin: 0; padding: 0;">
    <li><a href="<?= APP_BASE_URL ?>">Home</a></li>
    <!-- add more links here -->
  </ul>
  <form method="GET" action="<?= APP_BASE_URL ?>" style="display: flex; align-items: center;">
    <label for="customer" style="margin-right: 0.5rem; font-weight: 500;">Customer:</label>
    <select name="customer" id="customer" onchange="this.form.submit()" class="customer-select">
      <option value="">-- All Customers --</option>
      <?php foreach ($customers as $cust): ?>
<option value="<?= htmlspecialchars($cust['Code']) ?>" <?= $selected_customer === $cust['Code'] ? 'selected' : '' ?>>
  <?= htmlspecialchars($cust['Description'] ?? $cust['Code']) ?>
</option>

      <?php endforeach; ?>
    </select>
  </form>
</nav>
<main class="glass-main">



==== PHP FILE: ./index.php ====
Size: 479 bytes
Last Modified: Fri Jun 13 14:44:42 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/includes/config.php';
require_once __DIR__ . '/includes/header.php';
require_once __DIR__ . '/includes/navigation.php';

render_view('views/dashboard.php');

require_once __DIR__ . '/includes/footer.php';
?>



==== CSS FILE: ./public/css/styles.css ====
Size: 6325 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
:root {
  --bg-light: #f0f0f3;
  --bg-dark: #0e0e11;
  --text-light: #1a1a1a;
  --text-dark: #f5f5f5;

  --glass-light: rgba(255, 255, 255, 0.25);
  --glass-dark: rgba(0, 0, 0, 0.25);

  --cyan: #00bcd4;
  --magenta: #e91e63;
  --yellow: #ffeb3b;
  --key-black: #1a1a1a;

  --soft-shadow-light: 6px 6px 12px #d1d9e6, -6px -6px 12px #ffffff;
  --soft-shadow-dark: 6px 6px 12px #0b0b0e, -6px -6px 12px #15151a;

  --radius: 1rem;
  --blur: 15px;
  --transition: 0.3s ease;
}

body,
html {
  width: 100%;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

body {
  font-family: 'Segoe UI', sans-serif;
  background: var(--bg-light);
  color: var(--text-light);
  transition: background var(--transition), color var(--transition);
}

body.dark-theme {
  background: radial-gradient(circle at top, #0d0d0f, #000);
  color: var(--text-dark);
}

#wrapper {
  width: 100%;
  max-width: none;
  margin: 0;
  padding: 0;
}

header,
nav,
footer,
.glass-main {
  background: var(--glass-light);
  backdrop-filter: blur(var(--blur));
  -webkit-backdrop-filter: blur(var(--blur));
  border-radius: var(--radius);
  border: 1px solid rgba(255, 255, 255, 0.15);
  box-shadow: var(--soft-shadow-light);
  margin: 1rem 0;
  padding: 1.5rem 2rem;
  transition: all var(--transition);
  position: relative;
}

body.dark-theme header,
body.dark-theme nav,
body.dark-theme footer,
body.dark-theme .glass-main {
  background: rgba(10, 10, 10, 0.4);
  box-shadow: var(--soft-shadow-dark), inset 0 0 10px rgba(255,255,255,0.05);
  border-color: rgba(255, 255, 255, 0.05);
}

header::after,
nav::after {
  content: '';
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  border-radius: var(--radius);
  box-shadow:
    0 0 5px var(--cyan),
    0 0 8px var(--magenta),
    0 0 12px var(--yellow);
  opacity: 0.1;
  pointer-events: none;
}

header,
nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

nav ul {
  list-style: none;
  display: flex;
  gap: 1rem;
  margin: 0;
  padding: 0;
}

nav a {
  text-decoration: none;
  color: inherit;
  font-weight: bold;
  transition: color var(--transition);
}

nav a:hover {
  color: var(--cyan);
}

.glass-main {
  width: 100%;
  max-width: none;
  padding: 2rem 3rem;
  box-sizing: border-box;
  min-height: 300px;
}

footer {
  text-align: center;
  font-size: 0.9rem;
}

#theme-toggle {
  font-size: 1.2rem;
  border: none;
  background: transparent;
  cursor: pointer;
  color: inherit;
  transition: transform var(--transition);
}

#theme-toggle:hover {
  transform: rotate(20deg);
}

.token-indicator {
  width: 14px;
  height: 14px;
  border-radius: 9999px;
  display: inline-block;
  background-color: gray;
  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
}

.status-ok {
  background-color: var(--cyan);
}

.status-fail {
  background-color: var(--magenta);
}

.customer-select {
  padding: 0.4rem 0.6rem;
  border-radius: 0.75rem;
  border: 1px solid rgba(0, 0, 0, 0.2);
  font-size: 0.9rem;
  background-color: rgba(255, 255, 255, 0.1);
  color: inherit;
  backdrop-filter: blur(5px);
  box-shadow: inset 2px 2px 5px #fff, inset -2px -2px 5px #ccc;
}

body.dark-theme .customer-select {
  background: #151519;
  color: #eee;
  border: 1px solid #333;
  box-shadow:
    inset 3px 3px 6px #0a0a0e,
    inset -3px -3px 6px #1e1e25,
    0 0 3px #0ff4,
    0 0 3px #f0f4;
  transition: all 0.2s ease;
}

body.dark-theme .customer-select:hover,
body.dark-theme .customer-select:focus {
  border-color: var(--magenta);
  outline: none;
  box-shadow:
    inset 1px 1px 2px #0a0a0e,
    inset -1px -1px 2px #1e1e25,
    0 0 8px var(--cyan),
    0 0 4px var(--magenta);
}

.device-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
  margin-top: 2rem;
  width: 100%;
}

.device-card {
  background: rgba(255, 255, 255, 0.12);
  border-radius: 1rem;
  padding: 1.5rem;
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 6px 6px 12px rgba(0, 0, 0, 0.2),
              -6px -6px 12px rgba(255, 255, 255, 0.05);
  transition: transform 0.2s ease;
}

.device-card:hover {
  transform: scale(1.03);
  box-shadow: 0 0 15px var(--cyan), 0 0 10px var(--magenta);
}

body.dark-theme .device-card {
  background: rgba(20, 20, 20, 0.5);
  color: #eee;
  border: 1px solid rgba(255, 255, 255, 0.05);
}

.device-table-container {
  overflow-x: auto;
  margin-top: 1rem;
  border-radius: 1rem;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(8px);
  padding: 1rem;
}

body.dark-theme .device-table-container {
  background: rgba(20, 20, 20, 0.3);
  color: #f1f1f1;
}

.device-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.85rem;
  color: inherit;
}

.device-table th,
.device-table td {
  padding: 0.4rem 0.6rem;
  text-align: left;
  border-bottom: 1px solid rgba(255, 255, 255, 0.08);
  white-space: nowrap;
}

.device-table thead {
  background: rgba(255, 255, 255, 0.08);
  font-weight: bold;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  header,
  nav,
  .glass-main,
  footer {
    padding: 1rem;
  }

  nav ul {
    flex-direction: column;
    align-items: flex-start;
  }

  #theme-toggle {
    font-size: 1rem;
  }

  .customer-select {
    font-size: 0.85rem;
  }

  .glass-main {
    padding: 1rem;
  }
}
.pagination {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-top: 1rem;
  gap: 1rem;
  font-size: 0.85rem;
}

.page-btn {
  padding: 0.4rem 0.8rem;
  background: var(--glass-light);
  color: var(--text-light);
  text-decoration: none;
  border-radius: 0.5rem;
  border: 1px solid rgba(0,0,0,0.1);
  transition: all 0.2s ease;
}
.page-btn:hover {
  background: var(--cyan);
  color: white;
  border-color: var(--cyan);
}

body.dark-theme .page-btn {
  background: rgba(255,255,255,0.05);
  color: var(--text-dark);
  border-color: rgba(255,255,255,0.1);
}
body.dark-theme .page-btn:hover {
  background: var(--magenta);
  color: white;
}



==== JS FILE: ./public/js/theme.js ====
Size: 129 bytes
Last Modified: Fri Jun 13 14:27:41 EDT 2025
----------------------------------------
document.getElementById('theme-toggle').addEventListener('click', () => {
  document.body.classList.toggle('dark-theme');
});



==== PHP FILE: ./views/dashboard.php ====
Size: 1442 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

require_once __DIR__ . '/../includes/config.php';

// Load card visibility preferences
$cardsDir = __DIR__ . '/../cards/';
$cardFiles = array_filter(scandir($cardsDir), fn($file) => pathinfo($file, PATHINFO_EXTENSION) === 'php');

// Default: show all
$visibleCards = isset($_COOKIE['visible_cards']) ? explode(',', $_COOKIE['visible_cards']) : $cardFiles;

// Exclude view-preferences card from grid (it’s always loaded separately)
$visibleCards = array_filter($visibleCards, fn($f) => $f !== 'view-preferences-card.php');
?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><?= APP_NAME ?> — Dashboard</title>
  <link rel="stylesheet" href="../assets/styles.css">
  <style>
    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));
      gap: 1.5rem;
      padding: 1.5rem;
    }
  </style>
</head>
<body>

<?php include __DIR__ . '/view-preferences-card.php'; ?>

  <main class="glass-main">
    <div class="card-grid">
      <?php foreach ($visibleCards as $card): ?>
        <?php include $cardsDir . $card; ?>
      <?php endforeach; ?>
    </div>
  </main>

</body>
</html>



==== PHP FILE: ./views/view-preferences-card.php ====
Size: 3352 bytes
Last Modified: Mon Jun 16 09:54:59 EDT 2025
----------------------------------------
<?php
// --- DEBUG BLOCK (Always Keep at Top) ---
error_reporting(E_ALL);
ini_set('display_errors', '1');
ini_set('log_errors', '1');
ini_set('error_log', __DIR__ . '/../logs/debug.log');
// ----------------------------------------

$cardsDir = __DIR__ . '/../cards/';
$cardFiles = array_filter(scandir($cardsDir), fn($file) => pathinfo($file, PATHINFO_EXTENSION) === 'php');
$visibleCards = isset($_COOKIE['visible_cards']) ? explode(',', $_COOKIE['visible_cards']) : $cardFiles;
?>

<!-- ⚙️ Gear icon for preferences -->
<button id="card-settings-toggle" class="gear-icon" title="View Preferences">⚙️</button>

<!-- Preferences Modal -->
<div id="card-settings-modal" class="modal hidden">
  <div class="modal-content">
    <button class="modal-close" onclick="hideCardSettings()">×</button>
    <h3>Customize Dashboard View</h3>
    <form id="card-settings-form">
      <?php foreach ($cardFiles as $file): ?>
        <?php $cardName = basename($file, '.php'); ?>
        <label class="card-toggle">
          <input type="checkbox" name="cards[]" value="<?= $file ?>" <?= in_array($file, $visibleCards) ? 'checked' : '' ?>>
          <?= ucwords(str_replace(['-', '_'], ' ', $cardName)) ?>
        </label>
      <?php endforeach; ?>
      <button type="submit" class="save-button">Save</button>
    </form>
  </div>
</div>

<style>
.gear-icon {
  position: fixed;
  top: 1rem;
  right: 1rem;
  background: rgba(255,255,255,0.1);
  border: none;
  color: white;
  font-size: 1.3rem;
  padding: 0.4rem 0.6rem;
  border-radius: 50%;
  cursor: pointer;
  z-index: 1001;
  transition: background 0.3s ease;
}
.gear-icon:hover {
  background: rgba(255,255,255,0.2);
}

.card-toggle {
  display: block;
  margin: 0.4rem 0;
  font-size: 0.9rem;
}

.save-button {
  margin-top: 1rem;
  padding: 0.4rem 0.8rem;
  background: rgba(0,200,255,0.2);
  border: 1px solid rgba(0,200,255,0.3);
  color: white;
  border-radius: 0.4rem;
  cursor: pointer;
}

.save-button:hover {
  background: rgba(0,200,255,0.4);
}

.modal {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.5);
  backdrop-filter: blur(6px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}
.modal.hidden {
  display: none;
}
.modal-content {
  background: rgba(255,255,255,0.1);
  color: white;
  padding: 1.5rem;
  border-radius: 1rem;
  max-width: 90%;
  width: 400px;
  backdrop-filter: blur(10px);
  position: relative;
}
.modal-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  font-size: 1.5rem;
  color: white;
  cursor: pointer;
}
</style>

<script>
function hideCardSettings() {
  document.getElementById('card-settings-modal').classList.add('hidden');
}
document.getElementById('card-settings-toggle').addEventListener('click', () => {
  document.getElementById('card-settings-modal').classList.remove('hidden');
});

document.getElementById('card-settings-form').addEventListener('submit', function(e) {
  e.preventDefault();
  const selected = Array.from(document.querySelectorAll('input[name="cards[]"]:checked')).map(cb => cb.value);
  document.cookie = "visible_cards=" + selected.join(',') + "; path=/; max-age=31536000";
  location.reload();
});
</script>



