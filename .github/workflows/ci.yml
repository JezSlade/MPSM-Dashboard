name: CI - PHP & JS Linting

concurrency:
  group: ci-${{ github.event_name }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  checks: write

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  COMPOSER_CACHE_KEY: composer-cache-v2
  NPM_CACHE_KEY: npm-cache-v2

jobs:
  php-lint:
    name: "üêò PHP Lint & Analysis"
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üêò Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: json, mbstring, xml, intl, curl
          coverage: none
          tools: composer:v2, phpcs, phpstan

      - name: üì¶ Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ env.COMPOSER_CACHE_KEY }}-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ env.COMPOSER_CACHE_KEY }}-${{ runner.os }}-

      - name: üîç Install Composer dependencies
        if: hashFiles('composer.json') != ''
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      - name: ‚úÖ PHP Syntax Check
        run: |
          echo "üîç Scanning for PHP files..."
          mapfile -t php_files < <(find . -type f -name '*.php' \
            -not -path './vendor/*' \
            -not -path './node_modules/*' \
            -not -path './.git/*' \
            -not -path './storage/framework/cache/*')
          if [ ${#php_files[@]} -eq 0 ]; then
            echo "‚úÖ No PHP files found"
            exit 0
          fi
          parallel --halt now,fail=1 php -l ::: "${php_files[@]}"
          echo "‚úÖ All PHP files passed syntax check"

      - name: üîß PHP Code Style Check
        if: hashFiles('composer.json') != ''
        run: |
          if [ -f "vendor/bin/phpcs" ]; then
            echo "Running PHP CodeSniffer..."
            vendor/bin/phpcs --standard=PSR12 --extensions=php --ignore=vendor/,node_modules/ .
          else
            echo "PHP CodeSniffer not available, skipping code style check"
          fi
        continue-on-error: true

      - name: üîß PHP Static Analysis
        if: hashFiles('composer.json') != ''
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            echo "Running PHPStan..."
            vendor/bin/phpstan analyse --memory-limit=2G
          else
            echo "PHPStan not available, skipping static analysis"
          fi
        continue-on-error: true

  js-lint:
    name: "üü® JavaScript/TypeScript Lint"
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: üì¶ Install dependencies
        if: hashFiles('package.json') != ''
        run: npm ci --no-audit --no-fund --prefer-offline

      - name: üîç Run ESLint
        if: hashFiles('package.json') != ''
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            echo "üîç Running ESLint..."
            npx eslint . --ext .js,.jsx,.ts,.tsx --format stylish --cache
          else42            echo "‚ö†Ô∏è ESLint not configured, skipping JavaScript linting"
          fi
        continue-on-error: false

  report:
    name: "üìä CI Summary Report"
    runs-on: ubuntu-24.04
    needs: [php-lint, js-lint]
    if: always()
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üìä Generate CI Report
        run: |
          echo "# CI Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          declare -A statuses=(
            ["php-lint"]="${{ needs.php-lint.result }}"
            ["js-lint"]="${{ needs.js-lint.result }}"
          )
          
          for job in "${!statuses[@]}"; do
            status="${statuses[$job]}"
            emoji=$([ "$status" == "success" ] && echo "‚úÖ" || [ "$status" == "failure" ] && echo "‚ùå" || echo "‚ö†Ô∏è")
            echo "| $job | $emoji $status |" >> $GITHUB_STEP_SUMMARY
          done
          
          overall_status="success"
          for status in "${statuses[@]}"; do
            if [ "$status" == "failure" ]; then
              overall_status="failure"
              break
            fi
            if [ "$status" == "cancelled" ] || [ "$status" == "skipped" ]; then
              overall_status="warning"
            fi
          done
          
          echo -e "\n**Overall CI Status**: $overall_status" >> $GITHUB_STEP_SUMMARY