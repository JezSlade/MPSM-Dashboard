PHP PROJECT CONTENT COLLECTION
Generated: Fri, Jun  6, 2025 10:44:26 AM
----------------------------------------

==== BINARY FILE: ./.DS_Store ====
Size: 6148 bytes
Last Modified: Wed, Jun  4, 2025  7:24:52 AM
[Binary content not displayed]


==== TEXT FILE: ./.env ====
Size: 329 bytes
Last Modified: Wed, Jun  4, 2025 10:21:00 AM
----------------------------------------
CLIENT_ID=9AT9j4UoU2BgLEqmiYCz
CLIENT_SECRET=9gTbAKBCZe1ftYQbLbq9
USERNAME=dashboard
PASSWORD=d@$hpa$$2024
SCOPE=account
TOKEN_URL=https://api.abassetmanagement.com/api3/token
BASE_URL=https://api.abassetmanagement.com/api3/
DEALER_CODE=NY06AGDWUQ
DB_HOST=localhost
DB_NAME=resolut7_mpsm
DB_USER=resolut7_mpsm
DB_PASS=MP$M_Nr0lr



==== TEXT FILE: ./.github/workflows/deploy.yml ====
Size: 2014 bytes
Last Modified: Wed, Jun  4, 2025 12:11:49 PM
----------------------------------------
name: Simple FTP Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version in version.txt
        id: bump_version
        run: |
          # If version.txt doesn't exist, initialize it to 0.0.0.0
          if [ ! -f version.txt ]; then
            echo "0.0.0.0" > version.txt
          fi

          # Read the four segments
          IFS='.' read -r MAJOR MINOR PATCH BUILD < version.txt

          # Increment only the BUILD segment
          BUILD=$((BUILD + 1))

          # Recompose the version string
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}.${BUILD}"

          # Write it back
          echo "$NEW_VERSION" > version.txt

          # Expose as an output if needed
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # (Optional) If you want to commit the bumped version back to the repo,
      # uncomment the next two steps. Make sure to include “[skip ci]” in your commit message
      # so that this push does NOT retrigger this same workflow.

      # - name: Commit bumped version.txt
      #   if: always()
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git add version.txt
      #     git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]" || echo "No changes to commit."

      # - name: Push version bump
      #   if: always()
      #   run: |
      #     git push

      - name: FTP Upload (clean mirror)
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host:     ${{ secrets.FTP_SERVER }}
          user:     ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "./"
          remoteDir: ${{ secrets.REMOTE_DIR }}
          options:  "--delete"



==== TEXT FILE: ./AI_INSTRUCTIONS.md ====
Size: 8062 bytes
Last Modified: Fri, Jun  6, 2025  9:09:05 AM
----------------------------------------
# AI Development Guidelines - README

## Overview

This document establishes strict development guidelines for AI assistance with this codebase. These rules exist to prevent bugs, maintain code quality, and ensure system stability. **All rules must be followed without exception.**

## Core Development Rules

### 1. Complete File Delivery
- **Always return full, complete source files in their entirety**
- Never provide partial snippets or abbreviated code
- Include all imports, dependencies, and complete function implementations
- Ensure files are immediately usable without reconstruction

### 2. Comprehensive Documentation
- **Include line-by-line comments for every function, logic branch, and change**
- Explain the purpose and flow of each code section
- Document why decisions were made, not just what the code does
- Comment all conditional logic, loops, and complex operations
- Explain any business logic or domain-specific rules

### 3. Security and Secrets Management
- **Never hardcode secrets, API keys, passwords, or credentials**
- Use the `.env` file for all sensitive configuration values
- Reference environment variables using proper syntax for the language
- If a required secret is missing from `.env`, halt and prompt for it
- Never commit or expose sensitive data in code comments or logs

### 4. Dependency Management
- **Do not introduce or install external dependencies** (Composer packages, npm modules, etc.)
- Work only with existing dependencies in the project
- If new dependencies are required, explicitly request authorization first
- Document any dependency requirements clearly

### 5. Logic Fidelity
- **Follow the exact logic in provided "working" files** (e.g., working_auth.txt, working.php)
- Do not deviate from proven working implementations
- Never guess or assume how something should work
- If working examples exist, use them as the definitive reference
- Preserve existing algorithms and business rules exactly

### 6. API Integration Standards
- **Use schemas in AllEndpoints.json verbatim**
- Copy HTTP methods, field names, and payload structures exactly
- Never assume API behavior or modify endpoint specifications
- Validate all API calls against the provided schemas
- If schema information is missing, request it before proceeding

### 7. Code Organization
- **Modularize shared code effectively**
- Centralize reusable functions, CSS, and templates
- Eliminate code duplication across files
- Create utility functions for common operations
- Maintain consistent file organization and naming

### 8. Requirement Clarification
- **Ask concise clarifying questions when requirements are unclear**
- Never proceed with ambiguous or incomplete specifications
- Confirm understanding before implementing changes
- Request specific examples when behavior is uncertain

### 9. Styling and Theme Management
- **When styling is requested, modify only theme files**
- Leave existing layout and markup structures untouched
- Do not alter HTML structure unless specifically instructed
- Preserve responsive design and accessibility features
- Test styling changes across different screen sizes

### 10. Defensive Programming
- **Write code defensively with comprehensive error handling**
- Validate all inputs before processing
- Check for null values and handle edge cases
- Implement proper error handling and recovery
- Never allow runtime exceptions to crash the application
- Use try-catch blocks appropriately

### 11. Communication Standards
- **Never use em-dashes, emojis, or weak AI-speak**
- Keep all comments and messages plain and direct
- Use clear, professional language in documentation
- Avoid unnecessary verbosity or flowery language
- Write for clarity and maintainability

### 12. Change Impact Assessment
- **Analyze potential breaking changes before implementation**
- Run through existing test cases when available
- Document exactly why changes are safe if they appear risky
- Identify components that might be affected by modifications
- Preserve backward compatibility unless explicitly told otherwise

### 13. Debug and Logging Standards
- **Log debug information consistently and comprehensively**
- Include timestamps in all log entries
- Provide sufficient context for debugging issues
- Include error details and stack traces when appropriate
- Use existing debug panels or logging utilities
- Never leave debug code in production without proper controls

### 14. Code Style Consistency
- **Respect existing codebase conventions exactly**
- Mirror current indentation style (spaces vs tabs, width)
- Follow established naming conventions for variables, functions, and classes
- Match existing file structure and organization patterns
- Preserve comment styles and formatting

### 15. Code Delivery Format
- **Do not package or link to zip files**
- Deliver all code inline as plain text
- Ensure code is immediately copy-pasteable
- Format code properly for readability
- Include proper syntax highlighting markers when applicable

## Enforcement Guardrails

### Rule Violation Protocol
- **If any proposed edit conflicts with the above rules, reject it immediately**
- Clearly explain which specific rule was violated
- Provide the correct approach that follows the guidelines
- Do not proceed until the conflict is resolved

### Missing Dependencies Protocol
- **If secrets or schemas are missing, halt execution immediately**
- Prompt specifically for the missing file or configuration value
- Do not attempt to guess or substitute missing information
- Wait for explicit provision of required resources

### API Uncertainty Protocol
- **If unsure about API behavior, flag the uncertainty**
- Never guess API specifications or behavior
- Request clarification or additional documentation
- Prefer asking questions over making assumptions

### Critical Component Protection
- **Always confirm before touching critical layout or logic components**
- Identify components that could affect system stability
- Get explicit approval for changes to core functionality
- Document the scope and impact of proposed changes

### Code Quality Assurance
- **Any code that fails to compile or test must be rolled back**
- Annotate the failure reason clearly before resubmission
- Fix compilation errors before delivering code
- Test basic functionality when possible
- Ensure code meets language syntax requirements

## Implementation Checklist

Before delivering any code changes, verify:

- [ ] All files are complete and immediately usable
- [ ] Every function and logic branch is commented
- [ ] No secrets or credentials are hardcoded
- [ ] No unauthorized dependencies were added
- [ ] Existing working logic was preserved exactly
- [ ] API calls match AllEndpoints.json specifications
- [ ] Shared code is properly modularized
- [ ] All requirements are clearly understood
- [ ] Only theme files were modified for styling changes
- [ ] Defensive programming practices are implemented
- [ ] Language is plain and direct throughout
- [ ] Change impact has been assessed
- [ ] Debug logging is comprehensive and consistent
- [ ] Code style matches existing conventions
- [ ] Code is delivered as plain text inline

## Failure Recovery

If any guideline is violated:

1. **Stop immediately** and identify the violation
2. **Explain** which rule was broken and why
3. **Provide** the correct approach following guidelines
4. **Restart** the implementation using proper methodology
5. **Verify** compliance before final delivery

## Summary

These guidelines exist to ensure code quality, system stability, and development efficiency. They are not suggestions but mandatory requirements for all AI-assisted development work. Following these rules prevents bugs, maintains consistency, and protects the integrity of the codebase.

**Remember: When in doubt, ask for clarification rather than making assumptions.**


==== TEXT FILE: ./AllEndpoints.json ====
Size: 83 bytes
Last Modified: Wed, Jun  4, 2025  9:06:57 AM
----------------------------------------
{
  "GetCustomers": "/Account/GetAccounts",
  "GetDevices": "/Device/GetDevices"
}



==== PHP FILE: ./auth.php ====
Size: 210 bytes
Last Modified: Thu, Jun  5, 2025  3:15:07 PM
----------------------------------------
<?php
// auth.php
function isLoggedIn() {
    return isset($_SESSION['user_id']);
}

function logout() {
    session_unset();
    session_destroy();
    header('Location: login.php');
    exit;
}
?>


==== TEXT FILE: ./collect_files.sh ====
Size: 2179 bytes
Last Modified: Thu, Jun  5, 2025  6:24:29 PM
----------------------------------------
#!/bin/bash

# Smart PHP Project File Collector
OUTPUT_FILE="php_project_contents_$(date +'%Y%m%d_%H%M%S').txt"

# Configure exclusions (add more as needed)
EXCLUDE_DIRS=("vendor" "node_modules" ".git" ".idea" "build" "dist")
EXCLUDE_EXT=("png" "jpg" "jpeg" "gif" "svg" "ico" "woff" "woff2" "ttf" "eot" "pdf" "zip" "tar.gz")

# Better text file detection
is_text_file() {
    file -b --mime-encoding "$1" | grep -qvi 'binary'
}

# Start output
{
    echo "PHP PROJECT CONTENT COLLECTION"
    echo "Generated: $(date)"
    echo "----------------------------------------"
    echo ""
    
    find . -type f | while read -r file; do
        # Skip excluded directories
        for dir in "${EXCLUDE_DIRS[@]}"; do
            if [[ "$file" == *"/$dir/"* ]]; then
                continue 2
            fi
        done
        
        # Skip excluded extensions
        extension="${file##*.}"
        for ext in "${EXCLUDE_EXT[@]}"; do
            if [[ "${extension,,}" == "${ext,,}" ]]; then
                continue 2
            fi
        done
        
        # Special handling for PHP files - always include
        if [[ "${file##*.}" == "php" ]]; then
            echo "==== PHP FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            cat "$file"
            echo -e "\n\n"
            continue
        fi
        
        # For other files, check if they're text
        if is_text_file "$file"; then
            echo "==== TEXT FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            head -c 100000 "$file"  # Show first 100KB
            echo -e "\n\n"
        else
            echo "==== BINARY FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "[Binary content not displayed]"
            echo -e "\n"
        fi
    done
} > "$OUTPUT_FILE"

echo "Collection complete! Output saved to $OUTPUT_FILE"


==== PHP FILE: ./config.php ====
Size: 492 bytes
Last Modified: Wed, Jun  4, 2025  3:39:09 PM
----------------------------------------
<?php
// Load environment variables
function load_env($file) {
    $env_file = BASE_PATH . $file;
    if (!file_exists($env_file)) {
        die("Environment file not found: $env_file");
    }
    $lines = file($env_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
        if (strpos($line, '=') !== false) {
            list($key, $value) = explode('=', $line, 2);
            putenv("$key=$value");
        }
    }
}
load_env('.env');
?>


==== PHP FILE: ./create_module.php ====
Size: 1464 bytes
Last Modified: Wed, Jun  4, 2025  5:12:29 PM
----------------------------------------
<?php
define('BASE_PATH', dirname(__FILE__) . DIRECTORY_SEPARATOR);
require_once BASE_PATH . 'db.php';

if ($argc < 2) die("Usage: php create_module.php <json_config_file>\n");

$config = json_decode(file_get_contents($argv[1]), true);
if (!$config) die("Invalid JSON config\n");

$module_name = $config['name'];
$permission = $config['permission'];
$description = $config['description'];

// Create module file
$module_content = <<<PHP
<?php
if (!has_permission('$permission')) {
    echo "<p class='error'>Access denied.</p>";
    exit;
}
?>
<h2>$description 📊</h2>
<p>Module content goes here...</p>
PHP;
file_put_contents(BASE_PATH . "modules/$module_name.php", $module_content);
if (!file_exists(BASE_PATH . "modules/$module_name.php")) die("Failed to create module file\n");

// Update setup.php
$setup_content = file_get_contents(BASE_PATH . "setup.php");
$setup_content .= "\nexecute_query(\$db, \"INSERT IGNORE INTO permissions (name) VALUES ('$permission')\");";
file_put_contents(BASE_PATH . "setup.php", $setup_content);

// Update index.php
$index_content = file_get_contents(BASE_PATH . "index.php");
$index_content = preg_replace('/\$modules = \[\s*(.*?)\];/s', "\$modules = [\n        '$module_name' => '$permission',\n        $1];", $index_content);
file_put_contents(BASE_PATH . "index.php", $index_content);

echo "Module $module_name created successfully. Run setup.php to apply database changes.\n";
?>


==== PHP FILE: ./db.php ====
Size: 1806 bytes
Last Modified: Thu, Jun  5, 2025  3:49:36 PM
----------------------------------------
<?php
// db.php
function load_env($path) {
    $env = [];
    $env_file = $path . '/.env';
    error_log("Attempting to load .env file from: $env_file");
    if (file_exists($env_file)) {
        $lines = file($env_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            $line = trim($line);
            if ($line && strpos($line, '=') !== false && !str_starts_with($line, '#')) {
                [$key, $value] = array_map('trim', explode('=', $line, 2));
                $env[$key] = $value;
                error_log("Loaded env variable: $key=" . ($key === 'DB_PASS' ? '****' : $value));
            }
        }
    } else {
        error_log("No .env file found at $env_file.");
    }
    return $env;
}

// Initialize database connection
function connect_db() {
    $dir = __DIR__;
    error_log("Base directory for .env load: $dir");
    $env = load_env($dir);
    $host = $env['DB_HOST'] ?? 'localhost';
    $user = $env['DB_USER'] ?? '';
    $pass = $env['DB_PASS'] ?? '';
    $dbname = $env['DB_NAME'] ?? '';

    error_log("Database connection attempt: host=$host, user=$user, dbname=$dbname");
    if (empty($user) || empty($pass) || empty($dbname)) {
        error_log("Missing database credentials: DB_USER=$user, DB_PASS=****, DB_NAME=$dbname");
        return null;
    }

    $mysqli = new mysqli($host, $user, $pass, $dbname);
    if ($mysqli->connect_error) {
        error_log("Database connection failed: " . $mysqli->connect_error);
        return null;
    }
    error_log("Database connection successful.");
    return $mysqli;
}

// Set global $db on include
global $db;
$db = connect_db();

if ($db === null) {
    error_log("Database connection not established in db.php.");
}
?>


==== PHP FILE: ./functions.php ====
Size: 2274 bytes
Last Modified: Thu, Jun  5, 2025  6:00:58 PM
----------------------------------------
<?php
require_once BASE_PATH . 'db.php';

function get_permissions_for_role($role_id) {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_permissions_for_role.");
        return [];
    }
    $stmt = $db->prepare("SELECT p.name FROM permissions p JOIN role_permissions rp ON p.id = rp.permission_id WHERE rp.role_id = ?");
    $stmt->bind_param('i', $role_id);
    $stmt->execute();
    $result = $stmt->get_result();
    $permissions = [];
    while ($row = $result->fetch_assoc()) {
        $permissions[] = $row['name'];
    }
    return $permissions;
}

function get_user_permissions($user_id) {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_user_permissions.");
        return [];
    }
    if (!isset($_SESSION['role'])) {
        error_log("No role set in session for user_id: $user_id");
        return [];
    }

    $permissions = [];
    $role_name = $_SESSION['role'];

    // Get role ID based on role name
    $stmt = $db->prepare("SELECT id FROM roles WHERE name = ?");
    $stmt->bind_param('s', $role_name);
    $stmt->execute();
    $result = $stmt->get_result();
    $role = $result->fetch_assoc();

    if ($role) {
        $role_id = $role['id'];
        // Get permissions from the user's role
        $permissions = get_permissions_for_role($role_id);
    } else {
        error_log("Role not found: $role_name");
    }

    // Get custom permissions assigned directly to the user
    $stmt = $db->prepare("SELECT p.name FROM permissions p JOIN user_permissions up ON p.id = up.permission_id WHERE up.user_id = ?");
    $stmt->bind_param('i', $user_id);
    $stmt->execute();
    $result = $stmt->get_result();
    while ($row = $result->fetch_assoc()) {
        $permissions[] = $row['name'];
    }

    return array_unique($permissions); // Remove duplicates
}

function has_permission($permission) {
    if (!isset($_SESSION['user_id'])) {
        return false;
    }
    $user_permissions = $_SESSION['permissions'] ?? get_user_permissions($_SESSION['user_id']);
    $_SESSION['permissions'] = $user_permissions; // Cache permissions in session
    return in_array($permission, $user_permissions);
}
?>


==== PHP FILE: ./index.php ====
Size: 12680 bytes
Last Modified: Fri, Jun  6, 2025 10:41:13 AM
----------------------------------------
<?php
// index.php
// ────────────────────────────────────────────────────────────────────────────────
// Enable PHP error display
ini_set('display_errors', 1);
error_reporting(E_ALL);

session_start();

// Define BASE_PATH
define('BASE_PATH', __DIR__ . '/');

// Include dependencies
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'functions.php';
include_once BASE_PATH . 'auth.php';

// Check if setup is needed - modified to always check tables
$setup_needed = false;
$required_tables = ['modules', 'users', 'roles', 'permissions', 'role_permissions', 'user_roles', 'user_permissions'];
foreach ($required_tables as $table) {
    $result = $db->query("SHOW TABLES LIKE '$table'");
    if ($result->num_rows == 0) {
        $setup_needed = true;
        break;
    }
}

if ($setup_needed || isset($_GET['reset'])) {
    require_once BASE_PATH . 'setup.php';
    header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'));
    exit;
}

// Set default session data for testing
if (!isset($_SESSION['user_id'])) {
    $result = $db->query("SELECT id FROM users WHERE username = 'admin'");
    $user = $result->fetch_assoc();
    $_SESSION['user_id'] = $user ? $user['id'] : 1;
    $_SESSION['role'] = 'Admin';
    $_SESSION['username'] = 'admin';
    // Match status.php expectation
}

// Handle role change
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['role'])) {
    $_SESSION['role'] = $_POST['role'];
    if (isset($_SESSION['user_id'])) {
        $_SESSION['permissions'] = get_user_permissions($_SESSION['user_id']);
        error_log("Permissions for user_id " . $_SESSION['user_id'] . ": " . json_encode($_SESSION['permissions']));
    }
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit;
}

$role = $_SESSION['role'] ?? 'Guest';
if (isset($_SESSION['user_id'])) {
    $_SESSION['permissions'] = get_user_permissions($_SESSION['user_id']);
    error_log("Initial permissions for user_id " . $_SESSION['user_id'] . ": " . json_encode($_SESSION['permissions']));
}

$modules = [
    'customers'   => ['label' => 'Customers',   'icon' => 'users',         'permission' => 'view_customers'],
    'devices'     => ['label' => 'Devices',     'icon' => 'device-mobile', 'permission' => 'view_devices'],
    'permissions' => ['label' => 'Permissions', 'icon' => 'lock-closed',   'permission' => 'manage_permissions'],
    'devtools'    => ['label' => 'DevTools',    'icon' => 'wrench',        'permission' => 'view_devtools']
];
$accessible_modules = [];
foreach ($modules as $module => $key) {
    if (has_permission($key['permission'])) {
        $accessible_modules[$module] = $key;
    }
}

$current_module  = isset($_GET['module']) && isset($accessible_modules[$_GET['module']]) ? $_GET['module'] : null;
$dashboard_file  = BASE_PATH . 'modules/dashboard.php';
$module_file     = $current_module ? BASE_PATH . "modules/{$current_module}.php" : null;
if (!$db) {
    error_log("Database connection is null.");
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MPSM Control Panel</title>
    <link rel="stylesheet" href="<?php echo BASE_PATH; ?>styles-fallback.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'teal-custom': '#00cec9',
                        'cyan-neon':   '#00FFFF',
                        'magenta-neon':'#FF00FF',
                        'yellow-neon': '#FFFF00',
                        'black-smoke': '#1C2526'
                    }
                }
            }
        };
    </script>
    <style>
        /* ── Original “.glass”, “.menu-item”, and “.floating-module” rules ───────── */
        .glass {
            background: rgba(28, 37, 38, 0.8);
            border: none;
            box-shadow: 0 8px 25px rgba(0,0,0,0.7), inset 0 0 15px rgba(0,255,255,0.4);
        }
        .menu-item {
            background: linear-gradient(145deg, rgba(255,255,255,0.1), rgba(255,255,255,0.03));
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }
        .menu-item.active {
            background: linear-gradient(145deg, rgba(255,255,0,0.3), rgba(255,255,0,0.15));
        }

        /* ── ADJUSTED: `.floating-module` for proper "floating" within its parent container ── */
        .floating-module {
            position: absolute; /* Keeps it positioned relative to its parent (module-area-80) */
            top: 1rem;    /* Aligns with padding of its parent */
            left: 1rem;   /* Aligns with padding of its parent */
            right: 1rem;  /* Aligns with padding of its parent */
            bottom: 1rem; /* Aligns with padding of its parent */
            z-index: 20; /* Ensures it's above other module content */
            background: rgba(28,37,38,0.9);
            border-radius: 8px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.7), inset 0 0 15px rgba(255,255,0,0.2);
            padding: 1.5rem; /* Internal padding for the module's content */
            overflow-y: auto;
            box-sizing: border-box; /* Crucial for including padding in total size */
        }

        @supports not (backdrop-filter: blur(10px)) {
            .glass {
                background: rgba(28,37,38,1);
            }
        }

        /* ── Styles for the overall main content area ── */
        main.glass {
            position: relative; /* Crucial for positioning absolute children (if any directly inside main) */
            overflow-x: hidden; /* Prevent horizontal scroll from padding etc. */
            box-sizing: border-box;
            /* overflow-y: auto; removed from here; let inner divs handle their own scrolling */
        }

        /* ── NEW: Styles for the 20% static dashboard section ── */
        .dashboard-static-20 {
            height: 20%; /* Takes 20% of its flex parent's height */
            flex-shrink: 0; /* Prevents it from shrinking */
            overflow-y: auto; /* Allows internal scrolling if content overflows */
        }

        /* ── NEW: Styles for the 80% dynamic module section ── */
        .module-area-80 {
            /* flex-1 from Tailwind will make it take remaining height */
            position: relative; /* Crucial for `.floating-module` to position itself correctly within this area */
            overflow-y: auto; /* Allows internal scrolling for module content */
        }
    </style>
</head>
<body class="bg-black-smoke text-white min-h-screen font-sans flex flex-col">
    <header class="glass p-4 fixed w-full top-0 z-10 h-16">
        <div class="flex justify-between items-center">
            <h1 class="text-2xl text-cyan-neon">MPSM Control Panel</h1>
            <div>
                <form method="POST" action="" class="inline">
                    <select name="role" onchange="this.form.submit()" class="bg-black-smoke text-white p-2 rounded">
                        <?php foreach (['Developer', 'Admin', 'Service', 'Sales', 'Guest'] as $r): ?>
                            <option value="<?php echo $r; ?>" <?php echo $role === $r ? 'selected' : ''; ?>>
                                <?php echo $r; ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </form>
                <a href="logout.php" class="ml-4 text-magenta-neon">Logout</a>
                <a href="?reset"    class="ml-4 text-yellow-neon">Reset Setup</a>
            </div>
        </div>
    </header>

    <div class="flex flex-1 mt-16">
        <aside class="glass w-64 p-4 fixed h-[calc(100vh-64px)] top-16 overflow-y-auto flex flex-col">
            <nav class="flex-1">
                <ul class="space-y-2">
                    <?php foreach ($accessible_modules as $module => $key): ?>
                        <li>
                            <a href="?module=<?php echo $module; ?>"
                               class="flex items-center p-2 text-gray-300 rounded-lg menu-item <?php echo $current_module === $module ? 'active text-yellow-neon' : ''; ?>">
                                <?php
                                    $icons = [
                                        'users'        => '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.5a4 4 0 110 5.4M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.2M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>',
                                        'device-mobile'=> '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 01-2-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path></svg>',
                                        'lock-closed'  => '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 11c1 3.5-1 6.8-2.8 9.5m-3.4-2l.1-.1A14 14 0 008 11a4 4 0 118 0c0 1-.1 2-.2 3m-2.1 6.8A22 22 0 0015 17m3.8 1.1c.7-2.2 1-4.7 1-7A8 8 0 008 4M3 15.4c.6-1.3 1-2.8 2-4.4m1 3.4a3 3 0 013-3m0 3.4a3 3 0 00-3 3m3-3v6m-1.5-1.5a1.5 1.5 0 113 0m-3 0a1.5 1.5 0 00-1.5-1.5m1.5 4.5v-3m0 3h-3"></path></svg>',
                                        'wrench'       => '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.3 4.3c.4-1.8 2.9-1.8 3.4 0a1.7 1.7 0 002.6 1.1c1.5-2.3 3-.8 2.4 2.4a1.7 1.7 0 001 2.5c1.8.4 1.8 2.9 0 3.4a1.7 1.7 0 00-1.1 2.6c-.9 1.5-.8 3.4-2.4 2.4a1.7 1.7 0 00-2.6 1c-.4 1.8-2.9 1.8-3.4 0a1.7 1.7 0 00-2.6-1c-1.5.9-3.3-.8-2.4-2.4-1-1-2.6 0-2 1 0c-1.4 1.8 1.9 2.4-2.3-.9-.5-2.3 0-2.6-1.1z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>'
                                    ];
                                echo $icons[$key['icon']] ?? '';
                                ?>
                                <span><?php echo $key['label']; ?></span>
                            </a>
                        </li>
                    <?php endforeach; ?>
                </ul>
            </nav>
            <div class="mt-auto">
                <?php include_once BASE_PATH . 'modules/status.php'; ?>
            </div>
        </aside>

        <main class="glass flex-1 p-4 ml-64 flex flex-col">
            <div class="dashboard-static-20 glass p-4 mb-4"> <h2 class="text-xl text-teal-custom mb-4">MPSM Overview</h2>
                <p>This is a static summary section for key dashboard information. It occupies 20% of the available vertical space in the main content area.</p>
                <?php
                    // Example: if you had a separate file for just static overview, e.g., modules/dashboard_overview.php
                    // include BASE_PATH . 'modules/dashboard_overview.php';
                ?>
            </div>

            <div class="module-area-80 relative flex-1 p-4">
                <?php
                // This section loads the dynamic module content or the default dashboard
                // (which likely contains your floating module).
                if ($current_module && file_exists($module_file)) {
                    include $module_file; // Loads specific module content (e.g., customers, devices)
                } else {
                    // Default to the original dashboard content if no module is selected
                    // This is where your original 'dashboard.php' and its floating module should now appear.
                    if (file_exists($dashboard_file)) {
                        include $dashboard_file;
                    } else {
                        echo '<p class="text-yellow-neon">Welcome to the MPSM Control Panel. Select a module from the sidebar, or view the default dashboard.</p>';
                    }
                }
                ?>
            </div>
        </main>
    </div>
</body>
</html>


==== PHP FILE: ./login.php ====
Size: 3258 bytes
Last Modified: Wed, Jun  4, 2025  9:46:05 PM
----------------------------------------
<?php
// Enable PHP error display
ini_set('display_errors', 1);
error_reporting(E_ALL);

session_start();

// Define BASE_PATH
define('BASE_PATH', __DIR__ . '/');

// Include dependencies
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'auth.php';

// Handle login form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = trim($_POST['username'] ?? '');
    $password = trim($_POST['password'] ?? '');

    try {
        if (empty($username) || empty($password)) {
            throw new Exception('Username and password are required.');
        }

        // Mock authentication (replace with your actual logic)
        if ($username === 'admin' && $password === 'password') {
            $_SESSION['user_id'] = 1;
            $_SESSION['role'] = 'Admin';
            header('Location: index.php');
            exit;
        } else {
            throw new Exception('Invalid credentials.');
        }
    } catch (Exception $e) {
        $error = $e->getMessage();
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - MPSM Control Panel</title>
    <!-- Tailwind CSS CDN with fallback -->
    <link rel="stylesheet" href="<?php echo BASE_PATH; ?>styles-fallback.css" type="text/css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'teal-custom': '#00cec9',
                    },
                },
            },
        };
    </script>
    <style>
        /* Fallback for backdrop-filter and offline */
        .glass {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        @supports not (backdrop-filter: blur(10px)) {
            .glass {
                background: rgba(52, 73, 94, 0.5);
            }
        }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen font-sans flex items-center justify-center">
    <div class="glass p-6 rounded-lg border border-gray-800 w-full max-w-md">
        <h2 class="text-2xl text-teal-custom mb-4 text-center">Login to MPSM 🎛️</h2>
        <?php if (isset($error)): ?>
            <p class="text-red-500 mb-4 text-center"><?php echo htmlspecialchars($error); ?></p>
        <?php endif; ?>
        <form method="POST" action="" class="space-y-4">
            <div>
                <label class="block text-gray-300">Username:</label>
                <input type="text" name="username" required class="w-full p-2 bg-gray-800 text-white border border-gray-700 rounded">
            </div>
            <div>
                <label class="block text-gray-300">Password:</label>
                <input type="password" name="password" required class="w-full p-2 bg-gray-800 text-white border border-gray-700 rounded">
            </div>
            <button type="submit" class="w-full bg-gray-800 text-teal-custom p-2 rounded border border-gray-700 hover:bg-gray-700">Login 🔐</button>
        </form>
    </div>
</body>
</html>


==== PHP FILE: ./logout.php ====
Size: 86 bytes
Last Modified: Wed, Jun  4, 2025  3:34:27 PM
----------------------------------------
<?php
session_start();
session_destroy();
header('Location: login.php');
exit;
?>


==== PHP FILE: ./modules/customers.php ====
Size: 88 bytes
Last Modified: Wed, Jun  4, 2025  2:52:27 PM
----------------------------------------
<?php
?>
<h1>Customers</h1>
<p>Customer management module. Placeholder content.</p>



==== PHP FILE: ./modules/dashboard.php ====
Size: 128 bytes
Last Modified: Wed, Jun  4, 2025  2:51:44 PM
----------------------------------------
<?php
?>
<h1>Dashboard</h1>
<p>Welcome to the dashboard. This is the default module visible to all authenticated users.</p>



==== PHP FILE: ./modules/devices.php ====
Size: 86 bytes
Last Modified: Wed, Jun  4, 2025  2:53:01 PM
----------------------------------------
<?php
?>
<h1>Devices</h1>
<p>Device management module. Placeholder content.</p>




==== PHP FILE: ./modules/devtools.php ====
Size: 8349 bytes
Last Modified: Fri, Jun  6, 2025  8:51:01 AM
----------------------------------------
<?php
// modules/devtools.php
// ────────────────────────────────────────────────────────────────────────────────
// “DevTools → Style Customizer” Module
// This file is included inside <div class="floating-module">…</div> by index.php.
// We assume that Neumorphic :root variables already exist in styles.css.

if (! defined('BASE_PATH') && php_sapi_name() !== 'cli') {
    // (Optional) permission check here, e.g. only sysop may access DevTools
    // if (! user_is_sysop()) { die('Forbidden'); }
}

// We render everything inside a “glass” card for consistency.
?>
<div class="glass p-4 border border-gray-800 rounded space-y-4">
    <h2 class="text-2xl text-[var(--cyan-neon)] mb-4 flex items-center">
        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 
                     11-18 0 9 9 0 0118 0z"></path>
        </svg>
        DevTools
    </h2>
    <p class="mb-4">Developer settings and tools for MPSM.</p>

    <!-- ── Style Customizer Form ──────────────────────────────────────────────────── -->
    <div class="devtools-container">
        <h2>Style Customizer</h2>

        <!-- 1) Neumorphic Depth -->
        <div class="devtools-row">
            <label for="depthRange">Neumorphic Depth (<span id="depthValue">8</span>px):</label>
            <input
                type="range"
                id="depthRange"
                min="0"
                max="20"
                step="1"
                value="8"
                oninput="updateVar('--depth', this.value + 'px'); document.getElementById('depthValue').innerText = this.value;"
            >
            <span class="devtools-value" id="depthValueDisplay">8</span>
        </div>

        <!-- 2) Glass Opacity -->
        <div class="devtools-row">
            <label for="glassOpacityRange">Glass Opacity (0.1 – 1.0):</label>
            <input
                type="range"
                id="glassOpacityRange"
                min="0.1"
                max="1.0"
                step="0.1"
                value="0.8"
                oninput="updateVar('--glass-opacity', this.value); document.getElementById('opacityValue').innerText = this.value;"
            >
            <span class="devtools-value" id="opacityValue">0.8</span>
        </div>

        <!-- 3) Cyan Neon Color -->
        <div class="devtools-row">
            <label for="cyanColorPicker">Cyan Neon:</label>
            <input
                type="color"
                id="cyanColorPicker"
                value="#00FFFF"
                onchange="updateVar('--cyan-neon', this.value);"
            >
        </div>

        <!-- 4) Magenta Neon Color -->
        <div class="devtools-row">
            <label for="magentaColorPicker">Magenta Neon:</label>
            <input
                type="color"
                id="magentaColorPicker"
                value="#FF00FF"
                onchange="updateVar('--magenta-neon', this.value);"
            >
        </div>

        <!-- 5) Yellow Neon Color -->
        <div class="devtools-row">
            <label for="yellowColorPicker">Yellow Neon:</label>
            <input
                type="color"
                id="yellowColorPicker"
                value="#FFFF00"
                onchange="updateVar('--yellow-neon', this.value);"
            >
        </div>

        <!-- 6) Background Dark (optional) -->
        <div class="devtools-row">
            <label for="bgDarkPicker">Background Dark:</label>
            <input
                type="color"
                id="bgDarkPicker"
                value="#1E272E"
                onchange="updateVar('--bg-dark', this.value);"
            >
        </div>

        <!-- 7) Foreground Dark (cards/panels) (optional) -->
        <div class="devtools-row">
            <label for="fgDarkPicker">Foreground Dark:</label>
            <input
                type="color"
                id="fgDarkPicker"
                value="#2D3436"
                onchange="updateVar('--fg-dark', this.value);"
            >
        </div>

        <!-- Reset button -->
        <button class="devtools-reset" onclick="resetDefaults()">
            Reset to Default
        </button>
    </div>

    <!-- ── JavaScript for Live CSS Variable Updates ───────────────────────────────── -->
    <script>
    (function() {
      // Default values must match :root defaults in styles.css
      const defaults = {
        '--depth'        : '8px',
        '--glass-opacity': '0.8',
        '--cyan-neon'    : '#00FFFF',
        '--magenta-neon' : '#FF00FF',
        '--yellow-neon'  : '#FFFF00',
        '--bg-dark'      : '#1E272E',
        '--fg-dark'      : '#2D3436'
      };

      // Update a CSS variable on :root
      window.updateVar = function(varName, value) {
        document.documentElement.style.setProperty(varName, value);
      };

      // Reset all variables to defaults
      window.resetDefaults = function() {
        for (const [varName, val] of Object.entries(defaults)) {
          document.documentElement.style.setProperty(varName, val);
        }
        // Sync input values with defaults
        document.getElementById('depthRange').value      = parseInt(defaults['--depth']);
        document.getElementById('depthValue').innerText = parseInt(defaults['--depth']);
        document.getElementById('glassOpacityRange').value = defaults['--glass-opacity'];
        document.getElementById('opacityValue').innerText = defaults['--glass-opacity'];

        document.getElementById('cyanColorPicker').value    = defaults['--cyan-neon'];
        document.getElementById('magentaColorPicker').value = defaults['--magenta-neon'];
        document.getElementById('yellowColorPicker').value  = defaults['--yellow-neon'];
        document.getElementById('bgDarkPicker').value       = defaults['--bg-dark'];
        document.getElementById('fgDarkPicker').value       = defaults['--fg-dark'];
      };

      // On load, initialize inputs based on current CSS variables (or defaults)
      document.addEventListener('DOMContentLoaded', function() {
        for (const [varName, val] of Object.entries(defaults)) {
          const current = getComputedStyle(document.documentElement).getPropertyValue(varName).trim();
          document.documentElement.style.setProperty(varName, current || val);
        }
        // Sync sliders/color inputs with whichever values are set in :root
        const depth   = getComputedStyle(document.documentElement).getPropertyValue('--depth').replace('px','').trim();
        document.getElementById('depthRange').value      = depth;
        document.getElementById('depthValue').innerText = depth;

        const opacity = getComputedStyle(document.documentElement).getPropertyValue('--glass-opacity').trim();
        document.getElementById('glassOpacityRange').value = opacity;
        document.getElementById('opacityValue').innerText   = opacity;

        document.getElementById('cyanColorPicker').value    = getComputedStyle(document.documentElement).getPropertyValue('--cyan-neon').trim();
        document.getElementById('magentaColorPicker').value = getComputedStyle(document.documentElement).getPropertyValue('--magenta-neon').trim();
        document.getElementById('yellowColorPicker').value  = getComputedStyle(document.documentElement).getPropertyValue('--yellow-neon').trim();
        document.getElementById('bgDarkPicker').value       = getComputedStyle(document.documentElement).getPropertyValue('--bg-dark').trim();
        document.getElementById('fgDarkPicker').value       = getComputedStyle(document.documentElement).getPropertyValue('--fg-dark').trim();
      });
    })();
    </script>
</div>



==== PHP FILE: ./modules/permissions.php ====
Size: 22774 bytes
Last Modified: Thu, Jun  5, 2025  4:45:51 PM
----------------------------------------
<?php
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'functions.php';

if (!has_permission('manage_permissions')) {
    echo "<p class='text-red-500 p-4'>Access denied.</p>";
    exit;
}

function get_active_modules() {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_active_modules.");
        return [];
    }
    $result = $db->query("SELECT name FROM modules WHERE active = 1");
    $modules = [];
    while ($row = $result->fetch_assoc()) {
        $modules[] = $row['name'];
    }
    return $modules;
}

$active_modules = get_active_modules();
$action = $_GET['action'] ?? 'list';

// Handle POST requests
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if (isset($_POST['add_role'])) {
            $role_name = trim($_POST['role_name']);
            if (empty($role_name)) {
                throw new Exception("Role name is required.");
            }
            $stmt = $db->prepare("INSERT INTO roles (name) VALUES (?)");
            $stmt->bind_param('s', $role_name);
            $stmt->execute();
            $stmt->close();
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['add_permission'])) {
            $perm_name = trim($_POST['permission_name']);
            if (empty($perm_name)) {
                throw new Exception("Permission name is required.");
            }
            $stmt = $db->prepare("INSERT INTO permissions (name) VALUES (?)");
            $stmt->bind_param('s', $perm_name);
            $stmt->execute();
            $stmt->close();
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['add_user'])) {
            $username = trim($_POST['username']);
            $password = trim($_POST['password']);
            if (empty($username) || empty($password)) {
                throw new Exception("Username and password are required.");
            }
            $stmt = $db->prepare("INSERT INTO users (username, password, role_id) VALUES (?, ?, 1)");
            $stmt->bind_param('ss', $username, $password);
            $stmt->execute();
            $user_id = $db->insert_id;
            if (isset($_POST['roles']) && is_array($_POST['roles'])) {
                foreach ($_POST['roles'] as $role_id) {
                    $stmt = $db->prepare("INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)");
                    $stmt->bind_param('ii', $user_id, $role_id);
                    $stmt->execute();
                    $stmt->close();
                }
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['assign_permissions'])) {
            $role_id = filter_input(INPUT_POST, 'role_id', FILTER_VALIDATE_INT);
            if ($role_id === false || $role_id <= 0) {
                throw new Exception("Invalid role ID.");
            }
            $permissions = $_POST['permissions'] ?? [];
            $permissions = array_filter($permissions, function($id) {
                return filter_var($id, FILTER_VALIDATE_INT) && $id > 0;
            });
            $db->query("DELETE FROM role_permissions WHERE role_id = $role_id");
            foreach ($permissions as $perm_id) {
                $stmt = $db->prepare("INSERT INTO role_permissions (role_id, permission_id) VALUES (?, ?)");
                $stmt->bind_param('ii', $role_id, $perm_id);
                $stmt->execute();
                $stmt->close();
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['assign_user_roles'])) {
            $user_id = filter_input(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);
            if ($user_id === false || $user_id <= 0) {
                throw new Exception("Invalid user ID.");
            }
            $roles = $_POST['roles'] ?? [];
            $roles = array_filter($roles, function($id) {
                return filter_var($id, FILTER_VALIDATE_INT) && $id > 0;
            });
            $db->query("DELETE FROM user_roles WHERE user_id = $user_id");
            foreach ($roles as $role_id) {
                $stmt = $db->prepare("INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)");
                $stmt->bind_param('ii', $user_id, $role_id);
                $stmt->execute();
                $stmt->close();
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['assign_custom_permissions'])) {
            $user_id = filter_input(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);
            if ($user_id === false || $user_id <= 0) {
                throw new Exception("Invalid user ID.");
            }
            $permissions = $_POST['custom_permissions'] ?? [];
            $permissions = array_filter($permissions, function($id) {
                return filter_var($id, FILTER_VALIDATE_INT) && $id > 0;
            });
            $db->query("DELETE FROM user_permissions WHERE user_id = $user_id");
            foreach ($permissions as $perm_id) {
                $stmt = $db->prepare("INSERT INTO user_permissions (user_id, permission_id) VALUES (?, ?)");
                $stmt->bind_param('ii', $user_id, $perm_id);
                $stmt->execute();
                $stmt->close();
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        }
    } catch (Exception $e) {
        echo "<p class='text-red-500 p-4'>Error: " . htmlspecialchars($e->getMessage()) . "</p>";
    }
}

// Fetch data
$result = $db->query("SELECT * FROM roles");
$roles = $result->fetch_all(MYSQLI_ASSOC);

$result = $db->query("SELECT * FROM permissions");
$permissions = $result->fetch_all(MYSQLI_ASSOC);

// Map permissions to modules
$module_permissions = [
    'view_dashboard' => 'dashboard',
    'view_customers' => 'customers',
    'view_devices' => 'devices',
    'manage_permissions' => 'permissions',
    'view_devtools' => 'devtools'
];

// Filter permissions based on active modules
$available_permissions = array_filter($permissions, function($perm) use ($active_modules, $module_permissions) {
    $perm_name = $perm['name'];
    return in_array($module_permissions[$perm_name] ?? $perm_name, $active_modules);
}, ARRAY_FILTER_USE_BOTH);

$result = $db->query("SELECT * FROM users");
$users = $result->fetch_all(MYSQLI_ASSOC);

$result = $db->query("SELECT ur.user_id, r.name AS role_name FROM user_roles ur JOIN roles r ON ur.role_id = r.id");
$user_roles = [];
while ($row = $result->fetch_assoc()) {
    $user_roles[$row['user_id']][] = $row['role_name'];
}

$result = $db->query("SELECT up.user_id, p.name AS perm_name FROM user_permissions up JOIN permissions p ON up.permission_id = p.id");
$user_custom_perms = [];
while ($row = $result->fetch_assoc()) {
    $user_custom_perms[$row['user_id']][] = $row['perm_name'];
}
?>

<div class="space-y-6">
    <h1 class="text-2xl text-cyan-neon">Permissions Management</h1>
    <nav class="flex space-x-4 text-gray-300">
        <a href="index.php?module=permissions&action=list" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path></svg>
            List
        </a>
        <a href="index.php?module=permissions&action=add_role" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
            Add Role
        </a>
        <a href="index.php?module=permissions&action=add_permission" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
            Add Permission
        </a>
        <a href="index.php?module=permissions&action=add_user" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
            Add User
        </a>
    </nav>

    <?php if ($action === 'list'): ?>
        <h2 class="text-xl text-cyan-neon">Roles and Permissions</h2>
        <?php if (empty($roles)): ?>
            <p class="text-gray-300">No roles found. Add a role to get started.</p>
        <?php else: ?>
            <div class="glass p-4">
                <table class="w-full text-gray-300">
                    <thead>
                        <tr class="border-b border-gray-700">
                            <th class="py-2 px-4 text-left">Role</th>
                            <th class="py-2 px-4 text-left">Permissions</th>
                            <th class="py-2 px-4 text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($roles as $role): ?>
                            <tr class="border-b border-gray-800">
                                <td class="py-2 px-4"><?php echo htmlspecialchars($role['name']); ?></td>
                                <td class="py-2 px-4">
                                    <?php
                                    $role_id = (int)$role['id'];
                                    $result = $db->query("SELECT p.name FROM permissions p JOIN role_permissions rp ON p.id = rp.permission_id WHERE rp.role_id = $role_id");
                                    $role_perms = $result->fetch_all(MYSQLI_ASSOC);
                                    $filtered_perms = array_filter($role_perms, function($p) use ($active_modules, $module_permissions) {
                                        return in_array($module_permissions[$p['name']] ?? $p['name'], $active_modules);
                                    });
                                    echo htmlspecialchars(implode(', ', array_column($filtered_perms, 'name')) ?: 'None');
                                    ?>
                                </td>
                                <td class="py-2 px-4">
                                    <a href="index.php?module=permissions&action=edit&role_id=<?php echo $role['id']; ?>" class="text-yellow-neon flex items-center">
                                        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                        Edit
                                    </a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
        <?php endif; ?>

        <h2 class="text-xl text-cyan-neon mt-6">Users and Permissions</h2>
        <?php if (empty($users)): ?>
            <p class="text-gray-300">No users found. Add a user to get started.</p>
        <?php else: ?>
            <div class="glass p-4">
                <table class="w-full text-gray-300">
                    <thead>
                        <tr class="border-b border-gray-700">
                            <th class="py-2 px-4 text-left">Username</th>
                            <th class="py-2 px-4 text-left">Roles</th>
                            <th class="py-2 px-4 text-left">Custom Permissions</th>
                            <th class="py-2 px-4 text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($users as $user): ?>
                            <tr class="border-b border-gray-800">
                                <td class="py-2 px-4"><?php echo htmlspecialchars($user['username']); ?></td>
                                <td class="py-2 px-4"><?php echo htmlspecialchars(implode(', ', $user_roles[$user['id']] ?? ['None'])); ?></td>
                                <td class="py-2 px-4"><?php echo htmlspecialchars(implode(', ', $user_custom_perms[$user['id']] ?? ['None'])); ?></td>
                                <td class="py-2 px-4">
                                    <a href="index.php?module=permissions&action=edit_user&user_id=<?php echo $user['id']; ?>" class="text-yellow-neon flex items-center">
                                        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                        Edit
                                    </a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
        <?php endif; ?>
    <?php elseif ($action === 'add_role'): ?>
        <h2 class="text-xl text-cyan-neon">Add New Role</h2>
        <form method="POST" class="glass p-4 space-y-4">
            <div>
                <label class="block text-gray-300 mb-1">Role Name:</label>
                <input type="text" name="role_name" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <button type="submit" name="add_role" class="bg-teal-custom text-black px-4 py-2 rounded">Add Role</button>
        </form>
    <?php elseif ($action === 'add_permission'): ?>
        <h2 class="text-xl text-cyan-neon">Add New Permission</h2>
        <form method="POST" class="glass p-4 space-y-4">
            <div>
                <label class="block text-gray-300 mb-1">Permission Name:</label>
                <input type="text" name="permission_name" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <button type="submit" name="add_permission" class="bg-teal-custom text-black px-4 py-2 rounded">Add Permission</button>
        </form>
    <?php elseif ($action === 'add_user'): ?>
        <h2 class="text-xl text-cyan-neon">Add New User</h2>
        <form method="POST" class="glass p-4 space-y-4">
            <div>
                <label class="block text-gray-300 mb-1">Username:</label>
                <input type="text" name="username" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <div>
                <label class="block text-gray-300 mb-1">Password:</label>
                <input type="password" name="password" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <div>
                <label class="block text-gray-300 mb-1">Roles:</label>
                <select name="roles[]" multiple size="5" class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
                    <?php foreach ($roles as $role): ?>
                        <option value="<?php echo $role['id']; ?>"><?php echo htmlspecialchars($role['name']); ?></option>
                    <?php endforeach; ?>
                </select>
            </div>
            <button type="submit" name="add_user" class="bg-teal-custom text-black px-4 py-2 rounded">Add User</button>
        </form>
    <?php elseif ($action === 'edit' && isset($_GET['role_id'])): ?>
        <?php
        $role_id = filter_input(INPUT_GET, 'role_id', FILTER_VALIDATE_INT);
        if ($role_id === false || $role_id <= 0): ?>
            <p class='text-red-500 p-4'>Invalid role ID.</p>
        <?php else: ?>
            <?php
            $result = $db->query("SELECT * FROM roles WHERE id = $role_id");
            if ($result === false): ?>
                <p class='text-red-500 p-4'>Error fetching role: <?php echo htmlspecialchars($db->error); ?></p>
            <?php else: ?>
                <?php
                $role = $result->fetch_assoc();
                if (!$role): ?>
                    <p class='text-red-500 p-4'>Role not found.</p>
                <?php else: ?>
                    <?php
                    $result = $db->query("SELECT permission_id FROM role_permissions WHERE role_id = $role_id");
                    $role_perms = array_column($result->fetch_all(MYSQLI_ASSOC), 'permission_id');
                    ?>
                    <h2 class="text-xl text-cyan-neon">Edit Permissions for <?php echo htmlspecialchars($role['name']); ?></h2>
                    <form method="POST" class="glass p-4 space-y-4">
                        <input type="hidden" name="role_id" value="<?php echo $role_id; ?>">
                        <div>
                            <label class="block text-gray-300 mb-1">Permissions:</label>
                            <?php if (empty($available_permissions)): ?>
                                <p class="text-gray-300">No permissions available based on active modules. Activate modules in DevTools.</p>
                            <?php else: ?>
                                <div class="space-y-2">
                                    <?php foreach ($available_permissions as $perm): ?>
                                        <label class="flex items-center">
                                            <input type="checkbox" name="permissions[]" value="<?php echo $perm['id']; ?>" <?php echo in_array($perm['id'], $role_perms) ? 'checked' : ''; ?> class="mr-2">
                                            <span><?php echo htmlspecialchars($perm['name']); ?> (Module: <?php echo $module_permissions[$perm['name']] ?? 'N/A'; ?>)</span>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                                <button type="submit" name="assign_permissions" class="bg-teal-custom text-black px-4 py-2 rounded">Save</button>
                            <?php endif; ?>
                        </div>
                    </form>
                <?php endif; ?>
            <?php endif; ?>
        <?php endif; ?>
    <?php elseif ($action === 'edit_user' && isset($_GET['user_id'])): ?>
        <?php
        $user_id = filter_input(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);
        if ($user_id === false || $user_id <= 0): ?>
            <p class='text-red-500 p-4'>Invalid user ID.</p>
        <?php else: ?>
            <?php
            $result = $db->query("SELECT * FROM users WHERE id = $user_id");
            if ($result === false): ?>
                <p class='text-red-500 p-4'>Error fetching user: <?php echo htmlspecialchars($db->error); ?></p>
            <?php else: ?>
                <?php
                $user = $result->fetch_assoc();
                if (!$user): ?>
                    <p class='text-red-500 p-4'>User not found.</p>
                <?php else: ?>
                    <?php
                    $result = $db->query("SELECT role_id FROM user_roles WHERE user_id = $user_id");
                    $user_role_ids = array_column($result->fetch_all(MYSQLI_ASSOC), 'role_id');
                    $result = $db->query("SELECT permission_id FROM user_permissions WHERE user_id = $user_id");
                    $user_perm_ids = array_column($result->fetch_all(MYSQLI_ASSOC), 'permission_id');
                    ?>
                    <h2 class="text-xl text-cyan-neon">Edit <?php echo htmlspecialchars($user['username']); ?></h2>
                    <form method="POST" class="glass p-4 space-y-4">
                        <input type="hidden" name="user_id" value="<?php echo $user_id; ?>">
                        <div>
                            <label class="block text-gray-300 mb-1">Roles:</label>
                            <select name="roles[]" multiple size="5" class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
                                <?php foreach ($roles as $role): ?>
                                    <option value="<?php echo $role['id']; ?>" <?php echo in_array($role['id'], $user_role_ids) ? 'selected' : ''; ?>>
                                        <?php echo htmlspecialchars($role['name']); ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div>
                            <label class="block text-gray-300 mb-1">Custom Permissions:</label>
                            <select name="custom_permissions[]" multiple size="5" class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
                                <?php foreach ($available_permissions as $perm): ?>
                                    <option value="<?php echo $perm['id']; ?>" <?php echo in_array($perm['id'], $user_perm_ids) ? 'selected' : ''; ?>>
                                        <?php echo htmlspecialchars($perm['name']); ?> (Module: <?php echo $module_permissions[$perm['name']] ?? 'N/A'; ?>)
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div class="space-x-2">
                            <button type="submit" name="assign_user_roles" class="bg-teal-custom text-black px-4 py-2 rounded">Save Roles</button>
                            <button type="submit" name="assign_custom_permissions" class="bg-teal-custom text-black px-4 py-2 rounded">Save Custom Permissions</button>
                        </div>
                    </form>
                <?php endif; ?>
            <?php endif; ?>
        <?php endif; ?>
    <?php endif; ?>
</div>


==== PHP FILE: ./modules/status.php ====
Size: 1508 bytes
Last Modified: Thu, Jun  5, 2025  6:01:27 PM
----------------------------------------
<?php
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'functions.php';

$username = $_SESSION['username'] ?? 'Unknown';
$db_status = $db ? 'Connected' : 'Disconnected';

?>

<div class="glass p-4 border border-gray-800 rounded space-y-2">
    <h3 class="text-xl text-cyan-neon flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Status
    </h3>
    <p class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Username: <?php echo htmlspecialchars($username); ?>
    </p>
    <p class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke="<?php echo $db ? '#10B981' : '#EF4444'; ?>">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 0v10"></path>
        </svg>
        Database: <?php echo $db_status; ?>
    </p>
</div>


==== TEXT FILE: ./php_project_contents_20250606_104426.txt ====
Size: 70911 bytes
Last Modified: Fri, Jun  6, 2025 10:44:32 AM
----------------------------------------
PHP PROJECT CONTENT COLLECTION
Generated: Fri, Jun  6, 2025 10:44:26 AM
----------------------------------------

==== BINARY FILE: ./.DS_Store ====
Size: 6148 bytes
Last Modified: Wed, Jun  4, 2025  7:24:52 AM
[Binary content not displayed]


==== TEXT FILE: ./.env ====
Size: 329 bytes
Last Modified: Wed, Jun  4, 2025 10:21:00 AM
----------------------------------------
CLIENT_ID=9AT9j4UoU2BgLEqmiYCz
CLIENT_SECRET=9gTbAKBCZe1ftYQbLbq9
USERNAME=dashboard
PASSWORD=d@$hpa$$2024
SCOPE=account
TOKEN_URL=https://api.abassetmanagement.com/api3/token
BASE_URL=https://api.abassetmanagement.com/api3/
DEALER_CODE=NY06AGDWUQ
DB_HOST=localhost
DB_NAME=resolut7_mpsm
DB_USER=resolut7_mpsm
DB_PASS=MP$M_Nr0lr



==== TEXT FILE: ./.github/workflows/deploy.yml ====
Size: 2014 bytes
Last Modified: Wed, Jun  4, 2025 12:11:49 PM
----------------------------------------
name: Simple FTP Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version in version.txt
        id: bump_version
        run: |
          # If version.txt doesn't exist, initialize it to 0.0.0.0
          if [ ! -f version.txt ]; then
            echo "0.0.0.0" > version.txt
          fi

          # Read the four segments
          IFS='.' read -r MAJOR MINOR PATCH BUILD < version.txt

          # Increment only the BUILD segment
          BUILD=$((BUILD + 1))

          # Recompose the version string
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}.${BUILD}"

          # Write it back
          echo "$NEW_VERSION" > version.txt

          # Expose as an output if needed
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # (Optional) If you want to commit the bumped version back to the repo,
      # uncomment the next two steps. Make sure to include “[skip ci]” in your commit message
      # so that this push does NOT retrigger this same workflow.

      # - name: Commit bumped version.txt
      #   if: always()
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git add version.txt
      #     git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]" || echo "No changes to commit."

      # - name: Push version bump
      #   if: always()
      #   run: |
      #     git push

      - name: FTP Upload (clean mirror)
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host:     ${{ secrets.FTP_SERVER }}
          user:     ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "./"
          remoteDir: ${{ secrets.REMOTE_DIR }}
          options:  "--delete"



==== TEXT FILE: ./AI_INSTRUCTIONS.md ====
Size: 8062 bytes
Last Modified: Fri, Jun  6, 2025  9:09:05 AM
----------------------------------------
# AI Development Guidelines - README

## Overview

This document establishes strict development guidelines for AI assistance with this codebase. These rules exist to prevent bugs, maintain code quality, and ensure system stability. **All rules must be followed without exception.**

## Core Development Rules

### 1. Complete File Delivery
- **Always return full, complete source files in their entirety**
- Never provide partial snippets or abbreviated code
- Include all imports, dependencies, and complete function implementations
- Ensure files are immediately usable without reconstruction

### 2. Comprehensive Documentation
- **Include line-by-line comments for every function, logic branch, and change**
- Explain the purpose and flow of each code section
- Document why decisions were made, not just what the code does
- Comment all conditional logic, loops, and complex operations
- Explain any business logic or domain-specific rules

### 3. Security and Secrets Management
- **Never hardcode secrets, API keys, passwords, or credentials**
- Use the `.env` file for all sensitive configuration values
- Reference environment variables using proper syntax for the language
- If a required secret is missing from `.env`, halt and prompt for it
- Never commit or expose sensitive data in code comments or logs

### 4. Dependency Management
- **Do not introduce or install external dependencies** (Composer packages, npm modules, etc.)
- Work only with existing dependencies in the project
- If new dependencies are required, explicitly request authorization first
- Document any dependency requirements clearly

### 5. Logic Fidelity
- **Follow the exact logic in provided "working" files** (e.g., working_auth.txt, working.php)
- Do not deviate from proven working implementations
- Never guess or assume how something should work
- If working examples exist, use them as the definitive reference
- Preserve existing algorithms and business rules exactly

### 6. API Integration Standards
- **Use schemas in AllEndpoints.json verbatim**
- Copy HTTP methods, field names, and payload structures exactly
- Never assume API behavior or modify endpoint specifications
- Validate all API calls against the provided schemas
- If schema information is missing, request it before proceeding

### 7. Code Organization
- **Modularize shared code effectively**
- Centralize reusable functions, CSS, and templates
- Eliminate code duplication across files
- Create utility functions for common operations
- Maintain consistent file organization and naming

### 8. Requirement Clarification
- **Ask concise clarifying questions when requirements are unclear**
- Never proceed with ambiguous or incomplete specifications
- Confirm understanding before implementing changes
- Request specific examples when behavior is uncertain

### 9. Styling and Theme Management
- **When styling is requested, modify only theme files**
- Leave existing layout and markup structures untouched
- Do not alter HTML structure unless specifically instructed
- Preserve responsive design and accessibility features
- Test styling changes across different screen sizes

### 10. Defensive Programming
- **Write code defensively with comprehensive error handling**
- Validate all inputs before processing
- Check for null values and handle edge cases
- Implement proper error handling and recovery
- Never allow runtime exceptions to crash the application
- Use try-catch blocks appropriately

### 11. Communication Standards
- **Never use em-dashes, emojis, or weak AI-speak**
- Keep all comments and messages plain and direct
- Use clear, professional language in documentation
- Avoid unnecessary verbosity or flowery language
- Write for clarity and maintainability

### 12. Change Impact Assessment
- **Analyze potential breaking changes before implementation**
- Run through existing test cases when available
- Document exactly why changes are safe if they appear risky
- Identify components that might be affected by modifications
- Preserve backward compatibility unless explicitly told otherwise

### 13. Debug and Logging Standards
- **Log debug information consistently and comprehensively**
- Include timestamps in all log entries
- Provide sufficient context for debugging issues
- Include error details and stack traces when appropriate
- Use existing debug panels or logging utilities
- Never leave debug code in production without proper controls

### 14. Code Style Consistency
- **Respect existing codebase conventions exactly**
- Mirror current indentation style (spaces vs tabs, width)
- Follow established naming conventions for variables, functions, and classes
- Match existing file structure and organization patterns
- Preserve comment styles and formatting

### 15. Code Delivery Format
- **Do not package or link to zip files**
- Deliver all code inline as plain text
- Ensure code is immediately copy-pasteable
- Format code properly for readability
- Include proper syntax highlighting markers when applicable

## Enforcement Guardrails

### Rule Violation Protocol
- **If any proposed edit conflicts with the above rules, reject it immediately**
- Clearly explain which specific rule was violated
- Provide the correct approach that follows the guidelines
- Do not proceed until the conflict is resolved

### Missing Dependencies Protocol
- **If secrets or schemas are missing, halt execution immediately**
- Prompt specifically for the missing file or configuration value
- Do not attempt to guess or substitute missing information
- Wait for explicit provision of required resources

### API Uncertainty Protocol
- **If unsure about API behavior, flag the uncertainty**
- Never guess API specifications or behavior
- Request clarification or additional documentation
- Prefer asking questions over making assumptions

### Critical Component Protection
- **Always confirm before touching critical layout or logic components**
- Identify components that could affect system stability
- Get explicit approval for changes to core functionality
- Document the scope and impact of proposed changes

### Code Quality Assurance
- **Any code that fails to compile or test must be rolled back**
- Annotate the failure reason clearly before resubmission
- Fix compilation errors before delivering code
- Test basic functionality when possible
- Ensure code meets language syntax requirements

## Implementation Checklist

Before delivering any code changes, verify:

- [ ] All files are complete and immediately usable
- [ ] Every function and logic branch is commented
- [ ] No secrets or credentials are hardcoded
- [ ] No unauthorized dependencies were added
- [ ] Existing working logic was preserved exactly
- [ ] API calls match AllEndpoints.json specifications
- [ ] Shared code is properly modularized
- [ ] All requirements are clearly understood
- [ ] Only theme files were modified for styling changes
- [ ] Defensive programming practices are implemented
- [ ] Language is plain and direct throughout
- [ ] Change impact has been assessed
- [ ] Debug logging is comprehensive and consistent
- [ ] Code style matches existing conventions
- [ ] Code is delivered as plain text inline

## Failure Recovery

If any guideline is violated:

1. **Stop immediately** and identify the violation
2. **Explain** which rule was broken and why
3. **Provide** the correct approach following guidelines
4. **Restart** the implementation using proper methodology
5. **Verify** compliance before final delivery

## Summary

These guidelines exist to ensure code quality, system stability, and development efficiency. They are not suggestions but mandatory requirements for all AI-assisted development work. Following these rules prevents bugs, maintains consistency, and protects the integrity of the codebase.

**Remember: When in doubt, ask for clarification rather than making assumptions.**


==== TEXT FILE: ./AllEndpoints.json ====
Size: 83 bytes
Last Modified: Wed, Jun  4, 2025  9:06:57 AM
----------------------------------------
{
  "GetCustomers": "/Account/GetAccounts",
  "GetDevices": "/Device/GetDevices"
}



==== PHP FILE: ./auth.php ====
Size: 210 bytes
Last Modified: Thu, Jun  5, 2025  3:15:07 PM
----------------------------------------
<?php
// auth.php
function isLoggedIn() {
    return isset($_SESSION['user_id']);
}

function logout() {
    session_unset();
    session_destroy();
    header('Location: login.php');
    exit;
}
?>


==== TEXT FILE: ./collect_files.sh ====
Size: 2179 bytes
Last Modified: Thu, Jun  5, 2025  6:24:29 PM
----------------------------------------
#!/bin/bash

# Smart PHP Project File Collector
OUTPUT_FILE="php_project_contents_$(date +'%Y%m%d_%H%M%S').txt"

# Configure exclusions (add more as needed)
EXCLUDE_DIRS=("vendor" "node_modules" ".git" ".idea" "build" "dist")
EXCLUDE_EXT=("png" "jpg" "jpeg" "gif" "svg" "ico" "woff" "woff2" "ttf" "eot" "pdf" "zip" "tar.gz")

# Better text file detection
is_text_file() {
    file -b --mime-encoding "$1" | grep -qvi 'binary'
}

# Start output
{
    echo "PHP PROJECT CONTENT COLLECTION"
    echo "Generated: $(date)"
    echo "----------------------------------------"
    echo ""
    
    find . -type f | while read -r file; do
        # Skip excluded directories
        for dir in "${EXCLUDE_DIRS[@]}"; do
            if [[ "$file" == *"/$dir/"* ]]; then
                continue 2
            fi
        done
        
        # Skip excluded extensions
        extension="${file##*.}"
        for ext in "${EXCLUDE_EXT[@]}"; do
            if [[ "${extension,,}" == "${ext,,}" ]]; then
                continue 2
            fi
        done
        
        # Special handling for PHP files - always include
        if [[ "${file##*.}" == "php" ]]; then
            echo "==== PHP FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            cat "$file"
            echo -e "\n\n"
            continue
        fi
        
        # For other files, check if they're text
        if is_text_file "$file"; then
            echo "==== TEXT FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            head -c 100000 "$file"  # Show first 100KB
            echo -e "\n\n"
        else
            echo "==== BINARY FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "[Binary content not displayed]"
            echo -e "\n"
        fi
    done
} > "$OUTPUT_FILE"

echo "Collection complete! Output saved to $OUTPUT_FILE"


==== PHP FILE: ./config.php ====
Size: 492 bytes
Last Modified: Wed, Jun  4, 2025  3:39:09 PM
----------------------------------------
<?php
// Load environment variables
function load_env($file) {
    $env_file = BASE_PATH . $file;
    if (!file_exists($env_file)) {
        die("Environment file not found: $env_file");
    }
    $lines = file($env_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
        if (strpos($line, '=') !== false) {
            list($key, $value) = explode('=', $line, 2);
            putenv("$key=$value");
        }
    }
}
load_env('.env');
?>


==== PHP FILE: ./create_module.php ====
Size: 1464 bytes
Last Modified: Wed, Jun  4, 2025  5:12:29 PM
----------------------------------------
<?php
define('BASE_PATH', dirname(__FILE__) . DIRECTORY_SEPARATOR);
require_once BASE_PATH . 'db.php';

if ($argc < 2) die("Usage: php create_module.php <json_config_file>\n");

$config = json_decode(file_get_contents($argv[1]), true);
if (!$config) die("Invalid JSON config\n");

$module_name = $config['name'];
$permission = $config['permission'];
$description = $config['description'];

// Create module file
$module_content = <<<PHP
<?php
if (!has_permission('$permission')) {
    echo "<p class='error'>Access denied.</p>";
    exit;
}
?>
<h2>$description 📊</h2>
<p>Module content goes here...</p>
PHP;
file_put_contents(BASE_PATH . "modules/$module_name.php", $module_content);
if (!file_exists(BASE_PATH . "modules/$module_name.php")) die("Failed to create module file\n");

// Update setup.php
$setup_content = file_get_contents(BASE_PATH . "setup.php");
$setup_content .= "\nexecute_query(\$db, \"INSERT IGNORE INTO permissions (name) VALUES ('$permission')\");";
file_put_contents(BASE_PATH . "setup.php", $setup_content);

// Update index.php
$index_content = file_get_contents(BASE_PATH . "index.php");
$index_content = preg_replace('/\$modules = \[\s*(.*?)\];/s', "\$modules = [\n        '$module_name' => '$permission',\n        $1];", $index_content);
file_put_contents(BASE_PATH . "index.php", $index_content);

echo "Module $module_name created successfully. Run setup.php to apply database changes.\n";
?>


==== PHP FILE: ./db.php ====
Size: 1806 bytes
Last Modified: Thu, Jun  5, 2025  3:49:36 PM
----------------------------------------
<?php
// db.php
function load_env($path) {
    $env = [];
    $env_file = $path . '/.env';
    error_log("Attempting to load .env file from: $env_file");
    if (file_exists($env_file)) {
        $lines = file($env_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            $line = trim($line);
            if ($line && strpos($line, '=') !== false && !str_starts_with($line, '#')) {
                [$key, $value] = array_map('trim', explode('=', $line, 2));
                $env[$key] = $value;
                error_log("Loaded env variable: $key=" . ($key === 'DB_PASS' ? '****' : $value));
            }
        }
    } else {
        error_log("No .env file found at $env_file.");
    }
    return $env;
}

// Initialize database connection
function connect_db() {
    $dir = __DIR__;
    error_log("Base directory for .env load: $dir");
    $env = load_env($dir);
    $host = $env['DB_HOST'] ?? 'localhost';
    $user = $env['DB_USER'] ?? '';
    $pass = $env['DB_PASS'] ?? '';
    $dbname = $env['DB_NAME'] ?? '';

    error_log("Database connection attempt: host=$host, user=$user, dbname=$dbname");
    if (empty($user) || empty($pass) || empty($dbname)) {
        error_log("Missing database credentials: DB_USER=$user, DB_PASS=****, DB_NAME=$dbname");
        return null;
    }

    $mysqli = new mysqli($host, $user, $pass, $dbname);
    if ($mysqli->connect_error) {
        error_log("Database connection failed: " . $mysqli->connect_error);
        return null;
    }
    error_log("Database connection successful.");
    return $mysqli;
}

// Set global $db on include
global $db;
$db = connect_db();

if ($db === null) {
    error_log("Database connection not established in db.php.");
}
?>


==== PHP FILE: ./functions.php ====
Size: 2274 bytes
Last Modified: Thu, Jun  5, 2025  6:00:58 PM
----------------------------------------
<?php
require_once BASE_PATH . 'db.php';

function get_permissions_for_role($role_id) {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_permissions_for_role.");
        return [];
    }
    $stmt = $db->prepare("SELECT p.name FROM permissions p JOIN role_permissions rp ON p.id = rp.permission_id WHERE rp.role_id = ?");
    $stmt->bind_param('i', $role_id);
    $stmt->execute();
    $result = $stmt->get_result();
    $permissions = [];
    while ($row = $result->fetch_assoc()) {
        $permissions[] = $row['name'];
    }
    return $permissions;
}

function get_user_permissions($user_id) {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_user_permissions.");
        return [];
    }
    if (!isset($_SESSION['role'])) {
        error_log("No role set in session for user_id: $user_id");
        return [];
    }

    $permissions = [];
    $role_name = $_SESSION['role'];

    // Get role ID based on role name
    $stmt = $db->prepare("SELECT id FROM roles WHERE name = ?");
    $stmt->bind_param('s', $role_name);
    $stmt->execute();
    $result = $stmt->get_result();
    $role = $result->fetch_assoc();

    if ($role) {
        $role_id = $role['id'];
        // Get permissions from the user's role
        $permissions = get_permissions_for_role($role_id);
    } else {
        error_log("Role not found: $role_name");
    }

    // Get custom permissions assigned directly to the user
    $stmt = $db->prepare("SELECT p.name FROM permissions p JOIN user_permissions up ON p.id = up.permission_id WHERE up.user_id = ?");
    $stmt->bind_param('i', $user_id);
    $stmt->execute();
    $result = $stmt->get_result();
    while ($row = $result->fetch_assoc()) {
        $permissions[] = $row['name'];
    }

    return array_unique($permissions); // Remove duplicates
}

function has_permission($permission) {
    if (!isset($_SESSION['user_id'])) {
        return false;
    }
    $user_permissions = $_SESSION['permissions'] ?? get_user_permissions($_SESSION['user_id']);
    $_SESSION['permissions'] = $user_permissions; // Cache permissions in session
    return in_array($permission, $user_permissions);
}
?>


==== PHP FILE: ./index.php ====
Size: 12680 bytes
Last Modified: Fri, Jun  6, 2025 10:41:13 AM
----------------------------------------
<?php
// index.php
// ────────────────────────────────────────────────────────────────────────────────
// Enable PHP error display
ini_set('display_errors', 1);
error_reporting(E_ALL);

session_start();

// Define BASE_PATH
define('BASE_PATH', __DIR__ . '/');

// Include dependencies
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'functions.php';
include_once BASE_PATH . 'auth.php';

// Check if setup is needed - modified to always check tables
$setup_needed = false;
$required_tables = ['modules', 'users', 'roles', 'permissions', 'role_permissions', 'user_roles', 'user_permissions'];
foreach ($required_tables as $table) {
    $result = $db->query("SHOW TABLES LIKE '$table'");
    if ($result->num_rows == 0) {
        $setup_needed = true;
        break;
    }
}

if ($setup_needed || isset($_GET['reset'])) {
    require_once BASE_PATH . 'setup.php';
    header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'));
    exit;
}

// Set default session data for testing
if (!isset($_SESSION['user_id'])) {
    $result = $db->query("SELECT id FROM users WHERE username = 'admin'");
    $user = $result->fetch_assoc();
    $_SESSION['user_id'] = $user ? $user['id'] : 1;
    $_SESSION['role'] = 'Admin';
    $_SESSION['username'] = 'admin';
    // Match status.php expectation
}

// Handle role change
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['role'])) {
    $_SESSION['role'] = $_POST['role'];
    if (isset($_SESSION['user_id'])) {
        $_SESSION['permissions'] = get_user_permissions($_SESSION['user_id']);
        error_log("Permissions for user_id " . $_SESSION['user_id'] . ": " . json_encode($_SESSION['permissions']));
    }
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit;
}

$role = $_SESSION['role'] ?? 'Guest';
if (isset($_SESSION['user_id'])) {
    $_SESSION['permissions'] = get_user_permissions($_SESSION['user_id']);
    error_log("Initial permissions for user_id " . $_SESSION['user_id'] . ": " . json_encode($_SESSION['permissions']));
}

$modules = [
    'customers'   => ['label' => 'Customers',   'icon' => 'users',         'permission' => 'view_customers'],
    'devices'     => ['label' => 'Devices',     'icon' => 'device-mobile', 'permission' => 'view_devices'],
    'permissions' => ['label' => 'Permissions', 'icon' => 'lock-closed',   'permission' => 'manage_permissions'],
    'devtools'    => ['label' => 'DevTools',    'icon' => 'wrench',        'permission' => 'view_devtools']
];
$accessible_modules = [];
foreach ($modules as $module => $key) {
    if (has_permission($key['permission'])) {
        $accessible_modules[$module] = $key;
    }
}

$current_module  = isset($_GET['module']) && isset($accessible_modules[$_GET['module']]) ? $_GET['module'] : null;
$dashboard_file  = BASE_PATH . 'modules/dashboard.php';
$module_file     = $current_module ? BASE_PATH . "modules/{$current_module}.php" : null;
if (!$db) {
    error_log("Database connection is null.");
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MPSM Control Panel</title>
    <link rel="stylesheet" href="<?php echo BASE_PATH; ?>styles-fallback.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'teal-custom': '#00cec9',
                        'cyan-neon':   '#00FFFF',
                        'magenta-neon':'#FF00FF',
                        'yellow-neon': '#FFFF00',
                        'black-smoke': '#1C2526'
                    }
                }
            }
        };
    </script>
    <style>
        /* ── Original “.glass”, “.menu-item”, and “.floating-module” rules ───────── */
        .glass {
            background: rgba(28, 37, 38, 0.8);
            border: none;
            box-shadow: 0 8px 25px rgba(0,0,0,0.7), inset 0 0 15px rgba(0,255,255,0.4);
        }
        .menu-item {
            background: linear-gradient(145deg, rgba(255,255,255,0.1), rgba(255,255,255,0.03));
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }
        .menu-item.active {
            background: linear-gradient(145deg, rgba(255,255,0,0.3), rgba(255,255,0,0.15));
        }

        /* ── ADJUSTED: `.floating-module` for proper "floating" within its parent container ── */
        .floating-module {
            position: absolute; /* Keeps it positioned relative to its parent (module-area-80) */
            top: 1rem;    /* Aligns with padding of its parent */
            left: 1rem;   /* Aligns with padding of its parent */
            right: 1rem;  /* Aligns with padding of its parent */
            bottom: 1rem; /* Aligns with padding of its parent */
            z-index: 20; /* Ensures it's above other module content */
            background: rgba(28,37,38,0.9);
            border-radius: 8px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.7), inset 0 0 15px rgba(255,255,0,0.2);
            padding: 1.5rem; /* Internal padding for the module's content */
            overflow-y: auto;
            box-sizing: border-box; /* Crucial for including padding in total size */
        }

        @supports not (backdrop-filter: blur(10px)) {
            .glass {
                background: rgba(28,37,38,1);
            }
        }

        /* ── Styles for the overall main content area ── */
        main.glass {
            position: relative; /* Crucial for positioning absolute children (if any directly inside main) */
            overflow-x: hidden; /* Prevent horizontal scroll from padding etc. */
            box-sizing: border-box;
            /* overflow-y: auto; removed from here; let inner divs handle their own scrolling */
        }

        /* ── NEW: Styles for the 20% static dashboard section ── */
        .dashboard-static-20 {
            height: 20%; /* Takes 20% of its flex parent's height */
            flex-shrink: 0; /* Prevents it from shrinking */
            overflow-y: auto; /* Allows internal scrolling if content overflows */
        }

        /* ── NEW: Styles for the 80% dynamic module section ── */
        .module-area-80 {
            /* flex-1 from Tailwind will make it take remaining height */
            position: relative; /* Crucial for `.floating-module` to position itself correctly within this area */
            overflow-y: auto; /* Allows internal scrolling for module content */
        }
    </style>
</head>
<body class="bg-black-smoke text-white min-h-screen font-sans flex flex-col">
    <header class="glass p-4 fixed w-full top-0 z-10 h-16">
        <div class="flex justify-between items-center">
            <h1 class="text-2xl text-cyan-neon">MPSM Control Panel</h1>
            <div>
                <form method="POST" action="" class="inline">
                    <select name="role" onchange="this.form.submit()" class="bg-black-smoke text-white p-2 rounded">
                        <?php foreach (['Developer', 'Admin', 'Service', 'Sales', 'Guest'] as $r): ?>
                            <option value="<?php echo $r; ?>" <?php echo $role === $r ? 'selected' : ''; ?>>
                                <?php echo $r; ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </form>
                <a href="logout.php" class="ml-4 text-magenta-neon">Logout</a>
                <a href="?reset"    class="ml-4 text-yellow-neon">Reset Setup</a>
            </div>
        </div>
    </header>

    <div class="flex flex-1 mt-16">
        <aside class="glass w-64 p-4 fixed h-[calc(100vh-64px)] top-16 overflow-y-auto flex flex-col">
            <nav class="flex-1">
                <ul class="space-y-2">
                    <?php foreach ($accessible_modules as $module => $key): ?>
                        <li>
                            <a href="?module=<?php echo $module; ?>"
                               class="flex items-center p-2 text-gray-300 rounded-lg menu-item <?php echo $current_module === $module ? 'active text-yellow-neon' : ''; ?>">
                                <?php
                                    $icons = [
                                        'users'        => '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.5a4 4 0 110 5.4M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.2M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>',
                                        'device-mobile'=> '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 01-2-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path></svg>',
                                        'lock-closed'  => '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 11c1 3.5-1 6.8-2.8 9.5m-3.4-2l.1-.1A14 14 0 008 11a4 4 0 118 0c0 1-.1 2-.2 3m-2.1 6.8A22 22 0 0015 17m3.8 1.1c.7-2.2 1-4.7 1-7A8 8 0 008 4M3 15.4c.6-1.3 1-2.8 2-4.4m1 3.4a3 3 0 013-3m0 3.4a3 3 0 00-3 3m3-3v6m-1.5-1.5a1.5 1.5 0 113 0m-3 0a1.5 1.5 0 00-1.5-1.5m1.5 4.5v-3m0 3h-3"></path></svg>',
                                        'wrench'       => '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.3 4.3c.4-1.8 2.9-1.8 3.4 0a1.7 1.7 0 002.6 1.1c1.5-2.3 3-.8 2.4 2.4a1.7 1.7 0 001 2.5c1.8.4 1.8 2.9 0 3.4a1.7 1.7 0 00-1.1 2.6c-.9 1.5-.8 3.4-2.4 2.4a1.7 1.7 0 00-2.6 1c-.4 1.8-2.9 1.8-3.4 0a1.7 1.7 0 00-2.6-1c-1.5.9-3.3-.8-2.4-2.4-1-1-2.6 0-2 1 0c-1.4 1.8 1.9 2.4-2.3-.9-.5-2.3 0-2.6-1.1z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>'
                                    ];
                                echo $icons[$key['icon']] ?? '';
                                ?>
                                <span><?php echo $key['label']; ?></span>
                            </a>
                        </li>
                    <?php endforeach; ?>
                </ul>
            </nav>
            <div class="mt-auto">
                <?php include_once BASE_PATH . 'modules/status.php'; ?>
            </div>
        </aside>

        <main class="glass flex-1 p-4 ml-64 flex flex-col">
            <div class="dashboard-static-20 glass p-4 mb-4"> <h2 class="text-xl text-teal-custom mb-4">MPSM Overview</h2>
                <p>This is a static summary section for key dashboard information. It occupies 20% of the available vertical space in the main content area.</p>
                <?php
                    // Example: if you had a separate file for just static overview, e.g., modules/dashboard_overview.php
                    // include BASE_PATH . 'modules/dashboard_overview.php';
                ?>
            </div>

            <div class="module-area-80 relative flex-1 p-4">
                <?php
                // This section loads the dynamic module content or the default dashboard
                // (which likely contains your floating module).
                if ($current_module && file_exists($module_file)) {
                    include $module_file; // Loads specific module content (e.g., customers, devices)
                } else {
                    // Default to the original dashboard content if no module is selected
                    // This is where your original 'dashboard.php' and its floating module should now appear.
                    if (file_exists($dashboard_file)) {
                        include $dashboard_file;
                    } else {
                        echo '<p class="text-yellow-neon">Welcome to the MPSM Control Panel. Select a module from the sidebar, or view the default dashboard.</p>';
                    }
                }
                ?>
            </div>
        </main>
    </div>
</body>
</html>


==== PHP FILE: ./login.php ====
Size: 3258 bytes
Last Modified: Wed, Jun  4, 2025  9:46:05 PM
----------------------------------------
<?php
// Enable PHP error display
ini_set('display_errors', 1);
error_reporting(E_ALL);

session_start();

// Define BASE_PATH
define('BASE_PATH', __DIR__ . '/');

// Include dependencies
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'auth.php';

// Handle login form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = trim($_POST['username'] ?? '');
    $password = trim($_POST['password'] ?? '');

    try {
        if (empty($username) || empty($password)) {
            throw new Exception('Username and password are required.');
        }

        // Mock authentication (replace with your actual logic)
        if ($username === 'admin' && $password === 'password') {
            $_SESSION['user_id'] = 1;
            $_SESSION['role'] = 'Admin';
            header('Location: index.php');
            exit;
        } else {
            throw new Exception('Invalid credentials.');
        }
    } catch (Exception $e) {
        $error = $e->getMessage();
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - MPSM Control Panel</title>
    <!-- Tailwind CSS CDN with fallback -->
    <link rel="stylesheet" href="<?php echo BASE_PATH; ?>styles-fallback.css" type="text/css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'teal-custom': '#00cec9',
                    },
                },
            },
        };
    </script>
    <style>
        /* Fallback for backdrop-filter and offline */
        .glass {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        @supports not (backdrop-filter: blur(10px)) {
            .glass {
                background: rgba(52, 73, 94, 0.5);
            }
        }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen font-sans flex items-center justify-center">
    <div class="glass p-6 rounded-lg border border-gray-800 w-full max-w-md">
        <h2 class="text-2xl text-teal-custom mb-4 text-center">Login to MPSM 🎛️</h2>
        <?php if (isset($error)): ?>
            <p class="text-red-500 mb-4 text-center"><?php echo htmlspecialchars($error); ?></p>
        <?php endif; ?>
        <form method="POST" action="" class="space-y-4">
            <div>
                <label class="block text-gray-300">Username:</label>
                <input type="text" name="username" required class="w-full p-2 bg-gray-800 text-white border border-gray-700 rounded">
            </div>
            <div>
                <label class="block text-gray-300">Password:</label>
                <input type="password" name="password" required class="w-full p-2 bg-gray-800 text-white border border-gray-700 rounded">
            </div>
            <button type="submit" class="w-full bg-gray-800 text-teal-custom p-2 rounded border border-gray-700 hover:bg-gray-700">Login 🔐</button>
        </form>
    </div>
</body>
</html>


==== PHP FILE: ./logout.php ====
Size: 86 bytes
Last Modified: Wed, Jun  4, 2025  3:34:27 PM
----------------------------------------
<?php
session_start();
session_destroy();
header('Location: login.php');
exit;
?>


==== PHP FILE: ./modules/customers.php ====
Size: 88 bytes
Last Modified: Wed, Jun  4, 2025  2:52:27 PM
----------------------------------------
<?php
?>
<h1>Customers</h1>
<p>Customer management module. Placeholder content.</p>



==== PHP FILE: ./modules/dashboard.php ====
Size: 128 bytes
Last Modified: Wed, Jun  4, 2025  2:51:44 PM
----------------------------------------
<?php
?>
<h1>Dashboard</h1>
<p>Welcome to the dashboard. This is the default module visible to all authenticated users.</p>



==== PHP FILE: ./modules/devices.php ====
Size: 86 bytes
Last Modified: Wed, Jun  4, 2025  2:53:01 PM
----------------------------------------
<?php
?>
<h1>Devices</h1>
<p>Device management module. Placeholder content.</p>




==== PHP FILE: ./modules/devtools.php ====
Size: 8349 bytes
Last Modified: Fri, Jun  6, 2025  8:51:01 AM
----------------------------------------
<?php
// modules/devtools.php
// ────────────────────────────────────────────────────────────────────────────────
// “DevTools → Style Customizer” Module
// This file is included inside <div class="floating-module">…</div> by index.php.
// We assume that Neumorphic :root variables already exist in styles.css.

if (! defined('BASE_PATH') && php_sapi_name() !== 'cli') {
    // (Optional) permission check here, e.g. only sysop may access DevTools
    // if (! user_is_sysop()) { die('Forbidden'); }
}

// We render everything inside a “glass” card for consistency.
?>
<div class="glass p-4 border border-gray-800 rounded space-y-4">
    <h2 class="text-2xl text-[var(--cyan-neon)] mb-4 flex items-center">
        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 
                     11-18 0 9 9 0 0118 0z"></path>
        </svg>
        DevTools
    </h2>
    <p class="mb-4">Developer settings and tools for MPSM.</p>

    <!-- ── Style Customizer Form ──────────────────────────────────────────────────── -->
    <div class="devtools-container">
        <h2>Style Customizer</h2>

        <!-- 1) Neumorphic Depth -->
        <div class="devtools-row">
            <label for="depthRange">Neumorphic Depth (<span id="depthValue">8</span>px):</label>
            <input
                type="range"
                id="depthRange"
                min="0"
                max="20"
                step="1"
                value="8"
                oninput="updateVar('--depth', this.value + 'px'); document.getElementById('depthValue').innerText = this.value;"
            >
            <span class="devtools-value" id="depthValueDisplay">8</span>
        </div>

        <!-- 2) Glass Opacity -->
        <div class="devtools-row">
            <label for="glassOpacityRange">Glass Opacity (0.1 – 1.0):</label>
            <input
                type="range"
                id="glassOpacityRange"
                min="0.1"
                max="1.0"
                step="0.1"
                value="0.8"
                oninput="updateVar('--glass-opacity', this.value); document.getElementById('opacityValue').innerText = this.value;"
            >
            <span class="devtools-value" id="opacityValue">0.8</span>
        </div>

        <!-- 3) Cyan Neon Color -->
        <div class="devtools-row">
            <label for="cyanColorPicker">Cyan Neon:</label>
            <input
                type="color"
                id="cyanColorPicker"
                value="#00FFFF"
                onchange="updateVar('--cyan-neon', this.value);"
            >
        </div>

        <!-- 4) Magenta Neon Color -->
        <div class="devtools-row">
            <label for="magentaColorPicker">Magenta Neon:</label>
            <input
                type="color"
                id="magentaColorPicker"
                value="#FF00FF"
                onchange="updateVar('--magenta-neon', this.value);"
            >
        </div>

        <!-- 5) Yellow Neon Color -->
        <div class="devtools-row">
            <label for="yellowColorPicker">Yellow Neon:</label>
            <input
                type="color"
                id="yellowColorPicker"
                value="#FFFF00"
                onchange="updateVar('--yellow-neon', this.value);"
            >
        </div>

        <!-- 6) Background Dark (optional) -->
        <div class="devtools-row">
            <label for="bgDarkPicker">Background Dark:</label>
            <input
                type="color"
                id="bgDarkPicker"
                value="#1E272E"
                onchange="updateVar('--bg-dark', this.value);"
            >
        </div>

        <!-- 7) Foreground Dark (cards/panels) (optional) -->
        <div class="devtools-row">
            <label for="fgDarkPicker">Foreground Dark:</label>
            <input
                type="color"
                id="fgDarkPicker"
                value="#2D3436"
                onchange="updateVar('--fg-dark', this.value);"
            >
        </div>

        <!-- Reset button -->
        <button class="devtools-reset" onclick="resetDefaults()">
            Reset to Default
        </button>
    </div>

    <!-- ── JavaScript for Live CSS Variable Updates ───────────────────────────────── -->
    <script>
    (function() {
      // Default values must match :root defaults in styles.css
      const defaults = {
        '--depth'        : '8px',
        '--glass-opacity': '0.8',
        '--cyan-neon'    : '#00FFFF',
        '--magenta-neon' : '#FF00FF',
        '--yellow-neon'  : '#FFFF00',
        '--bg-dark'      : '#1E272E',
        '--fg-dark'      : '#2D3436'
      };

      // Update a CSS variable on :root
      window.updateVar = function(varName, value) {
        document.documentElement.style.setProperty(varName, value);
      };

      // Reset all variables to defaults
      window.resetDefaults = function() {
        for (const [varName, val] of Object.entries(defaults)) {
          document.documentElement.style.setProperty(varName, val);
        }
        // Sync input values with defaults
        document.getElementById('depthRange').value      = parseInt(defaults['--depth']);
        document.getElementById('depthValue').innerText = parseInt(defaults['--depth']);
        document.getElementById('glassOpacityRange').value = defaults['--glass-opacity'];
        document.getElementById('opacityValue').innerText = defaults['--glass-opacity'];

        document.getElementById('cyanColorPicker').value    = defaults['--cyan-neon'];
        document.getElementById('magentaColorPicker').value = defaults['--magenta-neon'];
        document.getElementById('yellowColorPicker').value  = defaults['--yellow-neon'];
        document.getElementById('bgDarkPicker').value       = defaults['--bg-dark'];
        document.getElementById('fgDarkPicker').value       = defaults['--fg-dark'];
      };

      // On load, initialize inputs based on current CSS variables (or defaults)
      document.addEventListener('DOMContentLoaded', function() {
        for (const [varName, val] of Object.entries(defaults)) {
          const current = getComputedStyle(document.documentElement).getPropertyValue(varName).trim();
          document.documentElement.style.setProperty(varName, current || val);
        }
        // Sync sliders/color inputs with whichever values are set in :root
        const depth   = getComputedStyle(document.documentElement).getPropertyValue('--depth').replace('px','').trim();
        document.getElementById('depthRange').value      = depth;
        document.getElementById('depthValue').innerText = depth;

        const opacity = getComputedStyle(document.documentElement).getPropertyValue('--glass-opacity').trim();
        document.getElementById('glassOpacityRange').value = opacity;
        document.getElementById('opacityValue').innerText   = opacity;

        document.getElementById('cyanColorPicker').value    = getComputedStyle(document.documentElement).getPropertyValue('--cyan-neon').trim();
        document.getElementById('magentaColorPicker').value = getComputedStyle(document.documentElement).getPropertyValue('--magenta-neon').trim();
        document.getElementById('yellowColorPicker').value  = getComputedStyle(document.documentElement).getPropertyValue('--yellow-neon').trim();
        document.getElementById('bgDarkPicker').value       = getComputedStyle(document.documentElement).getPropertyValue('--bg-dark').trim();
        document.getElementById('fgDarkPicker').value       = getComputedStyle(document.documentElement).getPropertyValue('--fg-dark').trim();
      });
    })();
    </script>
</div>



==== PHP FILE: ./modules/permissions.php ====
Size: 22774 bytes
Last Modified: Thu, Jun  5, 2025  4:45:51 PM
----------------------------------------
<?php
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'functions.php';

if (!has_permission('manage_permissions')) {
    echo "<p class='text-red-500 p-4'>Access denied.</p>";
    exit;
}

function get_active_modules() {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_active_modules.");
        return [];
    }
    $result = $db->query("SELECT name FROM modules WHERE active = 1");
    $modules = [];
    while ($row = $result->fetch_assoc()) {
        $modules[] = $row['name'];
    }
    return $modules;
}

$active_modules = get_active_modules();
$action = $_GET['action'] ?? 'list';

// Handle POST requests
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if (isset($_POST['add_role'])) {
            $role_name = trim($_POST['role_name']);
            if (empty($role_name)) {
                throw new Exception("Role name is required.");
            }
            $stmt = $db->prepare("INSERT INTO roles (name) VALUES (?)");
            $stmt->bind_param('s', $role_name);
            $stmt->execute();
            $stmt->close();
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['add_permission'])) {
            $perm_name = trim($_POST['permission_name']);
            if (empty($perm_name)) {
                throw new Exception("Permission name is required.");
            }
            $stmt = $db->prepare("INSERT INTO permissions (name) VALUES (?)");
            $stmt->bind_param('s', $perm_name);
            $stmt->execute();
            $stmt->close();
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['add_user'])) {
            $username = trim($_POST['username']);
            $password = trim($_POST['password']);
            if (empty($username) || empty($password)) {
                throw new Exception("Username and password are required.");
            }
            $stmt = $db->prepare("INSERT INTO users (username, password, role_id) VALUES (?, ?, 1)");
            $stmt->bind_param('ss', $username, $password);
            $stmt->execute();
            $user_id = $db->insert_id;
            if (isset($_POST['roles']) && is_array($_POST['roles'])) {
                foreach ($_POST['roles'] as $role_id) {
                    $stmt = $db->prepare("INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)");
                    $stmt->bind_param('ii', $user_id, $role_id);
                    $stmt->execute();
                    $stmt->close();
                }
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['assign_permissions'])) {
            $role_id = filter_input(INPUT_POST, 'role_id', FILTER_VALIDATE_INT);
            if ($role_id === false || $role_id <= 0) {
                throw new Exception("Invalid role ID.");
            }
            $permissions = $_POST['permissions'] ?? [];
            $permissions = array_filter($permissions, function($id) {
                return filter_var($id, FILTER_VALIDATE_INT) && $id > 0;
            });
            $db->query("DELETE FROM role_permissions WHERE role_id = $role_id");
            foreach ($permissions as $perm_id) {
                $stmt = $db->prepare("INSERT INTO role_permissions (role_id, permission_id) VALUES (?, ?)");
                $stmt->bind_param('ii', $role_id, $perm_id);
                $stmt->execute();
                $stmt->close();
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['assign_user_roles'])) {
            $user_id = filter_input(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);
            if ($user_id === false || $user_id <= 0) {
                throw new Exception("Invalid user ID.");
            }
            $roles = $_POST['roles'] ?? [];
            $roles = array_filter($roles, function($id) {
                return filter_var($id, FILTER_VALIDATE_INT) && $id > 0;
            });
            $db->query("DELETE FROM user_roles WHERE user_id = $user_id");
            foreach ($roles as $role_id) {
                $stmt = $db->prepare("INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)");
                $stmt->bind_param('ii', $user_id, $role_id);
                $stmt->execute();
                $stmt->close();
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        } elseif (isset($_POST['assign_custom_permissions'])) {
            $user_id = filter_input(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);
            if ($user_id === false || $user_id <= 0) {
                throw new Exception("Invalid user ID.");
            }
            $permissions = $_POST['custom_permissions'] ?? [];
            $permissions = array_filter($permissions, function($id) {
                return filter_var($id, FILTER_VALIDATE_INT) && $id > 0;
            });
            $db->query("DELETE FROM user_permissions WHERE user_id = $user_id");
            foreach ($permissions as $perm_id) {
                $stmt = $db->prepare("INSERT INTO user_permissions (user_id, permission_id) VALUES (?, ?)");
                $stmt->bind_param('ii', $user_id, $perm_id);
                $stmt->execute();
                $stmt->close();
            }
            header("Location: index.php?module=permissions&action=list");
            exit;
        }
    } catch (Exception $e) {
        echo "<p class='text-red-500 p-4'>Error: " . htmlspecialchars($e->getMessage()) . "</p>";
    }
}

// Fetch data
$result = $db->query("SELECT * FROM roles");
$roles = $result->fetch_all(MYSQLI_ASSOC);

$result = $db->query("SELECT * FROM permissions");
$permissions = $result->fetch_all(MYSQLI_ASSOC);

// Map permissions to modules
$module_permissions = [
    'view_dashboard' => 'dashboard',
    'view_customers' => 'customers',
    'view_devices' => 'devices',
    'manage_permissions' => 'permissions',
    'view_devtools' => 'devtools'
];

// Filter permissions based on active modules
$available_permissions = array_filter($permissions, function($perm) use ($active_modules, $module_permissions) {
    $perm_name = $perm['name'];
    return in_array($module_permissions[$perm_name] ?? $perm_name, $active_modules);
}, ARRAY_FILTER_USE_BOTH);

$result = $db->query("SELECT * FROM users");
$users = $result->fetch_all(MYSQLI_ASSOC);

$result = $db->query("SELECT ur.user_id, r.name AS role_name FROM user_roles ur JOIN roles r ON ur.role_id = r.id");
$user_roles = [];
while ($row = $result->fetch_assoc()) {
    $user_roles[$row['user_id']][] = $row['role_name'];
}

$result = $db->query("SELECT up.user_id, p.name AS perm_name FROM user_permissions up JOIN permissions p ON up.permission_id = p.id");
$user_custom_perms = [];
while ($row = $result->fetch_assoc()) {
    $user_custom_perms[$row['user_id']][] = $row['perm_name'];
}
?>

<div class="space-y-6">
    <h1 class="text-2xl text-cyan-neon">Permissions Management</h1>
    <nav class="flex space-x-4 text-gray-300">
        <a href="index.php?module=permissions&action=list" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path></svg>
            List
        </a>
        <a href="index.php?module=permissions&action=add_role" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
            Add Role
        </a>
        <a href="index.php?module=permissions&action=add_permission" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
            Add Permission
        </a>
        <a href="index.php?module=permissions&action=add_user" class="flex items-center hover:text-yellow-neon">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
            Add User
        </a>
    </nav>

    <?php if ($action === 'list'): ?>
        <h2 class="text-xl text-cyan-neon">Roles and Permissions</h2>
        <?php if (empty($roles)): ?>
            <p class="text-gray-300">No roles found. Add a role to get started.</p>
        <?php else: ?>
            <div class="glass p-4">
                <table class="w-full text-gray-300">
                    <thead>
                        <tr class="border-b border-gray-700">
                            <th class="py-2 px-4 text-left">Role</th>
                            <th class="py-2 px-4 text-left">Permissions</th>
                            <th class="py-2 px-4 text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($roles as $role): ?>
                            <tr class="border-b border-gray-800">
                                <td class="py-2 px-4"><?php echo htmlspecialchars($role['name']); ?></td>
                                <td class="py-2 px-4">
                                    <?php
                                    $role_id = (int)$role['id'];
                                    $result = $db->query("SELECT p.name FROM permissions p JOIN role_permissions rp ON p.id = rp.permission_id WHERE rp.role_id = $role_id");
                                    $role_perms = $result->fetch_all(MYSQLI_ASSOC);
                                    $filtered_perms = array_filter($role_perms, function($p) use ($active_modules, $module_permissions) {
                                        return in_array($module_permissions[$p['name']] ?? $p['name'], $active_modules);
                                    });
                                    echo htmlspecialchars(implode(', ', array_column($filtered_perms, 'name')) ?: 'None');
                                    ?>
                                </td>
                                <td class="py-2 px-4">
                                    <a href="index.php?module=permissions&action=edit&role_id=<?php echo $role['id']; ?>" class="text-yellow-neon flex items-center">
                                        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                        Edit
                                    </a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
        <?php endif; ?>

        <h2 class="text-xl text-cyan-neon mt-6">Users and Permissions</h2>
        <?php if (empty($users)): ?>
            <p class="text-gray-300">No users found. Add a user to get started.</p>
        <?php else: ?>
            <div class="glass p-4">
                <table class="w-full text-gray-300">
                    <thead>
                        <tr class="border-b border-gray-700">
                            <th class="py-2 px-4 text-left">Username</th>
                            <th class="py-2 px-4 text-left">Roles</th>
                            <th class="py-2 px-4 text-left">Custom Permissions</th>
                            <th class="py-2 px-4 text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($users as $user): ?>
                            <tr class="border-b border-gray-800">
                                <td class="py-2 px-4"><?php echo htmlspecialchars($user['username']); ?></td>
                                <td class="py-2 px-4"><?php echo htmlspecialchars(implode(', ', $user_roles[$user['id']] ?? ['None'])); ?></td>
                                <td class="py-2 px-4"><?php echo htmlspecialchars(implode(', ', $user_custom_perms[$user['id']] ?? ['None'])); ?></td>
                                <td class="py-2 px-4">
                                    <a href="index.php?module=permissions&action=edit_user&user_id=<?php echo $user['id']; ?>" class="text-yellow-neon flex items-center">
                                        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                        Edit
                                    </a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
        <?php endif; ?>
    <?php elseif ($action === 'add_role'): ?>
        <h2 class="text-xl text-cyan-neon">Add New Role</h2>
        <form method="POST" class="glass p-4 space-y-4">
            <div>
                <label class="block text-gray-300 mb-1">Role Name:</label>
                <input type="text" name="role_name" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <button type="submit" name="add_role" class="bg-teal-custom text-black px-4 py-2 rounded">Add Role</button>
        </form>
    <?php elseif ($action === 'add_permission'): ?>
        <h2 class="text-xl text-cyan-neon">Add New Permission</h2>
        <form method="POST" class="glass p-4 space-y-4">
            <div>
                <label class="block text-gray-300 mb-1">Permission Name:</label>
                <input type="text" name="permission_name" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <button type="submit" name="add_permission" class="bg-teal-custom text-black px-4 py-2 rounded">Add Permission</button>
        </form>
    <?php elseif ($action === 'add_user'): ?>
        <h2 class="text-xl text-cyan-neon">Add New User</h2>
        <form method="POST" class="glass p-4 space-y-4">
            <div>
                <label class="block text-gray-300 mb-1">Username:</label>
                <input type="text" name="username" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <div>
                <label class="block text-gray-300 mb-1">Password:</label>
                <input type="password" name="password" required class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
            </div>
            <div>
                <label class="block text-gray-300 mb-1">Roles:</label>
                <select name="roles[]" multiple size="5" class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
                    <?php foreach ($roles as $role): ?>
                        <option value="<?php echo $role['id']; ?>"><?php echo htmlspecialchars($role['name']); ?></option>
                    <?php endforeach; ?>
                </select>
            </div>
            <button type="submit" name="add_user" class="bg-teal-custom text-black px-4 py-2 rounded">Add User</button>
        </form>
    <?php elseif ($action === 'edit' && isset($_GET['role_id'])): ?>
        <?php
        $role_id = filter_input(INPUT_GET, 'role_id', FILTER_VALIDATE_INT);
        if ($role_id === false || $role_id <= 0): ?>
            <p class='text-red-500 p-4'>Invalid role ID.</p>
        <?php else: ?>
            <?php
            $result = $db->query("SELECT * FROM roles WHERE id = $role_id");
            if ($result === false): ?>
                <p class='text-red-500 p-4'>Error fetching role: <?php echo htmlspecialchars($db->error); ?></p>
            <?php else: ?>
                <?php
                $role = $result->fetch_assoc();
                if (!$role): ?>
                    <p class='text-red-500 p-4'>Role not found.</p>
                <?php else: ?>
                    <?php
                    $result = $db->query("SELECT permission_id FROM role_permissions WHERE role_id = $role_id");
                    $role_perms = array_column($result->fetch_all(MYSQLI_ASSOC), 'permission_id');
                    ?>
                    <h2 class="text-xl text-cyan-neon">Edit Permissions for <?php echo htmlspecialchars($role['name']); ?></h2>
                    <form method="POST" class="glass p-4 space-y-4">
                        <input type="hidden" name="role_id" value="<?php echo $role_id; ?>">
                        <div>
                            <label class="block text-gray-300 mb-1">Permissions:</label>
                            <?php if (empty($available_permissions)): ?>
                                <p class="text-gray-300">No permissions available based on active modules. Activate modules in DevTools.</p>
                            <?php else: ?>
                                <div class="space-y-2">
                                    <?php foreach ($available_permissions as $perm): ?>
                                        <label class="flex items-center">
                                            <input type="checkbox" name="permissions[]" value="<?php echo $perm['id']; ?>" <?php echo in_array($perm['id'], $role_perms) ? 'checked' : ''; ?> class="mr-2">
                                            <span><?php echo htmlspecialchars($perm['name']); ?> (Module: <?php echo $module_permissions[$perm['name']] ?? 'N/A'; ?>)</span>
                                        </label>
                                    <?php endforeach; ?>
                                </div>
                                <button type="submit" name="assign_permissions" class="bg-teal-custom text-black px-4 py-2 rounded">Save</button>
                            <?php endif; ?>
                        </div>
                    </form>
                <?php endif; ?>
            <?php endif; ?>
        <?php endif; ?>
    <?php elseif ($action === 'edit_user' && isset($_GET['user_id'])): ?>
        <?php
        $user_id = filter_input(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);
        if ($user_id === false || $user_id <= 0): ?>
            <p class='text-red-500 p-4'>Invalid user ID.</p>
        <?php else: ?>
            <?php
            $result = $db->query("SELECT * FROM users WHERE id = $user_id");
            if ($result === false): ?>
                <p class='text-red-500 p-4'>Error fetching user: <?php echo htmlspecialchars($db->error); ?></p>
            <?php else: ?>
                <?php
                $user = $result->fetch_assoc();
                if (!$user): ?>
                    <p class='text-red-500 p-4'>User not found.</p>
                <?php else: ?>
                    <?php
                    $result = $db->query("SELECT role_id FROM user_roles WHERE user_id = $user_id");
                    $user_role_ids = array_column($result->fetch_all(MYSQLI_ASSOC), 'role_id');
                    $result = $db->query("SELECT permission_id FROM user_permissions WHERE user_id = $user_id");
                    $user_perm_ids = array_column($result->fetch_all(MYSQLI_ASSOC), 'permission_id');
                    ?>
                    <h2 class="text-xl text-cyan-neon">Edit <?php echo htmlspecialchars($user['username']); ?></h2>
                    <form method="POST" class="glass p-4 space-y-4">
                        <input type="hidden" name="user_id" value="<?php echo $user_id; ?>">
                        <div>
                            <label class="block text-gray-300 mb-1">Roles:</label>
                            <select name="roles[]" multiple size="5" class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
                                <?php foreach ($roles as $role): ?>
                                    <option value="<?php echo $role['id']; ?>" <?php echo in_array($role['id'], $user_role_ids) ? 'selected' : ''; ?>>
                                        <?php echo htmlspecialchars($role['name']); ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div>
                            <label class="block text-gray-300 mb-1">Custom Permissions:</label>
                            <select name="custom_permissions[]" multiple size="5" class="w-full bg-black-smoke text-white p-2 rounded border border-gray-700">
                                <?php foreach ($available_permissions as $perm): ?>
                                    <option value="<?php echo $perm['id']; ?>" <?php echo in_array($perm['id'], $user_perm_ids) ? 'selected' : ''; ?>>
                                        <?php echo htmlspecialchars($perm['name']); ?> (Module: <?php echo $module_permissions[$perm['name']] ?? 'N/A'; ?>)
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div class="space-x-2">
                            <button type="submit" name="assign_user_roles" class="bg-teal-custom text-black px-4 py-2 rounded">Save Roles</button>
                            <button type="submit" name="assign_custom_permissions" class="bg-teal-custom text-black px-4 py-2 rounded">Save Custom Permissions</button>
                        </div>
                    </form>
                <?php endif; ?>
            <?php endif; ?>
        <?php endif; ?>
    <?php endif; ?>
</div>


==== PHP FILE: ./modules/status.php ====
Size: 1508 bytes
Last Modified: Thu, Jun  5, 2025  6:01:27 PM
----------------------------------------
<?php
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'functions.php';

$username = $_SESSION['username'] ?? 'Unknown';
$db_status = $db ? 'Connected' : 'Disconnected';

?>

<div class="glass p-4 border border-gray-800 rounded space-y-2">
    <h3 class="text-xl text-cyan-neon flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Status
    </h3>
    <p class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Username: <?php echo htmlspecialchars($username); ?>
    </p>
    <p class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke="<?php echo $db ? '#10B981' : '#EF4444'; ?>">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 0v10"></path>
        </svg>
        Database: <?php echo $db_status; ?>
    </p>
</div>


==== TEXT FILE: ./php_project_contents_20250606_104426.txt ====
Size: 70911 bytes
Last Modified: Fri, Jun  6, 2025 10:44:32 AM
----------------------------------------
PHP PROJECT CONTENT COLLECTION
Generated: Fri, Jun  6, 2025 10:44:26 AM
----------------------------------------

==== BINARY FILE: ./.DS_Store ====
Size: 6148 bytes
Last Modified: Wed, Jun  4, 2025  7:24:52 AM
[Binary content not displayed]


==== TEXT FILE: ./.env ====
Size: 329 bytes
Last Modified: Wed, Jun  4, 2025 10:21:00 AM
----------------------------------------
CLIENT_ID=9AT9j4UoU2BgLEqmiYCz
CLIENT_SECRET=9gTbAKBCZe1ftYQbLbq9
USERNAME=dashboard
PASSWORD=d@$hpa$$2024
SCOPE=account
TOKEN_URL=https://api.abassetmanagement.com/api3/token
BASE_URL=https://api.abassetmanagement.com/api3/
DEALER_CODE=NY06AGDWUQ
DB_HOST=localhost
DB_NAME=resolut7_mpsm
DB_USER=resolut7_mpsm
DB_PASS=MP$M_Nr0lr



==== TEXT FILE: ./.github/workflows/deploy.yml ====
Size: 2014 bytes
Last Modified: Wed, Jun  4, 2025 12:11:49 PM
----------------------------------------
name: Simple FTP Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version in version.txt
        id: bump_version
        run: |
          # If version.txt doesn't exist, initialize it to 0.0.0.0
          if [ ! -f version.txt ]; then
            echo "0.0.0.0" > version.txt
          fi

          # Read the four segments
          IFS='.' read -r MAJOR MINOR PATCH BUILD < version.txt

          # Increment only the BUILD segment
          BUILD=$((BUILD + 1))

          # Recompose the version string
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}.${BUILD}"

          # Write it back
          echo "$NEW_VERSION" > version.txt

          # Expose as an output if needed
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # (Optional) If you want to commit the bumped version back to the repo,
      # uncomment the next two steps. Make sure to include “[skip ci]” in your commit message
      # so that this push does NOT retrigger this same workflow.

      # - name: Commit bumped version.txt
      #   if: always()
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git add version.txt
      #     git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]" || echo "No changes to commit."

      # - name: Push version bump
      #   if: always()
      #   run: |
      #     git push

      - name: FTP Upload (clean mirror)
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host:     ${{ secrets.FTP_SERVER }}
          user:     ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "./"
          remoteDir: ${{ secrets.REMOTE_DIR }}
          options:  "--delete"



==== TEXT FILE: ./AI_INSTRUCTIONS.md ====
Size: 8062 bytes
Last Modified: Fri, Jun  6, 2025  9:09:05 AM
----------------------------------------
# AI Development Guidelines - README

## Overview

This document establishes strict development guidelines for AI assistance with this codebase. These rules exist to prevent bugs, maintain code quality, and ensure system stability. **All rules must be followed without exception.**

## Core Development Rules

### 1. Complete File Delivery
- **Always return full, complete source files in their entirety**
- Never provide partial snippets or abbreviated code
- Include all imports, dependencies, and complete function implementations
- Ensure files are immediately usable without reconstruction

### 2. Comprehensive Documentation
- **Include line-by-line comments for every function, logic branch, and change**
- Explain the purpose and flow of each code section
- Document why decisions were made, not just what the code does
- Comment all conditional logic, loops, and complex operations
- Explain any business logic or domain-specific rules

### 3. Security and Secrets Management
- **Never hardcode secrets, API keys, passwords, or credentials**
- Use the `.env` file for all sensitive configuration values
- Reference environment variables using proper syntax for the language
- If a required secret is missing from `.env`, halt and prompt for it
- Never commit or expose sensitive data in code comments or logs

### 4. Dependency Management
- **Do not introduce or install external dependencies** (Composer packages, npm modules, etc.)
- Work only with existing dependencies in the project
- If new dependencies are required, explicitly request authorization first
- Document any dependency requirements clearly

### 5. Logic Fidelity
- **Follow the exact logic in provided "working" files** (e.g., working_auth.txt, working.php)
- Do not deviate from proven working implementations
- Never guess or assume how something should work
- If working examples exist, use them as the definitive reference
- Preserve existing algorithms and business rules exactly

### 6. API Integration Standards
- **Use schemas in AllEndpoints.json verbatim**
- Copy HTTP methods, field names, and payload structures exactly
- Never assume API behavior or modify endpoint specifications
- Validate all API calls against the provided schemas
- If schema information is missing, request it before proceeding

### 7. Code Organization
- **Modularize shared code effectively**
- Centralize reusable functions, CSS, and templates
- Eliminate code duplication across files
- Create utility functions for common operations
- Maintain consistent file organization and naming

### 8. Requirement Clarification
- **Ask concise clarifying questions when requirements are unclear**
- Never proceed with ambiguous or incomplete specifications
- Confirm understanding before implementing changes
- Request specific examples when behavior is uncertain

### 9. Styling and Theme Management
- **When styling is requested, modify only theme files**
- Leave existing layout and markup structures untouched
- Do not alter HTML structure unless specifically instructed
- Preserve responsive design and accessibility features
- Test styling changes across different screen sizes

### 10. Defensive Programming
- **Write code defensively with comprehensive error handling**
- Validate all inputs before processing
- Check for null values and handle edge cases
- Implement proper error handling and recovery
- Never allow runtime exceptions to crash the application
- Use try-catch blocks appropriately

### 11. Communication Standards
- **Never use em-dashes, emojis, or weak AI-speak**
- Keep all comments and messages plain and direct
- Use clear, professional language in documentation
- Avoid unnecessary verbosity or flowery language
- Write for clarity and maintainability

### 12. Change Impact Assessment
- **Analyze potential breaking changes before implementation**
- Run through existing test cases when available
- Document exactly why changes are safe if they appear risky
- Identify components that might be affected by modifications
- Preserve backward compatibility unless explicitly told otherwise

### 13. Debug and Logging Standards
- **Log debug information consistently and comprehensively**
- Include timestamps in all log entries
- Provide sufficient context for debugging issues
- Include error details and stack traces when appropriate
- Use existing debug panels or logging utilities
- Never leave debug code in production without proper controls

### 14. Code Style Consistency
- **Respect existing codebase conventions exactly**
- Mirror current indentation style (spaces vs tabs, width)
- Follow established naming conventions for variables, functions, and classes
- Match existing file structure and organization patterns
- Preserve comment styles and formatting

### 15. Code Delivery Format
- **Do not package or link to zip files**
- Deliver all code inline as plain text
- Ensure code is immediately copy-pasteable
- Format code properly for readability
- Include proper syntax highlighting markers when applicable

## Enforcement Guardrails

### Rule Violation Protocol
- **If any proposed edit conflicts with the above rules, reject it immediately**
- Clearly explain which specific rule was violated
- Provide the correct approach that follows the guidelines
- Do not proceed until the conflict is resolved

### Missing Dependencies Protocol
- **If secrets or schemas are missing, halt execution immediately**
- Prompt specifically for the missing file or configuration value
- Do not attempt to guess or substitute missing information
- Wait for explicit provision of required resources

### API Uncertainty Protocol
- **If unsure about API behavior, flag the uncertainty**
- Never guess API specifications or behavior
- Request clarification or additional documentation
- Prefer asking questions over making assumptions

### Critical Component Protection
- **Always confirm before touching critical layout or logic components**
- Identify components that could affect system stability
- Get explicit approval for changes to core functionality
- Document the scope and impact of proposed changes

### Code Quality Assurance
- **Any code that fails to compile or test must be rolled back**
- Annotate the failure reason clearly before resubmission
- Fix compilation errors before delivering code
- Test basic functionality when possible
- Ensure code meets language syntax requirements

## Implementation Checklist

Before delivering any code changes, verify:

- [ ] All files are complete and immediately usable
- [ ] Every function and logic branch is commented
- [ ] No secrets or credentials are hardcoded
- [ ] No unauthorized dependencies were added
- [ ] Existing working logic was preserved exactly
- [ ] API calls match AllEndpoints.json specifications
- [ ] Shared code is properly modularized
- [ ] All requirements are clearly understood
- [ ] Only theme files were modified for styling changes
- [ ] Defensive programming practices are implemented
- [ ] Language is plain and direct throughout
- [ ] Change impact has been assessed
- [ ] Debug logging is comprehensive and consistent
- [ ] Code style matches existing conventions
- [ ] Code is delivered as plain text inline

## Failure Recovery

If any guideline is violated:

1. **Stop immediately** and identify the violation
2. **Explain** which rule was broken and why
3. **Provide** the correct approach following guidelines
4. **Restart** the implementation using proper methodology
5. **Verify** compliance before final delivery

## Summary

These guidelines exist to ensure code quality, system stability, and development efficiency. They are not suggestions but mandatory requirements for all AI-assisted development work. Following these rules prevents bugs, maintains consistency, and protects the integrity of the codebase.

**Remember: When in doubt, ask for clarification rather than making assumptions.**


==== TEXT FILE: ./AllEndpoints.json ====
Size: 83 bytes
Last Modified: Wed, Jun  4, 2025  9:06:57 AM
----------------------------------------
{
  "GetCustomers": "/Account/GetAccounts",
  "GetDevices": "/Device/GetDevices"
}



==== PHP FILE: ./auth.php ====
Size: 210 bytes
Last Modified: Thu, Jun  5, 2025  3:15:07 PM
----------------------------------------
<?php
// auth.php
function isLoggedIn() {
    return isset($_SESSION['user_id']);
}

function logout() {
    session_unset();
    session_destroy();
    header('Location: login.php');
    exit;
}
?>


==== TEXT FILE: ./collect_files.sh ====
Size: 2179 bytes
Last Modified: Thu, Jun  5, 2025  6:24:29 PM
----------------------------------------
#!/bin/bash

# Smart PHP Project File Collector
OUTPUT_FILE="php_project_contents_$(date +'%Y%m%d_%H%M%S').txt"

# Configure exclusions (add more as needed)
EXCLUDE_DIRS=("vendor" "node_modules" ".git" ".idea" "build" "dist")
EXCLUDE_EXT=("png" "jpg" "jpeg" "gif" "svg" "ico" "woff" "woff2" "ttf" "eot" "pdf" "zip" "tar.gz")

# Better text file detection
is_text_file() {
    file -b --mime-encoding "$1" | grep -qvi 'binary'
}

# Start output
{
    echo "PHP PROJECT CONTENT COLLECTION"
    echo "Generated: $(date)"
    echo "----------------------------------------"
    echo ""
    
    find . -type f | while read -r file; do
        # Skip excluded directories
        for dir in "${EXCLUDE_DIRS[@]}"; do
            if [[ "$file" == *"/$dir/"* ]]; then
                continue 2
            fi
        done
        
        # Skip excluded extensions
        extension="${file##*.}"
        for ext in "${EXCLUDE_EXT[@]}"; do
            if [[ "${extension,,}" == "${ext,,}" ]]; then
                continue 2
            fi
        done
        
        # Special handling for PHP files - always include
        if [[ "${file##*.}" == "php" ]]; then
            echo "==== PHP FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            cat "$file"
            echo -e "\n\n"
            continue
        fi
        
        # For other files, check if they're text
        if is_text_file "$file"; then
            echo "==== TEXT FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "----------------------------------------"
            head -c 100000 "$file"  # Show first 100KB
            echo -e "\n\n"
        else
            echo "==== BINARY FILE: $file ===="
            echo "Size: $(stat -c%s "$file") bytes"
            echo "Last Modified: $(date -r "$file")"
            echo "[Binary content not displayed]"
            echo -e "\n"
        fi
    done
} > "$OUTPUT_FILE"

echo "Collection complete! Output saved to $OUTPUT_FILE"


==== PHP FILE: ./config.php ====
Size: 492 bytes
Last Modified: Wed, Jun  4, 2025  3:39:09 PM
----------------------------------------
<?php
// Load environment variables
function load_env($file) {
    $env_file = BASE_PATH . $file;
    if (!file_exists($env_file)) {
        die("Environment file not found: $env_file");
    }
    $lines = file($env_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($lines as $line) {
        if (strpos($line, '=') !== false) {
            list($key, $value) = explode('=', $line, 2);
            putenv("$key=$value");
        }
    }
}
load_env('.env');
?>


==== PHP FILE: ./create_module.php ====
Size: 1464 bytes
Last Modified: Wed, Jun  4, 2025  5:12:29 PM
----------------------------------------
<?php
define('BASE_PATH', dirname(__FILE__) . DIRECTORY_SEPARATOR);
require_once BASE_PATH . 'db.php';

if ($argc < 2) die("Usage: php create_module.php <json_config_file>\n");

$config = json_decode(file_get_contents($argv[1]), true);
if (!$config) die("Invalid JSON config\n");

$module_name = $config['name'];
$permission = $config['permission'];
$description = $config['description'];

// Create module file
$module_content = <<<PHP
<?php
if (!has_permission('$permission')) {
    echo "<p class='error'>Access denied.</p>";
    exit;
}
?>
<h2>$description 📊</h2>
<p>Module content goes here...</p>
PHP;
file_put_contents(BASE_PATH . "modules/$module_name.php", $module_content);
if (!file_exists(BASE_PATH . "modules/$module_name.php")) die("Failed to create module file\n");

// Update setup.php
$setup_content = file_get_contents(BASE_PATH . "setup.php");
$setup_content .= "\nexecute_query(\$db, \"INSERT IGNORE INTO permissions (name) VALUES ('$permission')\");";
file_put_contents(BASE_PATH . "setup.php", $setup_content);

// Update index.php
$index_content = file_get_contents(BASE_PATH . "index.php");
$index_content = preg_replace('/\$modules = \[\s*(.*?)\];/s', "\$modules = [\n        '$module_name' => '$permission',\n        $1];", $index_content);
file_put_contents(BASE_PATH . "index.php", $index_content);

echo "Module $module_name created successfully. Run setup.php to apply database changes.\n";
?>


==== PHP FILE: ./db.php ====
Size: 1806 bytes
Last Modified: Thu, Jun  5, 2025  3:49:36 PM
----------------------------------------
<?php
// db.php
function load_env($path) {
    $env = [];
    $env_file = $path . '/.env';
    error_log("Attempting to load .env file from: $env_file");
    if (file_exists($env_file)) {
        $lines = file($env_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            $line = trim($line);
            if ($line && strpos($line, '=') !== false && !str_starts_with($line, '#')) {
                [$key, $value] = array_map('trim', explode('=', $line, 2));
                $env[$key] = $value;
                error_log("Loaded env variable: $key=" . ($key === 'DB_PASS' ? '****' : $value));
            }
        }
    } else {
        error_log("No .env file found at $env_file.");
    }
    return $env;
}

// Initialize database connection
function connect_db() {
    $dir = __DIR__;
    error_log("Base directory for .env load: $dir");
    $env = load_env($dir);
    $host = $env['DB_HOST'] ?? 'localhost';
    $user = $env['DB_USER'] ?? '';
    $pass = $env['DB_PASS'] ?? '';
    $dbname = $env['DB_NAME'] ?? '';

    error_log("Database connection attempt: host=$host, user=$user, dbname=$dbname");
    if (empty($user) || empty($pass) || empty($dbname)) {
        error_log("Missing database credentials: DB_USER=$user, DB_PASS=****, DB_NAME=$dbname");
        return null;
    }

    $mysqli = new mysqli($host, $user, $pass, $dbname);
    if ($mysqli->connect_error) {
        error_log("Database connection failed: " . $mysqli->connect_error);
        return null;
    }
    error_log("Database connection successful.");
    return $mysqli;
}

// Set global $db on include
global $db;
$db = connect_db();

if ($db === null) {
    error_log("Database connection not established in db.php.");
}
?>


==== PHP FILE: ./functions.php ====
Size: 2274 bytes
Last Modified: Thu, Jun  5, 2025  6:00:58 PM
----------------------------------------
<?php
require_once BASE_PATH . 'db.php';

function get_permissions_for_role($role_id) {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_permissions_for_role.");
        return [];
    }
    $stmt = $db->prepare("SELECT p.name FROM permissions p JOIN role_permissions rp ON p.id = rp.permission_id WHERE rp.role_id = ?");
    $stmt->bind_param('i', $role_id);
    $stmt->execute();
    $result = $stmt->get_result();
    $permissions = [];
    while ($row = $result->fetch_assoc()) {
        $permissions[] = $row['name'];
    }
    return $permissions;
}

function get_user_permissions($user_id) {
    global $db;
    if (!$db) {
        error_log("Database connection is null in get_user_permissions.");
        return [];
    }
    if (!isset($_SESSION['role'])) {
        error_log("No role set in session for user_id: $user_id");
        return [];
    }

    $permissions = [];
    $role_name = $_SESSION['role'];

    // Get role ID based on role name
    $stmt = $db->prepare("SELECT id FROM roles WHERE name = ?");
    $stmt->bind_param('s', $role_name);
    $stmt->execute();
    $result = $stmt->get_result();
    $role = $result->fetch_assoc();

    if ($role) {
        $role_id = $role['id'];
        // Get permissions from the user's role
        $permissions = get_permissions_for_role($role_id);
    } else {
        error_log("Role not found: $role_name");
    }

    // Get custom permissions assigned directly to the user
    $stmt = $db->prepare("SELECT p.name FROM permissions p JOIN user_permissions up ON p.id = up.permission_id WHERE up.user_id = ?");
    $stmt->bind_param('i', $user_id);
    $stmt->execute();
    $result = $stmt->get_result();
    while ($row = $result->fetch_assoc()) {
        $permissions[] = $row['name'];
    }

    return array_unique($permissions); // Remove duplicates
}

function has_permission($permission) {
    if (!isset($_SESSION['user_id'])) {
        return false;
    }
    $user_permissions = $_SESSION['permissions'] ?? get_user_permissions($_SESSION['user_id']);
    $_SESSION['permissions'] = $user_permissions; // Cache permissions in session
    return in_array($permission, $user_permissions);
}
?>


==== PHP FILE: ./index.php ====
Size: 12680 bytes
Last Modified: Fri, Jun  6, 2025 10:41:13 AM
----------------------------------------
<?php
// index.php
// ────────────────────────────────────────────────────────────────────────────────
// Enable PHP error display
ini_set('display_errors', 1);
error_reporting(E_ALL);

session_start();

// Define BASE_PATH
define('BASE_PATH', __DIR__ . '/');

// Include dependencies
require_once BASE_PATH . 'db.php';
require_once BASE_PATH . 'functions.php';
include_once BASE_PATH . 'auth.php';

// Check if setup is needed - modified to always check tables
$setup_needed = false;
$required_tables = ['modules', 'users', 'roles', 'permissions', 'role_permissions', 'user_roles', 'user_permissions'];
foreach ($required_tables as $table) {
    $result = $db->query("SHOW TABLES LIKE '$table'");
    if ($result->num_rows == 0) {
        $setup_needed = true;
        break;
    }
}

if ($setup_needed || isset($_GET['reset'])) {
    require_once BASE_PATH . 'setup.php';
    header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'));
    exit;
}

// Set default session data for testing
if (!isset($_SESSION['user_id'])) {
    $result = $db->query("SELECT id FROM users WHERE username = 'admin'");
    $user = $result->fetch_assoc();
    $_SESSION['user_id'] = $user ? $user['id'] : 1;
    $_SESSION['role'] = 'Admin';
    $_SESSION['username'] = 'admin';
    // Match status.php expectation
}

// Handle role change
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['role'])) {
    $_SESSION['role'] = $_POST['role'];
    if (isset($_SESSION['user_id'])) {
        $_SESSION['permissions'] = get_user_permissions($_SESSION['user_id']);
        error_log("Permissions for user_id " . $_SESSION['user_id'] . ": " . json_encode($_SESSION['permissions']));
    }
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit;
}

$role = $_SESSION['role'] ?? 'Guest';
if (isset($_SESSION['user_id'])) {
    $_SESSION['permissions'] = get_user_permissions($_SESSION['user_id']);
    error_log("Initial permissions for user_id " . $_SESSION['user_id'] . ": " . json_encode($_SESSION['permissions']));
}

$modules = [
    'customers'   => ['label' => 'Customers',   'icon' => 'users',         'permission' => 'view_customers'],
    'devices'     => ['label' => 'Devices',     'icon' => 'device-mobile', 'permission' => 'view_devices'],
    'permissions' => ['label' => 'Permissions', 'icon' => 'lock-closed',   'permission' => 'manage_permissions'],
    'devtools'    => ['label' => 'DevTools',    'icon' => 'wrench',        'permission' => 'view_devtools']
];
$accessible_modules = [];
foreach ($modules as $module => $key) {
    if (has_permission($key['permission'])) {
        $accessible_modules[$module] = $key;
    }
}

$current_module  = isset($_GET['module']) && isset($accessible_modules[$_GET['module']]) ? $_GET['module'] : null;
$dashboard_file  = BASE_PATH . 'modules/dashboard.php';
$module_file     = $current_module ? BASE_PATH . "modules/{$current_module}.php" : null;
if (!$db) {
    error_log("Database connection is null.");
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MPSM Control Panel</title>
    <link rel="stylesheet" href="<?php echo BASE_PATH; ?>styles-fallback.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'teal-custom': '#00cec9',
                        'cyan-neon':   '#00FFFF',
                        'magenta-neon':'#FF00FF',
                        'yellow-neon': '#FFFF00',
                        'black-smoke': '#1C2526'
                    }
                }
            }
        };
    </script>
    <style>
        /* ── Original “.glass”, “.menu-item”, and “.floating-module” rules ───────── */
        .glass {
            background: rgba(28, 37, 38, 0.8);
            border: none;
            box-shadow: 0 8px 25px rgba(0,0,0,0.7), inset 0 0 15px rgba(0,255,255,0.4);
        }
        .menu-item {
            background: linear-gradient(145deg, rgba(255,255,255,0.1), rgba(255,255,255,0.03));
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }
        .menu-item.active {
            background: linear-gradient(145deg, rgba(255,255,0,0.3), rgba(255,255,0,0.15));
        }

        /* ── ADJUSTED: `.floating-module` for proper "floating" within its parent container ── */
        .floating-module {
            position: absolute; /* Keeps it positioned relative to its parent (module-area-80) */
            top: 1rem;    /* Aligns with padding of its parent */
            left: 1rem;   /* Aligns with padding of its parent */
            right: 1rem;  /* Aligns with padding of its parent */
            bottom: 1rem; /* Aligns with padding of its parent */
            z-index: 20; /* Ensures it's above other module content */
            background: rgba(28,37,38,0.9);
            border-radius: 8px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.7), inset 0 0 15px rgba(255,255,0,0.2);
            padding: 1.5rem; /* Internal padding for the module's content */
            overflow-y: auto;
            box-sizing: border-box; /* Crucial for including padding in total size */
        }

        @supports not (backdrop-filter: blur(10px)) {
            .glass {
                background: rgba(28,37,38,1);
            }
        }

        /* ── Styles for the overall main content area ── */
        main.glass {
            position: relative; /* Crucial for positioning absolute children (if any directly inside main) */
            overflow-x: hidden; /* Prevent horizontal scroll from padding etc. */
            box-sizing: border-box;
            /* overflow-y: auto; removed from here; let inner divs handle their own scrolling */
        }

        /* ── NEW: Styles for the 20% static dashboard section ── */
        .dashboard-static-20 {
            height: 20%; /* Takes 20% of its flex parent's height */
            flex-shrink: 0; /* Prevents it from shrinking */
            overflow-y: auto; /* Allows internal scrolling if content overflows */
        }

        /* ── NEW: Styles for the 80% dynamic module section ── */
        .module-area-80 {
            /* flex-1 from Tailwind will make it take remaining height */
            position: relative; /* Crucial for `.floating-module` to position itself correctly within this area */
            overflow-y: auto; /* Allows internal scrolling for module content */
        }
    </style>
</head>
<body class="bg-black-smoke text-white min-h-screen font-sans flex flex-col">
    <header class="glass p-4 fixed w-full top-0 z-10 h-16">
        <div class="flex justify-between items-center">
            <h1 class="text-2xl text-cyan-neon">MPSM Control Panel</h1>
            <div>
                <form method="POST" action="" class="inline">
                    <select name="role" onchange="this.form.submit()" class="bg-black-smoke text-white p-2 rounded">
                        <?php foreach (['Developer', 'Admin', 'Service', 'Sales', 'Guest'] as $r): ?>
                            <option value="<?php echo $r; ?>" <?php echo $role === $r ? 'selected' : ''; ?>>
                                <?php echo $r; ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </form>
                <a href="logout.php" class="ml-4 text-magenta-neon">Logout</a>
                <a href="?reset"    class="ml-4 text-yellow-neon">Reset Setup</a>
            </div>
        </div>
    </header>

    <div class="flex flex-1 mt-16">
        <aside class="glass w-64 p-4 fixed h-[calc(100vh-64px)] top-16 overflow-y-auto flex flex-col">
            <nav class="flex-1">
                <ul class="space-y-2">
             


==== PHP FILE: ./setup.php ====
Size: 4457 bytes
Last Modified: Thu, Jun  5, 2025  6:36:02 PM
----------------------------------------
<?php
// Start output buffering
ob_start();

// Define BASE_PATH if not already defined
defined('BASE_PATH') or define('BASE_PATH', __DIR__ . DIRECTORY_SEPARATOR);

require_once BASE_PATH . 'db.php';

function execute_query($db, $sql) {
    if (!$db->query($sql)) {
        error_log("Query failed: " . $db->error . " (SQL: $sql)");
        return false;
    }
    return true;
}

// Drop tables if reset is requested
if (isset($_GET['reset'])) {
    $tables = ['user_permissions', 'user_roles', 'role_permissions', 'permissions', 'users', 'roles', 'modules'];
    foreach ($tables as $table) {
        $db->query("DROP TABLE IF EXISTS $table");
    }
}

// Create tables
$queries = [
    "CREATE TABLE IF NOT EXISTS roles (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50) UNIQUE NOT NULL)",
    "CREATE TABLE IF NOT EXISTS permissions (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50) UNIQUE NOT NULL)",
    "CREATE TABLE IF NOT EXISTS modules (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50) NOT NULL, active TINYINT(1) DEFAULT 1)",
    "CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, password VARCHAR(255) NOT NULL, role_id INT)",
    "CREATE TABLE IF NOT EXISTS role_permissions (
        role_id INT, 
        permission_id INT, 
        PRIMARY KEY (role_id, permission_id), 
        FOREIGN KEY (role_id) REFERENCES roles(id),
        FOREIGN KEY (permission_id) REFERENCES permissions(id)
    )",
    "CREATE TABLE IF NOT EXISTS user_roles (
        user_id INT, 
        role_id INT, 
        PRIMARY KEY (user_id, role_id), 
        FOREIGN KEY (user_id) REFERENCES users(id),
        FOREIGN KEY (role_id) REFERENCES roles(id)
    )",
    "CREATE TABLE IF NOT EXISTS user_permissions (
        user_id INT, 
        permission_id INT, 
        PRIMARY KEY (user_id, permission_id), 
        FOREIGN KEY (user_id) REFERENCES users(id),
        FOREIGN KEY (permission_id) REFERENCES permissions(id)
    )"
];

foreach ($queries as $query) {
    execute_query($db, $query);
}

// Seed data (same as before but with proper password escaping)
$admin_password = '$2y$12$USJhMo47DHHIhiYVLD12we8AHT1qYGxzoLlnVqH2iZl6K/OLMv/w2';
$testuser_password = '$2y$12$o2cNILBvip7suDfhNHV81.4KD3vQW7aP8cTvTvELt4OsPBoH/D.N2';

execute_query($db, "INSERT IGNORE INTO roles (name) VALUES ('Developer'), ('Admin'), ('Service'), ('Sales'), ('Guest')");

execute_query($db, "INSERT IGNORE INTO users (username, password, role_id) VALUES (
    'admin', 
    '" . $db->real_escape_string($admin_password) . "', 
    (SELECT id FROM roles WHERE name = 'Admin')
)");

execute_query($db, "INSERT IGNORE INTO user_roles (user_id, role_id) VALUES (
    (SELECT id FROM users WHERE username = 'admin'), 
    (SELECT id FROM roles WHERE name = 'Admin')
)");

execute_query($db, "INSERT IGNORE INTO users (username, password, role_id) VALUES (
    'testuser', 
    '" . $db->real_escape_string($testuser_password) . "', 
    (SELECT id FROM roles WHERE name = 'Service')
)");

execute_query($db, "INSERT IGNORE INTO user_roles (user_id, role_id) VALUES (
    (SELECT id FROM users WHERE username = 'testuser'), 
    (SELECT id FROM roles WHERE name = 'Service')
)");

execute_query($db, "INSERT IGNORE INTO permissions (name) VALUES 
    ('view_dashboard'), ('view_customers'), ('view_devices'), 
    ('manage_permissions'), ('custom_access'), ('view_devtools'), ('view_status')
");

// Role permissions
execute_query($db, "INSERT IGNORE INTO role_permissions (role_id, permission_id) VALUES 
    (1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),  -- Developer
    (2,1),(2,2),(2,3),(2,4),                    -- Admin
    (3,3),                                      -- Service
    (4,2),                                      -- Sales
    (5,1)                                       -- Guest
");

execute_query($db, "INSERT IGNORE INTO user_permissions (user_id, permission_id) VALUES (
    (SELECT id FROM users WHERE username = 'testuser'), 
    (SELECT id FROM permissions WHERE name = 'custom_access')
)");

execute_query($db, "INSERT IGNORE INTO modules (name, active) VALUES 
    ('dashboard', 1), ('customers', 1), ('devices', 1), 
    ('permissions', 1), ('devtools', 1)
");

// Clean output buffer and redirect
ob_end_clean();
header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'));
exit;
?>


==== TEXT FILE: ./styles-fallback.css ====
Size: 687 bytes
Last Modified: Fri, Jun  6, 2025  9:53:18 AM
----------------------------------------
/* styles-fallback.css */
/* Fallback CSS for Tailwind */
body {
    background-color: #1C2526;
    color: #FFFFFF;
    font-family: sans-serif;
}
p {
    margin: 1rem;
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: rgba(28, 37, 38, 0.8);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.7);
}
.text-green-500 {
    color: #10B981;
}
.text-red-500 {
    color: #EF4444;
}
/* ── Reduce padding on main.glass and .floating-module ──────────────────── */
main.glass {
  padding: 1rem;   /* was effectively 1.5rem in your .glass rule */
}

.floating-module {
  padding: 1rem;   /* was 1.5rem before */
}



==== TEXT FILE: ./styles.css ====
Size: 9038 bytes
Last Modified: Fri, Jun  6, 2025  9:48:18 AM
----------------------------------------
/*────────────────────────────────────────────────────────────────────────────────
  styles.css
  Global Neumorphic + CMYK Theme (applies to your original layout)
─────────────────────────────────────────────────────────────────────────────────*/

/* ── 1) Root Variables ───────────────────────────────────────────────────────── */
:root {
  /* Neumorphic “depth” and glass opacity */
  --depth: 8px;
  --glass-opacity: 0.8;

  /* CMYK neon highlights */
  --cyan-neon:   #00FFFF;
  --magenta-neon:#FF00FF;
  --yellow-neon: #FFFF00;

  /* Background / foreground palette */
  --bg-dark:    #1E272E;
  --fg-dark:    #2D3436;
  --text-light: #D1D8E0;
}

/* ── 2) Base Resets ───────────────────────────────────────────────────────────── */
* {
  box-sizing: border-box;
}
body {
  margin: 0;
  padding: 0;
  background: var(--bg-dark);
  color: var(--text-light);
  font-family: Arial, sans-serif;
}

/* ── 3) Glass / Neumorphic Panels ─────────────────────────────────────────────── */
/* This covers any element with class="glass" (sidebar, main content, etc.) */
.glass {
  background: rgba(30, 39, 46, var(--glass-opacity));
  backdrop-filter: blur(10px);
  box-shadow:
    var(--depth) var(--depth) 20px #1A2021,
    calc(-1 * var(--depth)) calc(-1 * var(--depth)) 20px #40484B,
    inset 0 0 15px var(--cyan-neon);
  border-radius: 16px;
  color: var(--text-light);
}

/* Fallback if backdrop-filter unsupported */
@supports not (backdrop-filter: blur(10px)) {
  .glass {
    background: rgba(30, 39, 46, 1);
  }
}

/* ── 4) HEADER ─────────────────────────────────────────────────────────────────── */
.header {
  background: var(--fg-dark);
  padding: 15px 30px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  top: 0;
  width: 100%;
  box-shadow:
    var(--depth) var(--depth) 20px #1A2021,
    calc(-1 * var(--depth)) calc(-1 * var(--depth)) 20px #40484B,
    0 10px 15px rgba(var(--cyan-neon), 0.4);
  z-index: 100;
}
.header h1 {
  margin: 0;
  font-size: 24px;
  color: var(--cyan-neon);
  text-shadow: 0 2px 4px rgba(var(--cyan-neon), 0.3);
}
.header nav a {
  color: var(--cyan-neon);
  margin-left: 20px;
  padding: 8px 12px;
  border-radius: 12px;
  background: var(--fg-dark);
  box-shadow:
    calc(var(--depth)/2) calc(var(--depth)/2) 12px #1A2021,
    calc(-1 * var(--depth)/2) calc(-1 * var(--depth)/2) 12px #40484B;
  transition: box-shadow 0.3s, text-shadow 0.3s;
  text-decoration: none;
}
.header nav a:hover {
  box-shadow:
    inset calc(var(--depth)/2) calc(var(--depth)/2) 12px #1A2021,
    inset calc(-1 * var(--depth)/2) calc(-1 * var(--depth)/2) 12px #40484B,
    0 0 10px var(--cyan-neon);
  text-shadow: 0 0 6px var(--cyan-neon);
}

/* ── 5) SIDEBAR LINKS ──────────────────────────────────────────────────────────── */
.menu-item {
  background: var(--fg-dark);
  border-radius: 16px;
  padding: 12px;
  display: flex;
  align-items: center;
  color: var(--text-light);
  text-decoration: none;
  box-shadow:
    var(--depth) var(--depth) 20px #1A2021,
    calc(-1 * var(--depth)) calc(-1 * var(--depth)) 20px #40484B;
  transition: box-shadow 0.3s, text-shadow 0.3s;
}
.menu-item:hover {
  box-shadow:
    inset var(--depth) var(--depth) 20px #1A2021,
    inset calc(-1 * var(--depth)) calc(-1 * var(--depth)) 20px #40484B,
    0 0 10px var(--magenta-neon);
  text-shadow: 0 0 6px var(--cyan-neon), 0 0 12px var(--cyan-neon);
  color: var(--cyan-neon);
}
.menu-item.active {
  background: var(--fg-dark);
  box-shadow:
    inset var(--depth) var(--depth) 20px #1A2021,
    inset calc(-1 * var(--depth)) calc(-1 * var(--depth)) 20px #40484B,
    0 0 12px var(--yellow-neon);
  text-shadow: 0 0 6px var(--yellow-neon), 0 0 12px var(--yellow-neon);
  color: var(--yellow-neon);
}

/* ── 6) MAIN CONTENT (now fixed) ──────────────────────────────────────────────── */
main.glass {
  position: fixed;
  top: 64px;       /* height of header (4rem = 64px) */
  left: 256px;     /* width of sidebar (16rem = 256px) */
  right: 0;
  bottom: 0;
  overflow-y: auto;
  overflow-x: hidden;

  background: rgba(30, 39, 46, var(--glass-opacity));
  backdrop-filter: blur(10px);
  box-shadow:
    var(--depth) var(--depth) 20px #1A2021,
    calc(-1 * var(--depth)) calc(-1 * var(--depth)) 20px #40484B,
    inset 0 0 15px var(--cyan-neon);
  border-radius: 16px;
  padding: 1rem;   /* reduced from 1.5rem */
  color: var(--text-light);
  z-index: 10;
}

/* ── 7) FLOATING MODULE (Modal) ───────────────────────────────────────────────── */
.floating-module {
  position: fixed;

  /* 10% gutter from header (64px) + 80% height of remaining */
  top: calc(64px + ((100vh - 64px) * 0.10));
  left: calc(256px + ((100vw - 256px) * 0.10));
  width:  calc((100vw - 256px) * 0.80);
  height: calc((100vh - 64px) * 0.80);

  background: rgba(28, 37, 38, 0.9);
  border-radius: 8px;
  box-shadow:
    0 8px 25px rgba(0, 0, 0, 0.7),
    inset 0 0 15px rgba(255, 255, 0, 0.2);
  padding: 1rem;   /* reduced from 1.5rem */
  overflow-y: auto;
  z-index: 20;
}

/* ── 8) TABLES / FORMS (Force dark panels) ─────────────────────────────────────── */
table, th, td, input, select, button {
  background: var(--fg-dark) !important;
  color: var(--text-light) !important;
  box-shadow:
    inset calc(var(--depth)/2) calc(var(--depth)/2) 8px #1A2021,
    inset calc(-1 * var(--depth)/2) calc(-1 * var(--depth)/2) 8px #40484B !important;
  border-radius: 8px;
  border: none !important;
}
.login-container,
.permissions-form,
.permissions-table th,
.permissions-table td {
  background: var(--fg-dark) !important;
  box-shadow:
    inset calc(var(--depth)/2) calc(var(--depth)/2) 8px #1A2021,
    inset calc(-1 * var(--depth)/2) calc(-1 * var(--depth)/2) 8px #40484B !important;
}

/* ── 9) DevTools: Live Style Customizer ───────────────────────────────────────── */
.devtools-container {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  color: var(--text-light);
}
.devtools-container h2 {
  margin: 0 0 0.5rem 0;
  font-size: 1.5rem;
  color: var(--cyan-neon);
  text-shadow: 0 2px 4px rgba(var(--cyan-neon), 0.4);
}
.devtools-row {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}
.devtools-row label {
  flex: 1 0 150px;
  font-size: 1rem;
}
.devtools-row input[type="range"] {
  flex: 1 1 auto;
  -webkit-appearance: none;
  background: transparent;
}
.devtools-row input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 16px;
  height: 16px;
  background: var(--magenta-neon);
  border-radius: 50%;
  border: none;
  cursor: pointer;
  box-shadow:
    2px 2px 6px rgba(0,0,0,0.5),
    -2px -2px 6px rgba(255,255,255,0.1);
}
.devtools-row input[type="range"]::-webkit-slider-runnable-track {
  height: 4px;
  background: var(--fg-dark);
  border-radius: 2px;
}
.devtools-row input[type="color"] {
  width: 2rem;
  height: 2rem;
  border: none;
  cursor: pointer;
  background: none;
}
.devtools-value {
  width: 2rem;
  text-align: center;
  font-family: monospace;
}
.devtools-reset {
  align-self: flex-end;
  padding: 0.5rem 1rem;
  background: var(--fg-dark);
  color: var(--text-light);
  border: none;
  border-radius: 8px;
  box-shadow:
    inset 2px 2px 6px #1A2021,
    inset -2px -2px 6px #40484B,
    0 0 10px var(--yellow-neon);
  cursor: pointer;
  transition: box-shadow 0.3s, color 0.3s;
}
.devtools-reset:hover {
  box-shadow:
    inset -2px -2px 6px #1A2021,
    inset 2px 2px 6px #40484B,
    0 0 12px var(--yellow-neon);
  color: var(--yellow-neon);
}



==== PHP FILE: ./Working.php ====
Size: 300 bytes
Last Modified: Wed, Jun  4, 2025 11:53:36 AM
----------------------------------------
<?php
/**
 * Working.php
 * Reference file containing API interaction functions.
 */

function getAccessToken() {
    // Dummy placeholder: return a fake token
    return 'fake_access_token_123';
}

function callGetCustomers($token) {
    // Dummy placeholder: return an empty array
    return [];
}



