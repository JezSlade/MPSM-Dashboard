<?php
// helpers.php

/**
 * Renders the content of a specific widget file.
 *
 * @param string $widget_id The unique ID of the widget (matches filename in widgets/ directory, without .php).
 * @return string The HTML content generated by the widget, or an error message.
 */
function render_widget(string $widget_id): string {
    $widget_file = APP_ROOT . '/widgets/' . basename($widget_id) . '.php';

    if (!file_exists($widget_file)) {
        return '<div class="widget-error">Widget content not found: ' . htmlspecialchars($widget_id) . '.php</div>';
    }

    // Use output buffering to capture the widget's output
    ob_start();
    include $widget_file;
    $content = ob_get_clean();

    return $content;
}

/**
 * Extracts metadata (name, icon, width, height) from a widget PHP file.
 * Widgets should define these as PHP variables at the top of the file.
 *
 * @param string $file_path The full path to the widget's PHP file.
 * @return array An associative array of widget metadata, or default values if not found.
 */
function get_widget_metadata_from_file(string $file_path): array {
    $name = basename($file_path, '.php'); // Default name is filename
    $icon = 'fas fa-cube'; // Default icon, now including 'fas' prefix
    $width = 1.0; // Default width
    $height = 1.0; // Default height

    // Read the first few lines to look for metadata comments or variables
    $handle = fopen($file_path, "r");
    if ($handle) {
        $content = fread($handle, 2048); // Read first 2KB - usually enough for metadata comments
        fclose($handle);

        // Look for PHP variable definitions or comments like:
        // // Widget Name: Sales & Revenue
        // // Widget Icon: fas fa-chart-line  <-- Now capturing the full class
        // // Widget Width: 2
        // // // Widget Height: 1

        if (preg_match('/Widget Name:\s*(.+)/i', $content, $matches)) {
            $name = trim($matches[1]);
        }
        // MODIFIED: Capture the full Font Awesome class (e.g., "fas fa-star")
        if (preg_match('/Widget Icon:\s*(fas|far|fab|fa)\s+fa-[a-z0-9-]+/i', $content, $matches)) {
            $icon = trim($matches[0]); // Capture the full matched string
        }
        if (preg_match('/Widget Width:\s*([\d.]+)/i', $content, $matches)) {
            $width = (float)trim($matches[1]);
        }
        if (preg_match('/Widget Height:\s*([\d.]+)/i', $content, $matches)) {
            $height = (float)trim($matches[1]);
        }
    }

    return [
        'name' => $name,
        'icon' => $icon, // This now contains the full class, e.g., "fas fa-bug"
        'width' => $width,
        'height' => $height
    ];
}

/**
 * Scans the widgets/ directory and returns a list of all available widgets with their metadata.
 *
 * @return array An associative array of available widgets, keyed by widget ID (filename without .php).
 */
function discover_widgets(): array {
    $widgets_dir = APP_ROOT . '/widgets/';
    $available_widgets = [];

    if (!is_dir($widgets_dir)) {
        error_log("ERROR: Widget directory not found: " . $widgets_dir);
        return [];
    }

    $files = scandir($widgets_dir);
    foreach ($files as $file) {
        if (pathinfo($file, PATHINFO_EXTENSION) === 'php') {
            $widget_id = basename($file, '.php');
            $file_path = $widgets_dir . $file;
            $metadata = get_widget_metadata_from_file($file_path);
            $available_widgets[$widget_id] = $metadata;
            // --- DEBUGGING LINE ---
            error_log("Widget metadata for {$widget_id}: " . print_r($metadata, true));
            // --- END DEBUGGING LINE ---
        }
    }

    // Sort widgets alphabetically by name for consistent display
    uasort($available_widgets, function($a, $b) {
        return strcmp($a['name'], $b['name']);
    });

    return $available_widgets;
}
